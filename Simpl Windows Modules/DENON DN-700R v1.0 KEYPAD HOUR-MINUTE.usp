/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	CrestronJapan
System Name:
System Number:
Programmer:		Lim
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "DENON DN-700R v1.0 KEYPAD HOUR-MINUTE"
// #HINT ""
#DEFINE_CONSTANT UPPER_LIMIT_HOUR	23
#DEFINE_CONSTANT UPPER_LIMIT_MINUTE	59


// #CATEGORY "" 
//#CATEGORY "24" 
// #DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT HOUR_SELECT,MINUTE_SELECT;
DIGITAL_INPUT	KEY_POSITIVE,KEY_NEGATIVE;
DIGITAL_INPUT	KEY_0, KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,KEY_6,KEY_7,KEY_8,KEY_9,KEY_STAR;
DIGITAL_INPUT	KEY_BACKSPACE,KEY_CLEAR,KEY_ENTER, KEY_CLEAR_ALL;

DIGITAL_OUTPUT HOUR_SELECT_FB,MINUTE_SELECT_FB;

STRING_OUTPUT	KEY_STRING;
STRING_OUTPUT	TO_MODULE_STRING;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER i;
STRING TEMP_HOUR$[3],TEMP_MINUTE$[3];
STRING ZERO_STRING$[2];
STRING SIGN$[1];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

FUNCTION DISPLAY_string_out_f()
{
If (len(SIGN$))
	{
	MAKESTRING (KEY_STRING, "%s%s:%s\r",SIGN$, TEMP_HOUR$, TEMP_MINUTE$);
	}
else MAKESTRING (KEY_STRING, "%s:%s\r",TEMP_HOUR$, TEMP_MINUTE$);

 
}



FUNCTION STRING_OUT_F(STRING DIGI)
{
IF(HOUR_SELECT_FB)
	{
	TEMP_HOUR$= TEMP_HOUR$ + DIGI;
	IF ((ATOI(TEMP_HOUR$) > UPPER_LIMIT_HOUR) || (LEN(TEMP_MINUTE$) > 2)) 
		{
         KEY_STRING = "Out of Rang";
		TEMP_HOUR$ = left(TEMP_HOUR$,len(TEMP_HOUR$)-1);
		delay(100);
		}
	} 
IF(MINUTE_SELECT_FB)
	{
	TEMP_MINUTE$= TEMP_MINUTE$ + DIGI;
	IF ((ATOI(TEMP_MINUTE$) > UPPER_LIMIT_MINUTE)|| (LEN(TEMP_MINUTE$) > 2) )
		{
        KEY_STRING = "Out of Rang";
		TEMP_MINUTE$ = left(TEMP_MINUTE$,len(TEMP_MINUTE$)-1);
		delay(100);
		}
	}
DISPLAY_string_out_f();

}

/*******************************************************************************************/
PUSH HOUR_SELECT
{
MINUTE_SELECT_FB = OFF;
HOUR_SELECT_FB	= ON;
} 

PUSH MINUTE_SELECT
{
HOUR_SELECT_FB	= OFF;
MINUTE_SELECT_FB = ON;
}

PUSH KEY_POSITIVE
{
SIGN$ = "+";
DISPLAY_string_out_f();
}

PUSH KEY_NEGATIVE
{
SIGN$ = "-";
DISPLAY_string_out_f();
}




PUSH KEY_0
{
STRING_OUT_F("0");
}

PUSH KEY_1
{
STRING_OUT_F("1");
}

PUSH KEY_2
{
STRING_OUT_F("2");
}

PUSH KEY_3
{
STRING_OUT_F("3");
}

PUSH KEY_4
{
STRING_OUT_F("4");
}

PUSH KEY_5
{
STRING_OUT_F("5");
}

PUSH KEY_6
{
STRING_OUT_F("6");
}

PUSH KEY_7
{
STRING_OUT_F("7");
}

PUSH KEY_8
{
STRING_OUT_F("8");
}

PUSH KEY_9
{
STRING_OUT_F("9");
}

PUSH KEY_STAR
{
STRING_OUT_F("*");
}

PUSH KEY_BACKSPACE
{
IF(HOUR_SELECT_FB)
	{
	TEMP_HOUR$ = left(TEMP_HOUR$,len(TEMP_HOUR$)-1);
	} 
IF(MINUTE_SELECT_FB)
	{
	TEMP_MINUTE$ = left(TEMP_MINUTE$,len(TEMP_MINUTE$)-1);
	}
DISPLAY_string_out_f();
}

PUSH KEY_CLEAR
{
IF(HOUR_SELECT_FB)
	{
	clearbuffer(TEMP_HOUR$);
	} 
IF(MINUTE_SELECT_FB)
	{
	clearbuffer(TEMP_MINUTE$);
	}

DISPLAY_string_out_f();
}

PUSH KEY_ENTER
{
If (len(SIGN$))
	{
    MAKESTRING(TO_MODULE_STRING, "%s%s%s%s%s",SIGN$,RIGHT(ZERO_string$,2-len(TEMP_HOUR$)),TEMP_HOUR$,RIGHT(ZERO_string$,2-len(TEMP_MINUTE$)),TEMP_MINUTE$);
	}
Else
MAKESTRING(TO_MODULE_STRING, "%s%s%s%s",RIGHT(ZERO_string$,2-len(TEMP_HOUR$)),TEMP_HOUR$,RIGHT(ZERO_string$,2-len(TEMP_MINUTE$)),TEMP_MINUTE$);
}

PUSH KEY_CLEAR_ALL
{
clearbuffer(TEMP_HOUR$);
clearbuffer(TEMP_MINUTE$);
clearbuffer(SIGN$);
DISPLAY_string_out_f();

}

/******************************************************************************************* =
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
 Function Main()
{
ZERO_STRING$ = "00";
clearbuffer(TEMP_HOUR$);
clearbuffer(TEMP_MINUTE$);

DISPLAY_string_out_f();


}
