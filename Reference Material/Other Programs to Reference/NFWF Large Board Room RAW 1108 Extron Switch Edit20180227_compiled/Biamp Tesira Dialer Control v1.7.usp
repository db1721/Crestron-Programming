/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira Dialer Conrtrol v1.7
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150
#DEFINE_CONSTANT MAX_SPEEDDIAL_ENTRIES 16
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Dialer Control v1.7.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_;    
DIGITAL_INPUT Poll_Dialer, _SKIP_;                                                     
DIGITAL_INPUT On_Hook, Off_Hook, Toggle_Hook, _SKIP_;
DIGITAL_INPUT Answer, Flash, Redial, End, _SKIP_;
DIGITAL_INPUT AutoAnswer_On, AutoAnswer_Off, AutoAnswer_Toggle, _SKIP_;
DIGITAL_INPUT Get_CallerID_Basic, Get_CallerID_Full, _SKIP_;
DIGITAL_INPUT Keypad_0, Keypad_1, Keypad_2, Keypad_3, Keypad_4, Keypad_5, Keypad_6, Keypad_7, Keypad_8, Keypad_9, Keypad_Star, Keypad_Pound, Keypad_Clear, Keypad_BackSpace, Keypad_Dial, _SKIP_;
DIGITAL_INPUT Directory_Top_Page, Directory_Next_Page, Directory_Previous_Page, Directory_Bottom_Page; 
DIGITAL_INPUT Select_Directory_Item_01, Select_Directory_Item_02, Select_Directory_Item_03, Select_Directory_Item_04; 
DIGITAL_INPUT Select_Directory_Item_05, Select_Directory_Item_06, Select_Directory_Item_07, Select_Directory_Item_08; 
DIGITAL_INPUT Select_Directory_Item_09, Select_Directory_Item_10, Select_Directory_Item_11, Select_Directory_Item_12; 
DIGITAL_INPUT Select_Directory_Item_13, Select_Directory_Item_14, Select_Directory_Item_15, Select_Directory_Item_16, _SKIP_; 
DIGITAL_INPUT Dial_Selected_Directory_Item, _SKIP_, _SKIP_; 
DIGITAL_INPUT Save_Directory_Entry;                              
ANALOG_INPUT Select_Directory_Save_Location;
STRING_INPUT Directory_Save_Name$[50], Directory_Save_Num$[50],_SKIP_;
BUFFER_INPUT From_Processor$[10000];

DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_; 
DIGITAL_OUTPUT Is_Initialized, _SKIP_;                                                         
DIGITAL_OUTPUT Is_On_Hook, Is_Off_Hook, Is_Dialing, _SKIP_;
DIGITAL_OUTPUT Has_Incoming_Call, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT AutoAnswer_Is_On, AutoAnswer_Is_Off, _SKIP_, _SKIP_;
STRING_OUTPUT CallerID_Num$, CallerID_Name$, _SKIP_;
STRING_OUTPUT Keypad$, Last_Number_Dialed$, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
STRING_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_; 
STRING_OUTPUT Directory_Item_01$, Directory_Item_02$, Directory_Item_03$, Directory_Item_04$;
STRING_OUTPUT Directory_Item_05$, Directory_Item_06$, Directory_Item_07$, Directory_Item_08$;
STRING_OUTPUT Directory_Item_09$, Directory_Item_10$, Directory_Item_11$, Directory_Item_12$;
STRING_OUTPUT Directory_Item_13$, Directory_Item_14$, Directory_Item_15$, Directory_Item_16$, _SKIP_;
STRING_OUTPUT Selected_Directory_Item_Name$, Selected_Directory_Item_Num$, _SKIP_;

STRING_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
STRING_OUTPUT To_Processor$;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER Dialer_InstanceTag[50], ControlStatus_InstanceTag[50];
INTEGER_PARAMETER SpeedDialList_PageSize;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Dialer_InstanceTag, ControlStatus_InstanceTag
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES SpeedDialList_PageSize
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d, 16d;
   propDefaultValue = 16d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
Structure SpeedDialEntry
{
	STRING label[50];
	STRING defaultLabel[50];
	STRING number[50];
};

SpeedDialEntry speedDialList[MAX_SPEEDDIAL_ENTRIES];
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER myID;
INTEGER x;
////////////////////////////////////////////////////////////
// Parsing Messages
////////////////////////////////////////////////////////////
INTEGER parsingModuleBusy;
STRING parsedModuleMsg[254];
INTEGER responseModuleMsgID;         
STRING responseRequestMsg[MAX_COMMAND_SIZE];
STRING responseMsg[MAX_COMMAND_SIZE];           
STRING parseString[MAX_COMMAND_SIZE];    
INTEGER parseInt;    
STRING trash[MAX_COMMAND_SIZE];

////////////////////////////////////////////////////////////
// Outgoing Messages
////////////////////////////////////////////////////////////
STRING outgoingMsg[MAX_COMMAND_SIZE];

////////////////////////////////////////////////////////////
// DialPad data
////////////////////////////////////////////////////////////
STRING dialPadText[50];
           
////////////////////////////////////////////////////////////
// String Tokenizer
////////////////////////////////////////////////////////////
STRING statusTokens[10][MAX_COMMAND_SIZE];
STRING token[MAX_COMMAND_SIZE];
INTEGER statusTokenCount;

////////////////////////////////////////////////////////////
// SpeedDial Page List
////////////////////////////////////////////////////////////
INTEGER nQtyOfPages;
INTEGER nCurrentPage;
INTEGER nQtyEntriesOnLastPage;
INTEGER nCurrentCount;
INTEGER nCurrentPageSize;
INTEGER nSelectedIndex;
INTEGER IS_TOP;
INTEGER IS_BOTTOM;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
////////////////////////////////////////////////////////////
// Module Communication Method Helpers
////////////////////////////////////////////////////////////
String_Function getBoundString(STRING source, STRING startString, STRING endString)
{
	INTEGER startIndex;
	INTEGER endIndex;
	STRING response[MAX_COMMAND_SIZE];
                                     
    response = "";

	IF (LEN(source) > 0)
	{
		startIndex = FIND(startString, source);
		endIndex = FIND(endString, source, startIndex + 1);
	
		IF (startIndex > 0 && startIndex < endIndex)
		{
			startIndex = startIndex + LEN(startString);
				
			response = MID(source, startIndex, endIndex - startIndex);
		}
	}

	RETURN (response);
}

Integer_Function stringTokenizer(STRING tokenList[], STRING stringMsg, STRING delimiter)
{
	INTEGER nStartLocation;
	INTEGER nFoundLocation;
	INTEGER item;
	INTEGER clearItem;
	STRING token[100];

	item = 0;

	nStartLocation = 1;

	WHILE (TRUE)
	{
		nFoundLocation = FIND(delimiter, stringMsg, nStartLocation);

		IF (nFoundLocation = 0)
			break;

		token = MID(stringMsg, nStartLocation, nFoundLocation - nStartLocation);

		if (LEN(token) > 0)
		{
			if (item + 1 > GetNumArrayRows(tokenList))
				break;

			item = item + 1;

			tokenList[item] = token;
		}

		nStartLocation = nFoundLocation + LEN(delimiter);	
	}

	IF (nStartLocation <= LEN(stringMsg) && (item + 1 <= GetNumArrayRows(tokenList)))
	{
		item = item + 1;

		tokenList[item] = MID(stringMsg, nStartLocation, (LEN(stringMsg) - nStartLocation) + 1);
	}

	FOR (clearItem = item + 1 to GetNumArrayRows(tokenList))
		tokenList[clearItem] = "";
                                                       
	return (item);
}
 
////////////////////////////////////////////////////////////
// Protocol Method Helpers	
////////////////////////////////////////////////////////////
String_Function buildProtocolMsg(STRING instanceTag, STRING command, STRING control, INTEGER Index1, INTEGER Index2)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = "";

	IF (Index1 > 0 && Index2 > 0)
		MakeString(msg,"%s %s %s %d %d", instanceTag, command, control, Index1, Index2);
	ELSE IF (Index1 > 0 && Index2 = 0)
		MakeString(msg,"%s %s %s %d", instanceTag, command, control, Index1);
	ELSE IF (Index1 = 0 && Index2 > 0)
		MakeString(msg,"%s %s %s %d", instanceTag, command, control, Index2);
	ELSE
		MakeString(msg,"%s %s %s", instanceTag, command, control);

	RETURN (msg);
}

String_Function buildProtocolMsg_WithStringValue(STRING instanceTag, STRING command, STRING control, INTEGER Index1, INTEGER Index2, STRING value)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = buildProtocolMsg(instanceTag, command, control, Index1, Index2);

	MakeString(msg,"%s %s", msg, value);

	RETURN (msg);
}

String_Function buildProtocolMsg_WithIntegerValue(STRING instanceTag, STRING command, STRING control, INTEGER Index1, INTEGER Index2, INTEGER value)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = buildProtocolMsg(instanceTag, command, control, Index1, Index2);

	MakeString(msg,"%s %d", msg, value);

	RETURN (msg);
}

String_Function buildProtocolMsg_WithStateValue(STRING instanceTag, STRING command, STRING control, INTEGER Index1, INTEGER Index2, INTEGER state)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = buildProtocolMsg(instanceTag, command, control, Index1, Index2);
                                                  
	IF (state = TRUE)
		MakeString(msg,"%s true", msg);
	ELSE
		MakeString(msg,"%s false", msg);

	RETURN (msg);
}
////////////////////////////////////////////////////////////
// Initialize Method Helpers	
////////////////////////////////////////////////////////////
Function getInitialized()
{
	STRING subscribeObject[100];
	INTEGER entry;

	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "autoAnswer", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
                                                                                      
	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "dialing", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, "dialing");

	outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "subscribe", "dialing", 0, 0, subscribeObject);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "hookState", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, "hookState");

	outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "subscribe", "hookState", 0, 0, subscribeObject);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "lastNum", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, "lastNum");

	outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "subscribe", "lastNum", 0, 0, subscribeObject);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "ringing", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, "ringing");

	outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "subscribe", "ringing", 0, 0, subscribeObject);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	FOR (entry = 1 to MAX_SPEEDDIAL_ENTRIES)
	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialLabel", 1, entry);
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialNum", 1, entry);
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
	}

	outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "get", "displayNameLabel", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
}

Function doPoll()
{
	STRING subscribeObject[100];
	INTEGER entry;

	outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "autoAnswer", 0, 0);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

	FOR (entry = 1 to MAX_SPEEDDIAL_ENTRIES)
	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialLabel", 1, entry);
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialNum", 1, entry);
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
	}                          
}

////////////////////////////////////////////////////////////
// String Method Helpers
////////////////////////////////////////////////////////////
Integer_Function startsWith(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) = 1); 
}

Integer_Function contains(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) > 0); 
}
                 
Integer_Function ATOI_Signed(STRING value)
{
	IF (startsWith("-", value))
		RETURN (0-ATOI(value));
	ELSE
		RETURN (ATOI(value));
}

String_Function trim(STRING value)
{
	WHILE(LEFT(value, 1) = "\x20")
		value = RIGHT(value, LEN(value) - 1);

	WHILE(RIGHT(value, 1) = "\x20")
		value = LEFT(value, LEN(value) - 1);

	RETURN (value);
}

////////////////////////////////////////////////////////////              
// DialPad Method Helpers
////////////////////////////////////////////////////////////
Function dialPadKeyPress(STRING keycode)
{
	MakeString(dialPadText,"%s%s", dialPadText, keyCode); 

	IF (Is_Off_Hook = TRUE && Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg_WithStringValue(Dialer_InstanceTag, "dtmf", "1", 0, 0, keyCode);		
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}

	Keypad$ = dialPadText;
}

Function dialPadClear()
{
	dialPadText = "";

	Keypad$ = dialPadText;
}

////////////////////////////////////////////////////////////              
// SpeedDial List Method Helpers
////////////////////////////////////////////////////////////
Function Select_SpeedDialEntry(INTEGER listItem)
{
	IF (listItem <= nCurrentPageSize)
	{
		nSelectedIndex = ((((nCurrentPage - 1) * nCurrentPageSize) + 1) + (listItem - 1));
                                                      
		IF (LEN(speedDialList[nSelectedIndex].label) > 0)
			Selected_Directory_Item_Name$ = speedDialList[nSelectedIndex].label;
		ELSE
			Selected_Directory_Item_Name$ = speedDialList[nSelectedIndex].defaultLabel;

		Selected_Directory_Item_Num$ = speedDialList[nSelectedIndex].number;
	}
}

Function Display_SpeedDialEntry(INTEGER startIndex, INTEGER displayCount)
{
	STRING label[50];

	IF (displayCount >= 1 && ((startIndex + 0) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 0].label) > 0)
			label = speedDialList[startIndex + 0].label;
		ELSE
			label = speedDialList[startIndex + 0].defaultLabel;

		Directory_Item_01$ = label;
	}
	ELSE
		Directory_Item_01$ = "";

	IF (displayCount >= 2 && ((startIndex + 1) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 1].label) > 0)
			label = speedDialList[startIndex + 1].label;
		ELSE
			label = speedDialList[startIndex + 1].defaultLabel;

		Directory_Item_02$ = label;
	}
	ELSE
		Directory_Item_02$ = "";

	IF (displayCount >= 3 && ((startIndex + 2) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 2].label) > 0)
			label = speedDialList[startIndex + 2].label;
		ELSE
			label = speedDialList[startIndex + 2].defaultLabel;

		Directory_Item_03$ = label;
	}
	ELSE
		Directory_Item_03$ = "";

	IF (displayCount >= 4 && ((startIndex + 3) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 3].label) > 0)
			label = speedDialList[startIndex + 3].label;
		ELSE
			label = speedDialList[startIndex + 3].defaultLabel;

		Directory_Item_04$ = label;
	}
	ELSE
		Directory_Item_04$ = "";

	IF (displayCount >= 5 && ((startIndex + 4) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 4].label) > 0)
			label = speedDialList[startIndex + 4].label;
		ELSE
			label = speedDialList[startIndex + 4].defaultLabel;

		Directory_Item_05$ = label;
	}
	ELSE
		Directory_Item_05$ = "";

	IF (displayCount >= 6 && ((startIndex + 5) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 5].label) > 0)
			label = speedDialList[startIndex + 5].label;
		ELSE
			label = speedDialList[startIndex + 5].defaultLabel;

		Directory_Item_06$ = label;
	}
	ELSE
		Directory_Item_06$ = "";

	IF (displayCount >= 7 && ((startIndex + 6) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 6].label) > 0)
			label = speedDialList[startIndex + 6].label;
		ELSE
			label = speedDialList[startIndex + 6].defaultLabel;

		Directory_Item_07$ = label;
	}
	ELSE
		Directory_Item_07$ = "";

	IF (displayCount >= 8 && ((startIndex + 7) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 7].label) > 0)
			label = speedDialList[startIndex + 7].label;
		ELSE
			label = speedDialList[startIndex + 7].defaultLabel;

		Directory_Item_08$ = label;
	}
	ELSE
		Directory_Item_08$ = "";

	IF (displayCount >= 9 && ((startIndex + 8) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 8].label) > 0)
			label = speedDialList[startIndex + 8].label;
		ELSE
			label = speedDialList[startIndex + 8].defaultLabel;

		Directory_Item_09$ = label;
	}
	ELSE
		Directory_Item_09$ = "";

	IF (displayCount >= 10 && ((startIndex + 9) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 9].label) > 0)
			label = speedDialList[startIndex + 9].label;
		ELSE
			label = speedDialList[startIndex + 9].defaultLabel;

		Directory_Item_10$ = label;
	}
	ELSE
		Directory_Item_10$ = "";

	IF (displayCount >= 11 && ((startIndex + 10) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 10].label) > 0)
			label = speedDialList[startIndex + 10].label;
		ELSE
			label = speedDialList[startIndex + 10].defaultLabel;

		Directory_Item_11$ = label;
	}
	ELSE
		Directory_Item_11$ = "";

	IF (displayCount >= 12 && ((startIndex + 11) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 11].label) > 0)
			label = speedDialList[startIndex + 11].label;
		ELSE
			label = speedDialList[startIndex + 11].defaultLabel;

		Directory_Item_12$ = label;
	}
	ELSE
		Directory_Item_12$ = "";

	IF (displayCount >= 13 && ((startIndex + 12) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 12].label) > 0)
			label = speedDialList[startIndex + 12].label;
		ELSE
			label = speedDialList[startIndex + 12].defaultLabel;

		Directory_Item_13$ = label;
	}
	ELSE
		Directory_Item_13$ = "";

	IF (displayCount >= 14 && ((startIndex + 13) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 13].label) > 0)
			label = speedDialList[startIndex + 13].label;
		ELSE
			label = speedDialList[startIndex + 13].defaultLabel;

		Directory_Item_14$ = label;
	}
	ELSE
		Directory_Item_14$ = "";

	IF (displayCount >= 15 && ((startIndex + 14) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 14].label) > 0)
			label = speedDialList[startIndex + 14].label;
		ELSE
			label = speedDialList[startIndex + 14].defaultLabel;

		Directory_Item_15$ = label;
	}
	ELSE
		Directory_Item_15$ = "";

	IF (displayCount >= 16 && ((startIndex + 15) <= MAX_SPEEDDIAL_ENTRIES))
	{
		IF (LEN(speedDialList[startIndex + 15].label) > 0)
			label = speedDialList[startIndex + 15].label;
		ELSE
			label = speedDialList[startIndex + 15].defaultLabel;

		Directory_Item_16$ = label;
	}
	ELSE
		Directory_Item_16$ = "";
}

Function Clear_SpeedDialList()
{
	Display_SpeedDialEntry(1, 0);
}

Function Page_SpeedDialList(INTEGER nPage)
{
	IF (nPage > 0 && nPage <= nQtyOfPages)
	{
		IF (nPage = nQtyOfPages)
			Display_SpeedDialEntry((((nPage - 1) * nCurrentPageSize) + 1), nQtyEntriesOnLastPage);
		ELSE
			Display_SpeedDialEntry((((nPage - 1) * nCurrentPageSize) + 1), nCurrentPageSize);
			
		nCurrentPage = nPage;

		IS_TOP = (nCurrentPage = 1);
		IS_BOTTOM = (nCurrentPage = nQtyOfPages);
	}
}

Function Update_SpeedDialList(INTEGER nCount)
{
	nCurrentCount = nCount;
	
	IF (nCurrentCount > 0)
	{
		nQtyOfPages = (((nCurrentCount - 1) / nCurrentPageSize) + 1);
		nQtyEntriesOnLastPage = (((nCurrentCount - 1) % nCurrentPageSize) + 1);
	
		IF (nCurrentPage = 0 || nCurrentPage > nQtyOfPages)
			nCurrentPage = 1;
			
		Page_SpeedDialList(nCurrentPage);
	}
	ELSE
	{
		nQtyOfPages = 0;
		nQtyEntriesOnLastPage = 0;
		nCurrentPage = 0;

		IS_TOP = TRUE;
		IS_BOTTOM = TRUE;

		Clear_SpeedDialList();
	}
        
	IF (nCount > 0)
	{
		IS_TOP = (nCurrentPage = 1);
		IS_BOTTOM = (nCurrentPage = nQtyOfPages);
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
////////////////////////////////////////////////////////////              
// Request Poll
////////////////////////////////////////////////////////////
PUSH Poll_Dialer
{
	IF (Is_Initialized = TRUE)
		doPoll();
}

////////////////////////////////////////////////////////////              
// Hook State Control
////////////////////////////////////////////////////////////
PUSH On_Hook
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "set", "hookState", 0, 0, "ONHOOK");
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH Off_Hook
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "set", "hookState", 0, 0, "OFFHOOK");
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH Toggle_Hook
{
	IF (Is_Initialized = TRUE)
    {
		IF (Is_On_Hook)
			outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "set", "hookState", 0, 0, "OFFHOOK");		
		ELSE
			outgoingMsg = buildProtocolMsg_WithStringValue(ControlStatus_InstanceTag, "set", "hookState", 0, 0, "ONHOOK");
	
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);	
	}
}
             
////////////////////////////////////////////////////////////              
// Call Control
////////////////////////////////////////////////////////////
PUSH Answer
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "answer", "1", 1, 0);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);	
	}
}

PUSH Flash
{
	IF (Is_Initialized = TRUE)
  	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "flash", "1", 1, 0);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH Redial
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "redial", "1", 1, 0);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH End
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg(Dialer_InstanceTag, "end", "1", 1, 0);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}
           
////////////////////////////////////////////////////////////              
// AutoAnswer Control
////////////////////////////////////////////////////////////
PUSH AutoAnswer_On
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg_WithStateValue(ControlStatus_InstanceTag, "set", "autoAnswer", 0, 0, TRUE);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH AutoAnswer_Off
{
	IF (Is_Initialized = TRUE)
    {
		outgoingMsg = buildProtocolMsg_WithStateValue(ControlStatus_InstanceTag, "set", "autoAnswer", 0, 0, FALSE);
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH AutoAnswer_Toggle
{
	IF (Is_Initialized = TRUE)
	{
		outgoingMsg = buildProtocolMsg_WithStateValue(ControlStatus_InstanceTag, "set", "autoAnswer", 0, 0, !AutoAnswer_Is_On);		
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}
                  
////////////////////////////////////////////////////////////              
// Caller ID Request
////////////////////////////////////////////////////////////
PUSH Get_CallerID_Basic
{
	IF (Is_Initialized = TRUE)
    {
		outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "cid", 0, 0);		
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

PUSH Get_CallerID_Full
{
	IF (Is_Initialized = TRUE)
    {
		outgoingMsg = buildProtocolMsg(ControlStatus_InstanceTag, "get", "cidUser", 0, 0);		
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}
                 
////////////////////////////////////////////////////////////              
// DialPad Control
////////////////////////////////////////////////////////////
PUSH Keypad_0
{
	dialPadKeyPress("0");
}

PUSH Keypad_1
{
	dialPadKeyPress("1");
}

PUSH Keypad_2
{
	dialPadKeyPress("2");
}

PUSH Keypad_3
{
	dialPadKeyPress("3");
}

PUSH Keypad_4
{
	dialPadKeyPress("4");
}

PUSH Keypad_5
{
	dialPadKeyPress("5");
}

PUSH Keypad_6
{
	dialPadKeyPress("6");
}

PUSH Keypad_7
{
	dialPadKeyPress("7");
}

PUSH Keypad_8
{
	dialPadKeyPress("8");
}

PUSH Keypad_9
{
	dialPadKeyPress("9");
}

PUSH Keypad_Star
{
	dialPadKeyPress("*");
}

PUSH Keypad_Pound
{
	dialPadKeyPress("#");
}

PUSH Keypad_Clear
{
	dialPadClear();
}
             
PUSH Keypad_BackSpace
{
	dialPadText = LEFT(dialPadText, LEN(dialPadText) - 1);

	Keypad$ = dialPadText;
}

PUSH Keypad_Dial
{
	IF (Is_Initialized = TRUE)
    {
		outgoingMsg = buildProtocolMsg_WithStringValue(Dialer_InstanceTag, "dial", "1", 1, 0, dialPadText);		
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

////////////////////////////////////////////////////////////              
// SpeedDial List Control
////////////////////////////////////////////////////////////
PUSH Directory_Top_Page
{
	IF (IS_TOP = FALSE)
		Page_SpeedDialList(1);
}

PUSH Directory_Next_Page
{
	IF (IS_BOTTOM = FALSE)
		Page_SpeedDialList(nCurrentPage+1);
}

PUSH Directory_Previous_Page
{
	IF (IS_TOP = FALSE)
		Page_SpeedDialList(nCurrentPage-1);
}

PUSH Directory_Bottom_Page
{
	IF (IS_BOTTOM = FALSE)
		Page_SpeedDialList(nQtyOfPages);
}

PUSH Select_Directory_Item_01
{
	Select_SpeedDialEntry(1);
}

PUSH Select_Directory_Item_02
{
	Select_SpeedDialEntry(2);
}

PUSH Select_Directory_Item_03
{
	Select_SpeedDialEntry(3);
}

PUSH Select_Directory_Item_04
{
	Select_SpeedDialEntry(4);
}

PUSH Select_Directory_Item_05
{
	Select_SpeedDialEntry(5);
}

PUSH Select_Directory_Item_06
{
	Select_SpeedDialEntry(6);
}

PUSH Select_Directory_Item_07
{
	Select_SpeedDialEntry(7);
}

PUSH Select_Directory_Item_08
{
	Select_SpeedDialEntry(8);
}

PUSH Select_Directory_Item_09
{
	Select_SpeedDialEntry(9);
}

PUSH Select_Directory_Item_10
{
	Select_SpeedDialEntry(10);
}

PUSH Select_Directory_Item_11
{
	Select_SpeedDialEntry(11);
}

PUSH Select_Directory_Item_12
{
	Select_SpeedDialEntry(12);
}

PUSH Select_Directory_Item_13
{
	Select_SpeedDialEntry(13);
}

PUSH Select_Directory_Item_14
{
	Select_SpeedDialEntry(14);
}

PUSH Select_Directory_Item_15
{
	Select_SpeedDialEntry(15);
}

PUSH Select_Directory_Item_16
{
	Select_SpeedDialEntry(16);
}

PUSH Dial_Selected_Directory_Item
{
	IF (Is_Initialized = TRUE)
	{
		IF (nSelectedIndex > 0 && nSelectedIndex <= MAX_SPEEDDIAL_ENTRIES)
		{
			outgoingMsg = buildProtocolMsg_WithIntegerValue(Dialer_InstanceTag, "speedDial", "1", 1, 0, nSelectedIndex);		
			MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
		}
	}
}

////////////////////////////////////////////////////////////              
// SpeedDial Entry Control
////////////////////////////////////////////////////////////
PUSH Save_Directory_Entry
{
	STRING label[50];
	STRING num[50];
                                                             
	IF (Is_Initialized = TRUE)
	{
		IF (Select_Directory_Save_Location > 0 && Select_Directory_Save_Location <= MAX_SPEEDDIAL_ENTRIES)
		{
			MakeString(label,"\x22%s\x22", Directory_Save_Name$);
			outgoingMsg = buildProtocolMsg_WithStringValue(Dialer_InstanceTag, "set", "speedDialLabel", 1, Select_Directory_Save_Location, label);		
			MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	
			MakeString(num,"\x22%s\x22", Directory_Save_Num$);
			outgoingMsg = buildProtocolMsg_WithStringValue(Dialer_InstanceTag, "set", "speedDialNum", 1, Select_Directory_Save_Location, num);		
			MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
		}
	}
}

////////////////////////////////////////////////////////////              
// Processor Message Processing...
////////////////////////////////////////////////////////////

// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessProcessorMsg()
{
    IF (LEN(parsedModuleMsg) > 0)
    {
        IF (contains("REGISTER", parsedModuleMsg))
        {
            myID = ATOI(getBoundString(parsedModuleMsg,"<",">"));
            
            IF (myID > 0)
                MakeString(To_Processor$,"REGISTER<%d>", myID);
        }
        ELSE IF (contains("INIT", parsedModuleMsg))
        {
            Is_Initialized = FALSE;
            getInitialized();
        }
        ELSE IF (contains("RESPONSE_MSG", parsedModuleMsg))
        {
            responseRequestMsg = getBoundString(parsedModuleMsg,"<","|");
            responseMsg = getBoundString(parsedModuleMsg,"|",">");

            MakeString(To_Processor$,"RESPONSE_OK<%d|%s>", myID, responseRequestMsg);

            IF (contains("get", responseRequestMsg))
            {
                IF (contains("displayNameLabel", responseRequestMsg))
                {
                    IF (Is_Initialized = FALSE)
                    {
                        Is_Initialized = TRUE;
                        MakeString(To_Processor$,"INIT_DONE<%d>", myID);
                    }
                }
                ELSE IF (contains("hookState", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE("+OK ",responseMsg);

                        Is_On_Hook = contains("2", responseMsg);
                        Is_Off_Hook = contains("1", responseMsg);
                    }
                }						
                ELSE IF (contains("autoAnswer", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        AutoAnswer_Is_On = contains("true", responseMsg);
                        AutoAnswer_Is_Off = contains("false", responseMsg);
                    }
                }
                ELSE IF (contains("cidUser", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE("\x22value\x22:",responseMsg);

                        statusTokenCount = stringTokenizer(statusTokens, responseMsg, "\x5c\x22");
                                                 
                        SWITCH (statusTokenCount)
                        {                                          
                            CASE (5):
                            {
                                CallerID_Num$ = statusTokens[3];
                                CallerID_Name$ = statusTokens[4];
                            }
                            CASE (4):
                            {
                                CallerID_Num$ = statusTokens[3];
                                CallerID_Name$ = "";
                            }
                            DEFAULT:
                            {
                                CallerID_Num$ = "";
                                CallerID_Name$ = "";
                            }
                        }
                    }
                }
                ELSE IF (contains("cid", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE("\x22value\x22:",responseMsg);

                        statusTokenCount = stringTokenizer(statusTokens, responseMsg, "\x5c\x22");
                                                                         
                        IF (statusTokenCount = 4)
                        {
                            CallerID_Num$ = statusTokens[3];
                            CallerID_Name$ = "";
                        }
                        ELSE
                        {
                            CallerID_Num$ = "";
                            CallerID_Name$ = "";
                        }
                    }
                }
                ELSE IF (contains("ringing", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        Has_Incoming_Call = contains("true", responseMsg);
                    }
                }
                ELSE IF (contains("dialing", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        Is_Dialing = contains("true", responseMsg);
                    }
                }
                ELSE IF (contains("lastNum", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE("+OK ",responseMsg);
                        parseString = getBoundString(responseMsg,"\x22","\x22");
                        Last_Number_Dialed$ = parseString;
                    }
                }
                ELSE IF (contains("speedDialLabel", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE(buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialLabel", 1, 0), responseRequestMsg);

                        parseInt = ATOI(responseRequestMsg);
                        
                        IF (parseInt > 0 && parseInt <= MAX_SPEEDDIAL_ENTRIES)
                        {
                            trash = REMOVE("+OK ",responseMsg);
                            parseString = getBoundString(responseMsg,"\x22","\x22");
                            speedDialList[parseInt].label = parseString;
        
                            IF (parseInt = MAX_SPEEDDIAL_ENTRIES)
                                Update_SpeedDialList(MAX_SPEEDDIAL_ENTRIES);
                        } 
                    }
                }
                ELSE IF (contains("speedDialNum", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE(buildProtocolMsg(Dialer_InstanceTag, "get", "speedDialNum", 1, 0), responseRequestMsg);

                        parseInt = ATOI(responseRequestMsg);
                        
                        IF (parseInt > 0 && parseInt <= MAX_SPEEDDIAL_ENTRIES)
                        {
                            trash = REMOVE("+OK ",responseMsg);
                            parseString = getBoundString(responseMsg,"\x22","\x22");
                            speedDialList[parseInt].number = parseString;
                        } 
                    }
                }
            }
            ELSE IF (contains("set", responseRequestMsg))
            {
                IF (contains("autoAnswer", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {	
                        AutoAnswer_Is_On = contains("true", responseRequestMsg);
                        AutoAnswer_Is_Off = contains("false", responseRequestMsg);
                    }
                }
                ELSE IF (contains("speedDialLabel", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE(buildProtocolMsg(Dialer_InstanceTag, "set", "speedDialLabel", 1, 0), responseRequestMsg);

                        parseInt = ATOI(responseRequestMsg);
                        
                        IF (parseInt > 0 && parseInt <= MAX_SPEEDDIAL_ENTRIES)
                        {
                            parseString = getBoundString(responseRequestMsg,"\x22","\x22");
                            speedDialList[parseInt].label = parseString;
                            Update_SpeedDialList(MAX_SPEEDDIAL_ENTRIES);
                        } 
                    }
                }
                ELSE IF (contains("speedDialNum", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE(buildProtocolMsg(Dialer_InstanceTag, "set", "speedDialNum", 1, 0), responseRequestMsg);

                        parseInt = ATOI(responseRequestMsg);
                        
                        IF (parseInt > 0 && parseInt <= MAX_SPEEDDIAL_ENTRIES)
                        {
                            parseString = getBoundString(responseRequestMsg,"\x22","\x22");
                            speedDialList[parseInt].number = parseString;
                        } 
                    }
                }
            }
            ELSE IF (contains("subscribe", responseRequestMsg))
            {
            }					
        }
        ELSE IF (startsWith("SUBSCRIBED_MSG", parsedModuleMsg))
        {
            responseMsg = getBoundString(parsedModuleMsg,"<",">");

            IF (contains("hookState", responseMsg))
            {
                trash = REMOVE("]\x22 ",responseMsg);

                Is_On_Hook = contains("2", responseMsg);
                Is_Off_Hook = contains("1", responseMsg);
                     
                // clear dialPadText on hangup.
                IF (Is_On_Hook)
                {
                    dialPadClear();						
                }			
            }
            ELSE IF (contains("ringing", responseMsg))
            {
                Has_Incoming_Call = contains("true", responseMsg);
            }
            ELSE IF (contains("dialing", responseMsg))
            {
                Is_Dialing = contains("true", responseMsg);
            }
            ELSE IF (contains("lastNum", responseMsg))
            {
                trash = REMOVE("]\x22 ",responseMsg);
                parseString = getBoundString(responseMsg,"\x22","\x22");
                Last_Number_Dialed$ = parseString;
            }
        }
    }
}

#if_series3
THREADSAFE CHANGE From_Processor$
{
    WHILE (TRUE)
    {
        try
        {
			parsedModuleMsg = GATHER(">", From_Processor$);

		    IF (contains(parsedModuleMsg, From_Processor$))
		        clearBuffer(From_Processor$);

            ProcessProcessorMsg();        
        }
        catch
        {
            print("Issue with Processor message handeling\n");
        }
    }
}
#else
CHANGE From_Processor$
{
	IF (parsingModuleBusy = FALSE)
	{
		parsingModuleBusy = TRUE;
                       
		WHILE (TRUE)
		{           
			parsedModuleMsg = GATHER(">", From_Processor$);

		    IF (contains(parsedModuleMsg, From_Processor$))
		        clearBuffer(From_Processor$);

            ProcessProcessorMsg();
		}

		parsingModuleBusy = FALSE;
	}
}
#endif


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	parsingModuleBusy = FALSE;

	Is_Initialized = FALSE;

	nCurrentPageSize = SpeedDialList_PageSize;

	nSelectedIndex = 0;
    Selected_Directory_Item_Name$ = "";
	Selected_Directory_Item_Num$ = "";

	IS_TOP = FALSE;
	IS_BOTTOM = FALSE;

	FOR (x = 1 TO MAX_SPEEDDIAL_ENTRIES)
	{
		MakeString(speedDialList[x].label,"");
		MakeString(speedDialList[x].number,"");
		MakeString(speedDialList[x].defaultLabel,"SpeedDial Entry %d", x);
	}

    //WaitForInitializationComplete();
}

