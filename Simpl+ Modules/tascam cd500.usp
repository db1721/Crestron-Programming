/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "TASCAM CD-500"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "46" "CD Player" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT play,stop,pause,track_fwd,track_back,eject,enter_track,clear_track,poll; 
ANALOG_INPUT TRACK_ana_NUMBER;
 BUFFER_INPUT device_rx$[500]; 

 DIGITAL_OUTPUT play_fb,stop_fb,pause_fb,disc_present_fb;
// ANALOG_OUTPUT 
 STRING_OUTPUT Current_track_number,track_mins,track_secs,track_frames,track_manual_enter,device_tx$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER cur_track,cur_min,cur_sec,cur_frame;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
 STRING track_number_a[3],cur_track_a[3],cur_min_a[3],cur_sec_a[3],cur_frame_a[3];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
integer disc_present;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function track_time_parse()
{
 makestring (device_TX$,"\x0A057\x0D");


}
Function disc_parse()
{
 makestring (device_TX$,"\x0A056\x0D");


}



/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

push play
 {

 if(!play_fb)
	{
 	makestring (device_TX$,"\x0A012\x0D"); play_fb = 1;stop_fb=0; pause_fb=0;
	}


}
push stop { makestring (device_TX$,"\x0A010\x0D");makestring (device_TX$,"\x0A010\x0D");play_fb = 0;stop_fb=1; pause_fb=0;}
push pause
{
    if (pause_fb)
		{
	 		makestring (device_TX$,"\x0A01400\x0D"); play_fb = 1;stop_fb=0; pause_fb=0;

		}

	else
		{
	 		makestring (device_TX$,"\x0A01401\x0D");play_fb = 0;stop_fb=0; pause_fb=1;
		}
}
push eject {makestring (device_TX$,"\x0A010\x0D");makestring (device_TX$,"\x0A010\x0D"); makestring (device_TX$,"\x0A018\x0D");play_fb = 0;stop_fb=0; pause_fb=0;}
push track_back
	 {
		If(!stop_fb)
			{	
				makestring (device_TX$,"\x0A01A01\x0D");
			}

	 } 
push track_fwd
	 { 
		If(!stop_fb)
			{	
				makestring (device_TX$,"\x0A01A00\x0D");
			}

	 } 
push Poll
			{
				track_time_parse();
				disc_parse();
			}
CHANGE TRACK_ana_NUMBER
{
  track_manual_enter = ITOA(track_ana_number);
  track_number_a = ITOA(track_ana_number);

}

push enter_track 
{
	if(TRACK_ana_NUMBER <10)
		{
			makestring (device_TX$,"\x0A0230%s00\x0D",track_number_a);
		}
	else
		{
			makestring (device_TX$,"\x0A023%s00\x0D",track_number_a);
		}

}
push clear_track {track_manual_enter ="";track_number_a = "";}

change device_rx$
{

integer track_start,min_start,sec_start,frame_start;


if(find("\x0A0D7",device_rx$))//track time parse 
	{
     track_start = find("0D7",device_rx$)+3;
	 //current track info
	 current_track_number = mid(device_rx$,track_start,2);
	 cur_track_a=mid(device_rx$,track_start,2);
	 cur_track= atoi(cur_track_a);
	 //current track mins
	 track_mins = mid(device_rx$,track_start+4,2);
	 cur_min_a=mid(device_rx$,track_start+4,2);
	 cur_min= atoi(cur_min_a);
	 // current track secs
	 track_secs = mid(device_rx$,track_start+8,2);
	 cur_sec_a=mid(device_rx$,track_start+8,2);
	 cur_sec= atoi(cur_sec_a);
     // current track frames 
	 track_frames = mid(device_rx$,track_start+10,2);
	 cur_frame_a=mid(device_rx$,track_start+10,2);
	 cur_frame= atoi(cur_frame_a);
	}
else if(find("\x0A0D600FF\x0D",device_rx$))//cd not present
	{
       disc_present =0;
	   disc_present_fb = 0;	
	}
else if(find("\x0A0D60100\x0D",device_rx$))//cd present
	{
       disc_present =1;
	   disc_present_fb = 1;	
	}
	
device_rx$ = ""; 

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
disc_parse();
}


