/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
CSP: TP Programming and Design
443-929-6566
peery.troy@tppgandd.com
www.tppgandd.com		
System Number:
Programmer: Troy Peery
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "Extron DMP64 Output Volume Control"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "46" "TPPGANDD COPYRIGHTED MODULES" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT _skip_,_skip_,_skip_,Volume_Up,Volume_Down,Volume_Mute_Toggle,Volume_Mute_On,Volume_Mute_Off,Default_Level; 
// ANALOG_INPUT 
 STRING_INPUT Device_RX$[500];
// BUFFER_INPUT 

 DIGITAL_OUTPUT _skip_,_skip_,_skip_,Volume_Muted,Volume_Unmuted; 
 ANALOG_OUTPUT Volume_Bargraph,Volume_Mute_Ana;
 STRING_OUTPUT Device_TX$;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
STRING_PARAMETER Volume_Channel[50];


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
INTEGER Current_Volume_Level,volume,Vol_Level_Lower,Vol_Level_Upper;

integer Volume_Mute;

// SIGNED_LONG_INTEGER

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function Volume_Scaling()
{
 		volume_bargraph = (current_volume_level* 130);

    IF (CURRENT_VOLUME_LEVEL = 1592)
	{ volume_bargraph = 0;}
}



/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Volume_UP
{
	IF(Current_volume_level < 2012)
	{
		Current_volume_level = Current_volume_level + 10;
		makestring(Device_TX$,"WG*%s*%iAU\n",volume_channel,Current_volume_level);
		Volume_Scaling();
	}

}
PUSH Volume_Down
{
	IF(Current_volume_level > 1598)
	{
		Current_volume_level = Current_volume_level - 10;
		makestring(Device_TX$,"WG*%s*%iAU\n",volume_channel,Current_volume_level);
		Volume_Scaling();
	}
}

push Default_Level
{
  Current_volume_level = 1802;
  makestring(Device_TX$,"WG*%s*%iAU\n",volume_channel,Current_volume_level);
		Volume_Scaling();
}
PUSH Volume_Mute_Toggle
{
	IF(!Volume_Mute)
	{
		volume_mute = 1;
  		makestring(Device_TX$,"WM*%s*1AU\n",volume_channel);
		Volume_Muted = 1;
		Volume_Unmuted =0;
		volume_mute_ana = volume_mute;
	}

	Else IF(Volume_Mute)
	{
		volume_mute = 0;
		volume_mute_ana = volume_mute;
  		makestring(Device_TX$,"WM*%s*0AU\n",volume_channel);
		Volume_Muted = 0;
		Volume_Unmuted =1;

	}

}
PUSH Volume_Mute_on
{
		volume_mute = 1;
  		makestring(Device_TX$,"WM%s*1AU\n",volume_channel);
		Volume_Muted = 1;
		Volume_Unmuted =0;
		volume_mute_ana = volume_mute;
}

PUSH Volume_Mute_off
{
		volume_mute = 0;
  		makestring(Device_TX$,"WM%s*0AU\r",volume_channel);
		Volume_Muted = 0;
		Volume_Unmuted =1;
		volume_mute_ana = volume_mute;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
   Function Main()
{
  Current_volume_level = 1898;
  makestring(Device_TX$,"WG%s*%iAU\r",volume_channel,Current_volume_level);
  Volume_Bargraph = CURRENT_VOLUME_LEVEL ;
  Volume_Scaling();
}


