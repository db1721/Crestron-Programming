/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
//#SYMBOL_NAME "Processor Ethernet Info v1"
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#DEFINE_CONSTANT cMODE_IDLE   		 0
#DEFINE_CONSTANT cMODE_OS     		 1
#DEFINE_CONSTANT cMODE_ETHER  		 2
#DEFINE_CONSTANT cMODE_PROG   		 3
#DEFINE_CONSTANT cMODE_NVRAMDISK   4


// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
							En_Create_NVRamDisk,
              Get_OS_Info,
              Get_Program_Info,
              Get_Ether_Info,
              Check_NVRamDisk; 
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT Console_RX$[5000]; 

DIGITAL_OUTPUT Link_Status,
							 NVRamDisk_Present; 

ANALOG_OUTPUT Module_Status; 

STRING_OUTPUT Console_TX$,
              OS_Version$,
              Program_File$,
              Link_Speed$,
              Full_Duplex$,
              MAC_Address$,
              IP_Address$,
              Host_Name$,
              NVRamDisk_Status$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK;
INTEGER g_iDataMode, g_bNeedToCreateNVRamDisk;
STRING g_sTempData[1000];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ProcessData(string Data)
{
  string sLocalCopy[1000], sTrash[50];
  
  sLocalCopy = Data;
  
  if (Debug)
   print("Data:%s\n", sLocalCopy);
   
    
	if (g_iDataMode = cMODE_ETHER)
	{
	  if (Debug)
	   print ("Parsing Ethernet Data\n");
	     
	  if (find("Link Status:", sLocalCopy))
	  {
		  if (find("OK", sLocalCopy))
		   Link_Status = TRUE;
		  else
		   Link_Status = FALSE;
		}
		else if (find("Link Speed:", sLocalCopy))
		{
		}
		else if (find("Full Duplex:", sLocalCopy))
		{
		}
		else if (find("MAC Address(es):", sLocalCopy))
		{	    
		  MAC_Address$ = mid(sLocalCopy, 20, 17);
		}
		else if (find("IP Address:", sLocalCopy))
		{	
		  IP_Address$ = mid(sLocalCopy, 16, 15); 
		}
		else if (find("Host Name:", sLocalCopy))
		{	    
		  sTrash = remove("Host Name:  ", sLocalCopy);
		    
		  Host_Name$ = left(sLocalCopy, len(sLocalCopy) - 2); 
	  }
	}
	else if (g_iDataMode = cMODE_OS)
	{
	  if (Debug)
	   print ("Parsing OS Data\n");
      
    if (len(sLocalCopy) > 2) 
	   OS_Version$ = left(sLocalCopy, len(sLocalCopy) - 2);
	}
	else if (g_iDataMode = cMODE_PROG)
	{
	  if (Debug)
	   print ("Parsing Program Data\n");
	     
	  if (find("Program File:", sLocalCopy))
	  {
	    sTrash = remove("Program File: ", sLocalCopy);
	      
	    Program_File$ = left(sLocalCopy, len(sLocalCopy) - 2);
	  }
	}
	else if (g_iDatamode = cMODE_NVRAMDISK)
	{
		if (Debug)
		 print ("Parsing NVRamDisk Data\n");
		
		print ("NVRamData:%s\n", sLocalCopy);
		
		if (find("NOT initialized", sLocalCopy))
		{
			
			if (En_Create_NVRamDisk)
			{
				//need to create it, so do not set status yet
				g_bNeedToCreateNVRamDisk = TRUE;
			}
			else
			{
				//not creating it, so set the status
				NVRamDisk_Present = FALSE;
				NVRamDisk_Status$ = "Not Initialized";
			}
		}
		else if (find("64K", sLocalCopy) || find("128K", sLocalCopy))
		{
			NVRamDisk_Present = TRUE;
			NVRamDisk_Status$ = "Initialized";		
		}
	}
	else
	{
		if (find("NVRAM filesystem successfully initialized", sLocalCopy))
		{
			NVRamDisk_Present = TRUE;
			NVRamDisk_Status$ = "Initialized"; 
		}		
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Get_OS_Info
{
  g_iDataMode = cMODE_OS;
  Module_Status = cMODE_OS;
  
  Console_TX$ = "ver\r";
}

PUSH Get_Program_Info
{
  g_iDataMode = cMODE_PROG;
  Module_Status = cMODE_PROG;
  
  Console_TX$ = "progcom\r";
}

PUSH Get_Ether_Info
{
  g_iDataMode = cMODE_ETHER;
  Module_Status = cMODE_ETHER;
  
  Console_TX$ = "est\r";
}

PUSH Check_NVRamDisk
{
	g_iDataMode = cMODE_NVRAMDISK;
	Module_Status = cMODE_NVRAMDISK;
	
	Console_TX$ = "vnvramdisk\r";
}

CHANGE Console_RX$
{  
  if (g_bRXOK)
  {
    g_bRXOK = FALSE;
        
    while (find("\n", Console_RX$) || find(">", Console_RX$))
    {
      if (find("\n", Console_RX$))
      {
        g_sTempData = remove ("\n", Console_RX$);
        call ProcessData(g_sTempData);
      }
      else if (find(">", Console_RX$))
      {
        //remove the last data
        g_sTempData = remove(">", Console_RX$);
        
        //set status idle        
        Module_Status = cMODE_IDLE;
        g_iDataMode = cMODE_IDLE;
        
        //create NVRamDisk?
        if (g_bNeedToCreateNVRamDisk)
        {
        	//need to create NVRamDisk
        	
        	g_bNeedToCreateNVRamDisk = FALSE;
        	
        	Console_TX$ = "vnvramdisk 128k\r";
        	
        	g_iDataMode = cMODE_NVRAMDISK;
					Module_Status = cMODE_NVRAMDISK;
        }
      }
    }
    
    g_bRXOK = TRUE;
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
  g_bRXOK = TRUE;
  
  Module_Status = cMODE_IDLE;
  g_iDataMode = cMODE_IDLE;
}


