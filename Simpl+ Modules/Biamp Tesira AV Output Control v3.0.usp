/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira AV Output Control v3.0
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira AV Output Control v3.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// SKIP FOR PARAMETER
DIGITAL_INPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT _SKIP_, _SKIP_;

// Base
DIGITAL_INPUT Poll_AVOutput;
DIGITAL_OUTPUT Is_Initialized;

// OutputMedia
STRING_OUTPUT OutputMedia_Resolution_Fb$;
STRING_OUTPUT OutputMedia_FrameRate_Fb$;
ANALOG_OUTPUT OutputMedia_Transition_Fb;
STRING_OUTPUT OutputMedia_Transition_Fb$;
ANALOG_OUTPUT OutputMedia_OSDMessages_Fb;
STRING_OUTPUT OutputMedia_OSDMessages_Fb$;
ANALOG_OUTPUT OutputMedia_ConnectedPort_Fb;
STRING_OUTPUT OutputMedia_ConnectedPort_Fb$;
ANALOG_OUTPUT OutputMedia_OutputFormatOption_Fb;
STRING_OUTPUT OutputMedia_OutputFormatOption_Fb$;

ANALOG_INPUT OutputMedia_TestPattern; 
ANALOG_OUTPUT OutputMedia_TestPattern_Fb;
STRING_OUTPUT OutputMedia_TestPattern_Fb$;

// Embedded Audio
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_L;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_R;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_LFE;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_C;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_Lr;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_Rr;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_Ls;
DIGITAL_OUTPUT EmbeddedAudio_Is_Present_Rs;
STRING_OUTPUT EmbeddedAudio_Threshold_Fb$;

// Incoming Stream
DIGITAL_INPUT Stream_AudioMute_On, Stream_AudioMute_Off, Stream_AudioMute_Toggle;
DIGITAL_OUTPUT Stream_AudioMute_Is_On, Stream_AudioMute_Is_Off;

DIGITAL_INPUT Stream_VideoMute_On, Stream_VideoMute_Off, Stream_VideoMute_Toggle;
DIGITAL_OUTPUT Stream_VideoMute_Is_On, Stream_VideoMute_Is_Off;

DIGITAL_INPUT Stream_VideoFreeze_On, Stream_VideoFreeze_Off, Stream_VideoFreeze_Toggle;
DIGITAL_OUTPUT Stream_VideoFreeze_Is_On, Stream_VideoFreeze_Is_Off;
                                   
STRING_OUTPUT Stream_Resolution_Fb$;
STRING_OUTPUT Stream_FrameRate_Fb$;
STRING_OUTPUT Stream_Bandwidth_Fb$;
STRING_OUTPUT Stream_Connection_Fb$;
                                                               
DIGITAL_INPUT Enable;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER InstanceTag[50];
INTEGER_PARAMETER CommandProcessorID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES InstanceTag
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES CommandProcessorID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
StateComponent audioMute;
StateComponent videoMute;
StateComponent videoFreeze;
AVOutputComponent avOutput;

INTEGER audioMuteInit;
INTEGER videoMuteInit;
INTEGER videoFreezeInit;
INTEGER avOutputInit;
INTEGER IsReady;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnAudioMuteInitializeChange(StateComponent sender, UInt16EventArgs args)
{
	audioMuteInit = args.Payload;

	Is_Initialized = (audioMuteInit && videoMuteInit && videoFreezeInit && avOutputInit);
}

EVENTHANDLER OnAudioMuteStateChange(StateComponent sender, UInt16EventArgs args)
{
	Stream_AudioMute_Is_On = args.Payload;
	Stream_AudioMute_Is_Off = !args.Payload;
}

EVENTHANDLER OnVideoMuteInitializeChange(StateComponent sender, UInt16EventArgs args)
{
	videoMuteInit = args.Payload;

	Is_Initialized = (audioMuteInit && videoMuteInit && videoFreezeInit && avOutputInit);
}

EVENTHANDLER OnVideoMuteStateChange(StateComponent sender, UInt16EventArgs args)
{
	Stream_VideoMute_Is_On = args.Payload;
	Stream_VideoMute_Is_Off = !args.Payload;
}

EVENTHANDLER OnVideoFreezeInitializeChange(StateComponent sender, UInt16EventArgs args)
{
	videoFreezeInit = args.Payload;

	Is_Initialized = (audioMuteInit && videoMuteInit && videoFreezeInit && avOutputInit);
}

EVENTHANDLER OnVideoFreezeStateChange(StateComponent sender, UInt16EventArgs args)
{
	Stream_VideoFreeze_Is_On = args.Payload;
	Stream_VideoFreeze_Is_Off = !args.Payload;
}

EVENTHANDLER OnAvOutputInitializeChange(AVOutputComponent sender, UInt16EventArgs args)
{
	avOutputInit = args.Payload;

	Is_Initialized = (audioMuteInit && videoMuteInit && videoFreezeInit && avOutputInit);
}


EVENTHANDLER OnAvOutputStateChange(AVOutputComponent sender, AVOutputStateEventArgs args)
{
	AVOutputState status;

	status = args.Payload;

	// OutputMedia
	OutputMedia_Resolution_Fb$ = status.OutputMediaResolution;
	OutputMedia_FrameRate_Fb$ = status.OutputMediaFramerateText;	
	OutputMedia_Transition_Fb = status.OutputMediaTransition;
	OutputMedia_Transition_Fb$ = status.OutputMediaTransitionText;
	OutputMedia_OSDMessages_Fb = status.OutputMediaOSDMessages;
	OutputMedia_OSDMessages_Fb$ = status.OutputMediaOSDMessagesText;
	OutputMedia_ConnectedPort_Fb = status.OutputMediaConnectedPort;
	OutputMedia_ConnectedPort_Fb$ = status.OutputMediaConnectedPortText;
	OutputMedia_OutputFormatOption_Fb = status.OutputMediaOutputFormatOptions;
	OutputMedia_OutputFormatOption_Fb$ = status.OutputMediaOutputFormatOptionsText;
	OutputMedia_TestPattern_Fb = status.OutputMediaTestPattern;
	OutputMedia_TestPattern_Fb$ = status.OutputMediaTestPatternText;

	// Embedded Audio
	EmbeddedAudio_Is_Present_L = status.EmbeddedAudioPresense_L;
	EmbeddedAudio_Is_Present_R = status.EmbeddedAudioPresense_R;
	EmbeddedAudio_Is_Present_LFE = status.EmbeddedAudioPresense_LFE;
	EmbeddedAudio_Is_Present_C = status.EmbeddedAudioPresense_C;
	EmbeddedAudio_Is_Present_Lr = status.EmbeddedAudioPresense_Lr;
	EmbeddedAudio_Is_Present_Rr = status.EmbeddedAudioPresense_Rr;
	EmbeddedAudio_Is_Present_Ls = status.EmbeddedAudioPresense_Ls;
	EmbeddedAudio_Is_Present_Rs = status.EmbeddedAudioPresense_Rs;
	EmbeddedAudio_Threshold_Fb$ = status.EmbeddedAudioThresholdText;

	// Stream
	MakeString(Stream_Resolution_Fb$,"%s",status.StreamResolution);
	MakeString(Stream_FrameRate_Fb$,"%dHz",status.StreamFrameRate);
	Stream_Bandwidth_Fb$ = status.StreamBandwidthText;
	Stream_Connection_Fb$ = status.StreamConnectionText;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
///////////////////////////////////////
// OutputMedia AVOutput
///////////////////////////////////////
THREADSAFE CHANGE OutputMedia_TestPattern
{
	avOutput.SetOutputMediaTestPattern(OutputMedia_TestPattern);
}

///////////////////////////////////////
// Stream AudioMute
///////////////////////////////////////
THREADSAFE PUSH Stream_AudioMute_On
{
	audioMute.SetState(TRUE);
}

THREADSAFE PUSH Stream_AudioMute_Off
{
	audioMute.SetState(FALSE);
}

THREADSAFE PUSH Stream_AudioMute_Toggle
{
	audioMute.ToggleState();
}


///////////////////////////////////////
// Stream VideoMute
///////////////////////////////////////
THREADSAFE PUSH Stream_VideoMute_On
{
	videoMute.SetState(TRUE);
}

THREADSAFE PUSH Stream_VideoMute_Off
{
	videoMute.SetState(FALSE);
}

THREADSAFE PUSH Stream_VideoMute_Toggle
{
	videoMute.ToggleState();
}

///////////////////////////////////////
// Stream VideoFreeze
///////////////////////////////////////
THREADSAFE PUSH Stream_VideoFreeze_On
{
	videoFreeze.SetState(TRUE);
}

THREADSAFE PUSH Stream_VideoFreeze_Off
{
	videoFreeze.SetState(FALSE);
}

THREADSAFE PUSH Stream_VideoFreeze_Toggle
{
	videoFreeze.ToggleState();
}
    
///////////////////////////////////////
// Poll_AVInput
///////////////////////////////////////                                     
THREADSAFE PUSH Poll_AVOutput
{
	videoFreeze.PollState();
	videoMute.PollState();
	audioMute.PollState();
	avOutput.Poll();
}

///////////////////////////////////////
// Enable
/////////////////////////////////////// 
THREADSAFE PUSH Enable
{
	IF (IsReady)
	{
	    audioMute.Configure(CommandProcessorID, InstanceTag, "embeddedAudioMute", 1, 0);
	    videoMute.Configure(CommandProcessorID, InstanceTag, "videoMute", 1, 0);
	    videoFreeze.Configure(CommandProcessorID, InstanceTag, "videoFreeze", 1, 0);
		avOutput.Configure(CommandProcessorID, InstanceTag);
	}
}
THREADSAFE RELEASE Enable
{
	IF (IsReady)
	{
	    audioMute.UnRegister();
	    videoMute.UnRegister();
	    videoFreeze.UnRegister();
		avOutput.UnRegister();
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	IsReady = FALSE;

	audioMuteInit = 0;
	videoMuteInit = 0;
	videoFreezeInit = 0;
	avOutputInit = 0;
	
    WaitForInitializationComplete();
	REGISTEREVENT(audioMute, OnInitializeChange, OnAudioMuteInitializeChange); 
	REGISTEREVENT(audioMute, OnStateChange, OnAudioMuteStateChange); 
	REGISTEREVENT(videoMute, OnInitializeChange, OnVideoMuteInitializeChange); 
	REGISTEREVENT(videoMute, OnStateChange, OnVideoMuteStateChange); 
	REGISTEREVENT(videoFreeze, OnInitializeChange, OnVideoFreezeInitializeChange); 
	REGISTEREVENT(videoFreeze, OnStateChange, OnVideoFreezeStateChange); 
	REGISTEREVENT(avOutput, OnInitializeChange, OnAvOutputInitializeChange);
	REGISTEREVENT(avOutput, OnStateChange, OnAvOutputStateChange);
                                       
	IF (Enable)
	{
	    audioMute.Configure(CommandProcessorID, InstanceTag, "embeddedAudioMute", 1, 0);
	    videoMute.Configure(CommandProcessorID, InstanceTag, "videoMute", 1, 0);
	    videoFreeze.Configure(CommandProcessorID, InstanceTag, "videoFreeze", 1, 0);
		avOutput.Configure(CommandProcessorID, InstanceTag);
	}

	IsReady = TRUE;
}

