/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:Biamp Tesira Passthru Control v3.0
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150

#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Passthru Control v3.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_; 
BUFFER_INPUT Poll_Msg_In$[1024], Command_Msg_In$[1024];
   
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT Is_Initialized; 
STRING_OUTPUT Subscribed$, Response$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Command_Processor_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES                                                                            
/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
PassThruComponent component;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializeChange(PassThruComponent sender, UInt16EventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnResponseChange(PassThruComponent sender, StringEventArgs args)
{
	Response$ = args.Payload;
}

EVENTHANDLER OnSubscribedResponseChange(PassThruComponent sender, StringEventArgs args)
{
	Subscribed$ = args.Payload;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
THREADSAFE CHANGE Poll_Msg_In$
{
	STRING msg[100];

	WHILE (TRUE)
	{
		try
		{
			msg = Gather("\x0a", Poll_Msg_In$);
			component.PollMsg(msg);

		}
		catch 
		{
		}
	}
}


THREADSAFE CHANGE Command_Msg_In$
{
	STRING msg[100];

	WHILE (TRUE)
	{
		try
		{
			msg = Gather("\x0a", Command_Msg_In$);
			component.CommandMsg(msg);

		}
		catch 
		{
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();

	REGISTEREVENT(component, OnInitializeChange, OnInitializeChange);  
	REGISTEREVENT(component, OnResponseChange, OnResponseChange);  
	REGISTEREVENT(component, OnSubscribedResponseChange, OnSubscribedResponseChange);  

	component.Configure(Command_Processor_ID);
}
