//Compiler Directives
#CATEGORY "46" "Crestron Certified Drivers" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_INHERIT_FROM_PROGRAM
#OUTPUT_SHIFT 2

#DEFINE_CONSTANT RADDEVICETYPE 1 

#HELP_BEGIN
	This module is to be used exclusively with the SamsungIPDisplay v1.1.umc user module and cannot be used with any other program.
#HELP_END
 
#CRESTRON_SIMPLSHARP_LIBRARY "RADSystemManager" 
#USER_SIMPLSHARP_LIBRARY "FlatPanelDisplay_Samsung_UN55LS03N_IP"


DIGITAL_INPUT _SKIP_, _SKIP_, Initialize;
STRING_INPUT  IpAddress[200]; 
STRING_INPUT  MacAddress[50];
ANALOG_INPUT  Port;
DIGITAL_OUTPUT DriverLoaded;
ANALOG_OUTPUT CurrentPort;

// IBasicInformation
ANALOG_INPUT   Id;

// IPower
DIGITAL_OUTPUT Power_F;
DIGITAL_INPUT  PowerOn;
DIGITAL_INPUT  PowerOff;
DIGITAL_INPUT  PowerToggle;
ANALOG_INPUT   WarmUpTime;
ANALOG_INPUT   CoolDownTime;
DIGITAL_OUTPUT WarmingUp;
DIGITAL_OUTPUT CoolingDown;
ANALOG_OUTPUT  WarmUpTime_F;
ANALOG_OUTPUT  CoolDownTime_F;

// IInputs
ANALOG_INPUT   SetInput;

//INavigation
DIGITAL_INPUT  UpArrow;
DIGITAL_INPUT  DownArrow;
DIGITAL_INPUT  LeftArrow;
DIGITAL_INPUT  RightArrow;  
DIGITAL_INPUT  Select;
DIGITAL_INPUT  Exit;
DIGITAL_INPUT  Home;
DIGITAL_INPUT  Menu;

//IMediaSources
DIGITAL_INPUT YouTube;
DIGITAL_INPUT Netflix;
DIGITAL_INPUT Hulu;
DIGITAL_INPUT AmazonVideo;

//IMediaTransports
DIGITAL_INPUT  ForwardScan;
DIGITAL_INPUT  ReverseScan;
DIGITAL_INPUT  Play;
DIGITAL_INPUT  Pause;
DIGITAL_INPUT  Stop;
DIGITAL_INPUT  ReturnCommand;


// IVolume
ANALOG_OUTPUT  Volume_F;
DIGITAL_OUTPUT Mute_F;
DIGITAL_INPUT  MuteOn;
DIGITAL_INPUT  MuteOff;
DIGITAL_INPUT  MuteToggle;
ANALOG_INPUT   SetVolume;

DIGITAL_INPUT  VolumeUp;
DIGITAL_INPUT  VolumeDown;

//Art Mode

DIGITAL_INPUT	ArtModeOn;
DIGITAL_INPUT	ArtModeOff;
                         
                       
// Unique ID for use with the Crestron RAD System Module
STRING_PARAMETER UniqueID[200];
STRING_PARAMETER Transport[50];   

#BEGIN_PARAMETER_PROPERTIES Transport
	PropDefaultValue = "Ethernet";
#END_PARAMETER_PROPERTIES

//STRING_OUTPUT DisplayInputDescription[25];
//STRING_OUTPUT DisplayInputConnector[25];
//ANALOG_OUTPUT DisplayInputType[25]; 
  
string _driverFilename[200];
integer _initilizationComplete;
                
// S# References
SimplDisplay simplSharpComponent;
SMWrapper systemModule;
    

// IPower
PUSH PowerToggle
{                                                                                       
	simplSharpComponent.SimplPowerToggle();
}
PUSH PowerOn
{
	simplSharpComponent.SimplPowerOn();
}
PUSH PowerOff
{
	simplSharpComponent.SimplPowerOff();
}
RELEASE PowerToggle
{
	simplSharpComponent.SimplRelease();
}
RELEASE PowerOn
{
	simplSharpComponent.SimplRelease();
}
RELEASE PowerOff
{
	simplSharpComponent.SimplRelease();
}  
CHANGE WarmUpTime
{
	simplSharpComponent.SimplWarmUpTime(WarmUpTime);
}

CHANGE CoolDownTime
{
	simplSharpComponent.SimplCoolDownTime(CoolDownTime);
}

// IInputs
CHANGE SetInput
{
	simplSharpComponent.SimplSetInputSource(SetInput);
}
 
// IVolume
PUSH VolumeUp
{
	simplSharpComponent.VolUpHold();
}
PUSH VolumeDown
{
	simplSharpComponent.VolDownHold();
}
PUSH MuteToggle
{
	simplSharpComponent.SimplMute();
}
PUSH MuteOn
{
	simplSharpComponent.SimplMuteOn();
}
PUSH MuteOff
{
	simplSharpComponent.SimplMuteOff();
} 
RELEASE VolumeUp
{
	simplSharpComponent.VolUpRelease();
}

RELEASE VolumeDown
{
	simplSharpComponent.VolDownRelease();
}
RELEASE MuteToggle
{
	simplSharpComponent.SimplRelease();
}
RELEASE MuteOn
{
	simplSharpComponent.SimplRelease();
}
RELEASE MuteOff
{
	simplSharpComponent.SimplRelease();
}
CHANGE SetVolume
{	
	simplSharpComponent.SimplSetVolume(SetVolume);
}

  
//Navigation 

PUSH  UpArrow
{
	simplSharpComponent.SimplArrowKey("Up");
}

PUSH  DownArrow
{
	simplSharpComponent.SimplArrowKey("Down");
}

PUSH  LeftArrow
{
	simplSharpComponent.SimplArrowKey("Left");
}

PUSH  RightArrow 
{
	simplSharpComponent.SimplArrowKey("Right");
}
 
PUSH  Select
{
	simplSharpComponent.SimplSelect();
}
PUSH  Exit
{
	simplSharpComponent.SimplExit();
}

PUSH  Home
{
	simplSharpComponent.SimplHome();
}

PUSH  Menu
{
	simplSharpComponent.SimplMenu();
}

RELEASE  UpArrow
RELEASE  DownArrow
RELEASE  LeftArrow
RELEASE  RightArrow 
{
	simplSharpComponent.SimplReleaseArrow();
} 

RELEASE  Select
RELEASE  Exit
RELEASE  Home
RELEASE  Menu
{
	simplSharpComponent.SimplRelease();
}

//IMediaSources

PUSH YouTube
{
	simplSharpComponent.SimplYouTube();
}
PUSH Netflix
{
	simplSharpComponent.SimplNetflix();
}

PUSH Hulu
{
	simplSharpComponent.SimplHulu();
}
PUSH AmazonVideo
{
	simplSharpComponent.SimplAmazonVideo();
}
RELEASE YouTube
RELEASE Netflix
RELEASE Hulu
RELEASE AmazonVideo
{
	simplSharpComponent.SimplRelease();
}


//IMediaTransports

PUSH  ForwardScan
{
	simplSharpComponent.SimplForwardScan();
}

PUSH  ReverseScan
{
	simplSharpComponent.SimplReverseScan();
}

PUSH  Play
{
	simplSharpComponent.SimplPlay();
}

PUSH  Pause
{
	simplSharpComponent.SimplPause();
}

PUSH  Stop
{
	simplSharpComponent.SimplStop();
}
PUSH  ReturnCommand
{
	simplSharpComponent.SimplReturn();
}
RELEASE  ForwardScan
RELEASE  ReverseScan
RELEASE  Play
RELEASE  Pause
RELEASE  Stop
RELEASE  ReturnCommand
{
	simplSharpComponent.SimplRelease();	
}

PUSH ArtModeOn
{
	string Custom_Command[20];
	Custom_Command = "artModeOn";

	simplSharpComponent.SimplSendCustomCommandByName(Custom_Command);
}

PUSH ArtModeOff
{
	string Custom_Command[20];
	Custom_Command = "artModeOff";

	simplSharpComponent.SimplSendCustomCommandByName(Custom_Command);
}


// IBasicInformation2  

CHANGE MacAddress
{ 
	Print("The MacAddress is : %s", MacAddress);  
	simplSharpComponent.SimplSetStringUserAttribute(1, MacAddress);
}

THREADSAFE PUSH Initialize
{
	string lpathToDriver[200];
	string lipAddress[50];
	integer lport;

	lpathToDriver	= "";
    lipAddress 		= "";
	lport 			= 0;
                     
    while (_initilizationComplete = 0)
	{
		delay(10);
	}  
	
	systemModule.Initialize(UniqueID, _driverFilename, RADDEVICETYPE, IpAddress, port, Transport);
	lpathToDriver 	= simplSharpComponent.ApplicationDirectory + "\\" + _driverFilename;    
	  
	Print("The current path to the driver is: %s", lpathToDriver);
	if(Transport = "Ethernet")
	{
	 	lipAddress 		= systemModule.DeviceHostname;
		lport 			= systemModule.DevicePort;
	} 
	else
	{
	    lipAddress		= IpAddress;    
	    lport = Port;
	}
		
    simplSharpComponent.Initialize(lpathToDriver, Id, lipAddress, lport, 1, 1);	 
	  
}

// Common Callbacks       
CALLBACK FUNCTION BasicInformationCallback
   (string sdkVersionS, string manufacturerS, string baseModelS, string supportedModelsS, string supportedSeriesS, string descriptionS,
	string driverVersionS, string driverVersionDateS, string guidS, integer supportsFeedbackS)
{
	/*integer index;

	SDKVersion 			= sdkVersionS;
	Manufacturer 		= manufacturerS;
    BaseModel 			= baseModelS;
    SupportedModels 	= supportedModelsS;
	SupportedSeries 	= supportedSeriesS;
	Description 		= descriptionS;
	DriverVersion 		= driverVersionS;
	DriverVersionDate 	= driverVersionDateS;
	Guid 				= guidS;
	SupportsFeedback 	= supportsFeedbackS;
          
    for(index = 1 to 10)
	{
     	UserAttribute_IsAvailable[index] 			= simplSharpComponent.UserAttributeIsAvailable[index - 1];
		UserAttribute_Label[index] 					= simplSharpComponent.UserAttributeLabels[index - 1];
		UserAttribute_Description[index] 			= simplSharpComponent.UserAttributeDescriptions[index - 1];
		UserAttribute_Type[index] 					= simplSharpComponent.UserAttributeTypes[index - 1];
		UserAttribute_DataType[index] 				= simplSharpComponent.UserAttributeDataTypes[index - 1];
		UserAttribute_IsPersistent[index] 			= simplSharpComponent.UserAttributeIsPersistent[index - 1];
		UserAttribute_RequiredForConnection[index] 	= simplSharpComponent.UserAttributeRequiredForConnection[index - 1];
	}     */
}

CALLBACK FUNCTION TxCallback(string messageS)
{
	//Tx = messageS;
}

CALLBACK FUNCTION PacketTxCallback(string messageS)
{ 
	//PacketTx = messageS;
}
CALLBACK FUNCTION LogOutCallback(string messageS)
{
	//Log = messageS;
}

CALLBACK FUNCTION RxOutUpdateCallback(string messageS)
{
	//RxOut = messageS;
}
CALLBACK FUNCTION BasicConnectionSupportsCallback(integer supportsDisconnectS, integer supportsReconnectS)
{
	/*SupportsDisconnect = supportsDisconnectS;
	SupportsReconnect  = supportsReconnectS;   */
}   


CALLBACK FUNCTION CustomIrCommandSupportsCallback()
{
 	/*integer i;

	for (i=1 to 10)
	{
     	CommandExists[i] = simplSharpComponent.SimplCustomCommandExists(CommandName[i]);
	}       */
}


CALLBACK FUNCTION ManifestUpdatedCallback(string filePathS, string ipAddressS, integer portS)
{
	if (Transport <> "Ethernet")
	{
		portS 			= Port;
	}

	simplSharpComponent.Initialize(filePathS, Id, ipAddressS, portS, WarmUpTime, CoolDownTime);
}   

CALLBACK FUNCTION DriverLoadedCB(integer driverLoadedS, integer currentPortS, integer rebootRequiredS)
{
 	DriverLoaded	= driverLoadedS;
	CurrentPort		= currentPortS;
	//RebootRequired  = rebootRequiredS;
}

CALLBACK FUNCTION DriverAuthSupportsCallback(integer supportsUserNm, integer supportsPasswrd, integer supportsIsRequired)
{
	/*SupportsUserName 			= supportsUserNm;
	SupportsPassword 			= supportsPasswrd;
	AuthenticationIsRequired 	= supportsIsRequired; */
}      

CALLBACK FUNCTION DriverAuthUpdateCallback(integer authStatus)
{
	//AuthenticationStatus = authStatus;
}

// DeviceType-specific Callbacks
CALLBACK FUNCTION DisplayStatusCallback(integer powerS, integer warmingUpS, integer coolingDownS, integer inputTypeS, string inputConnectorS, string inputDescriptionS, integer volumeS, integer muteS, integer connectionStatusS, integer videoMuteS)
{
	Power_F      			= powerS;
	WarmingUp    			= warmingUpS;
	CoolingDown  			= coolingDownS;
	Volume_F     			= volumeS;
	Mute_F       			= muteS;
	//Connection_F			= connectionStatusS;
	//VideoMute_F				= videoMuteS;

	//ActiveInputType 	   	= inputTypeS;
	//ActiveInputConnector  	= inputConnectorS;
	//ActiveInputDescription 	= inputDescriptionS;
}
CALLBACK FUNCTION PowerSupportsCallback(integer supportsDiscretePowerS, integer supportsTogglePowerS, integer supportsPowerFeedbackS, integer supportsWarmUpTimeS, integer supportsCoolDownTimeS, integer warmUpTimeI, integer coolDownTimeI)
{
	/*SupportsDiscretePower = supportsDiscretePowerS;
	SupportsTogglePower   = supportsTogglePowerS;
	SupportsPower_F		  = supportsPowerFeedbackS;
	SupportsWarmUpTime	  = supportsWarmUpTimeS;
	SupportsCoolDownTime  = supportsCoolDownTimeS;
	CoolDownTime_F 	      = coolDownTimeI;
	WarmUpTime_F		  = warmUpTimeI;*/
}

CALLBACK FUNCTION BasicInputsSupportsCallback(integer setInputS, integer supportsInputFeedbackS)
{
	/*SupportsSetInput = setInputS;
	SupportsInput_F  = supportsInputFeedbackS;       */
}

CALLBACK FUNCTION VolumeSupportsCallback(integer supportsVolumeFeedbackS, integer supportsMuteFeedbackS, integer supportsDiscreteMuteS, integer supportsMuteS, integer supportsSetVolumeS, integer supportsChangeVolumeS)
{
	/*SupportsVolume_F     = supportsVolumeFeedbackS;
	SupportsMute_F		 = supportsMuteFeedbackS;
	SupportsDiscreteMute = supportsDiscreteMuteS;
	SupportsMute		 = supportsMuteS;
	SupportsSetVolume	 = supportsSetVolumeS;
	SupportsChangeVolume = supportsChangeVolumeS; */
}

CALLBACK FUNCTION InputDetailsCallback()
{
 	/*integer count;
	integer i;
	count = simplSharpComponent.NumberOfInputs;
	for(i=1 to count)
	{
		DisplayInputDescription[i] 	= simplSharpComponent.SimplInputDescriptions[i-1];
		DisplayInputConnector[i] 	= simplSharpComponent.SimplInputConnectors[i-1];
		DisplayInputType[i] 		= simplSharpComponent.SimplInputTypes[i-1];
	}

	NumberOfInputs = count;   */
}

CALLBACK FUNCTION VideoDisplaySupportsCallback(integer lampHoursS, integer discreteVideoMuteS, integer toggleVideoMuteS, integer videoMuteFeedbackS)
{
	/*SupportsLampHours 			= lampHoursS;
	SupportsToggleVideoMute 	= toggleVideoMuteS;
	SupportsDiscreteVideoMute 	= discreteVideoMuteS;
    SupportsVideoMute_F 		= videoMuteFeedbackS;  */
}

CALLBACK FUNCTION LampHoursCallback()
{
	/*integer i;

	for (i = 1 to 4)
	{
     	LampHours[i] = simplSharpComponent.SimplLampHours[i - 1];
	}   */
}

CALLBACK FUNCTION NavigationSupportsCallback(integer arrowKeysS, integer clearS, integer exitS, integer homeS, integer menuS, integer selectS, integer searchS)
{
	/*SupportsArrowKeys		= arrowKeysS;
	SupportsClear			= clearS;
	SupportsExit			= exitS;
	SupportsHome			= homeS;
	SupportsMenu			= menuS; 
	SupportsSelect			= selectS;
	SupportsSearch          = searchS;

	SupportsArrowUp			= simplSharpComponent.SimplArrowDirectionsSupported[0];
	SupportsArrowDown		= simplSharpComponent.SimplArrowDirectionsSupported[1];
	SupportsArrowLeft		= simplSharpComponent.SimplArrowDirectionsSupported[2];
	SupportsArrowRight		= simplSharpComponent.SimplArrowDirectionsSupported[3];   */
}

CALLBACK FUNCTION MediaSupportsCallback(integer youTubeS, integer youTubeTvS, integer netflixS, integer huluS, integer direcTvNowS, integer amazonVideoS, integer playstationVueS, integer slingTvS)
{
	/*SupportsYouTube			= youTubeS;
	SupportsYouTubeTv		= youTubeTvS;		
	SupportsNetflix			= netflixS;
	SupportsHulu			= huluS;
	SupportsDirectvNow		= direcTvNowS;
	SupportsAmazonVideo		= amazonVideoS;
	SupportsPlaystationVue	= playstationVueS;
	SupportsSlingTv			= slingTvS;  */
}

CALLBACK FUNCTION MediaTransportsCallback(integer forwardScanS, integer reverseScanS, integer playS, integer pauseS, integer stopS, integer forwardSkipS, integer reverseSkipS, integer repeatS, integer returnS, integer backS, integer playPauseS, integer optionsS, integer infoS)
{
	/*SupportsForwardScan					= forwardScanS;
	SupportsReverseScan					= reverseScanS;
	SupportsPlay						= playS;
	SupportsPause						= pauseS;
	SupportsStop						= stopS;
	SupportsForwardSkip					= forwardSkipS;
	SupportsReverseSkip					= reverseSkipS;
	SupportsRepeat						= repeatS;
	SupportsReturn						= returnS;
	SupportsBack						= backS;
	SupportsPlayPause 					= playPauseS;
	SupportsOptions						= optionsS;
	SupportsInfo						= infoS;   */
}
                                                                    
FUNCTION RegisterDelegates()
{
	// Common callbacks
	RegisterDelegate(simplSharpComponent, BasicInformationUpdated, BasicInformationCallback);   
	RegisterDelegate(simplSharpComponent, TxUpdated, TxCallback);
	RegisterDelegate(simplSharpComponent, PacketTxUpdated, PacketTxCallback);
	RegisterDelegate(simplSharpComponent, LogOut, LogOutCallback);
    RegisterDelegate(simplSharpComponent, RxOut, RxOutUpdateCallback);
	RegisterDelegate(simplSharpComponent, BasicConnectionSupportsUpdated, BasicConnectionSupportsCallback);
	RegisterDelegate(simplSharpComponent, CustomIrCommandSupportsUpdatead, CustomIrCommandSupportsCallback);
	RegisterDelegate(simplSharpComponent, DriverLoadedCallback, DriverLoadedCB);
	RegisterDelegate(simplSharpComponent, DriverAuthenticationSupportsCallback, DriverAuthSupportsCallback);   
	RegisterDelegate(simplSharpComponent, DriverAuthenticationUpdateCallback, DriverAuthUpdateCallback);
	RegisterDelegate(systemModule, ManifestUpdated, ManifestUpdatedCallback);
     
	// DeviceType-specific callbacks
	RegisterDelegate(simplSharpComponent, DisplayStatusUpdated, DisplayStatusCallback);
	RegisterDelegate(simplSharpComponent, PowerSupportsUpdated, PowerSupportsCallback);
	RegisterDelegate(simplSharpComponent, InputsSupportsUpdated, BasicInputsSupportsCallback);
	RegisterDelegate(simplSharpComponent, VolumeSupportsUpdated, VolumeSupportsCallback);
	RegisterDelegate(simplSharpComponent, InputDetailsUpdated,  InputDetailsCallback);
	RegisterDelegate(simplSharpComponent, VideoDisplaySupportsUpdated, VideoDisplaySupportsCallback);
	RegisterDelegate(simplSharpComponent, LampHoursUpdated, LampHoursCallback);
	RegisterDelegate(simplSharpComponent, NavigationSupportsUpdated, NavigationSupportsCallback);
	RegisterDelegate(simplSharpComponent, MediaSupportsUpdated, MediaSupportsCallback);
	RegisterDelegate(simplSharpComponent, MediaTransportsUpdated, MediaTransportsCallback);
}

FUNCTION Main()
{      
	_initilizationComplete = 0;  
	_driverFilename = "FlatPanelDisplay_Samsung_UN55LS03N_IP.dll";                   

    WaitForInitializationComplete();

	RegisterDelegates();
	_initilizationComplete = 1;
}









