/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC/GC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "WolfVision Eye-12 TCP-IP Queue v1.0" 
// #HINT ""
#DEFINE_CONSTANT	ciQUEUESIZE		30
#DEFINE_CONSTANT	ciMAXCHARS		30
#CATEGORY "0"
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE

#HELP_BEGIN
	For use inside the WolfVision Eye-12 TCP-IP v1.0 module only.
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	Connected, Send_Next, Receiving;
BUFFER_INPUT	From_Module[500];

DIGITAL_OUTPUT	Connect, Send_Next_Out;
STRING_OUTPUT		To_Device;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iNextSend, iNextStore, iFlag1, iOkTosend;
STRING	sQueue[ciQUEUESIZE][ciMAXCHARS], sTemp[ciMAXCHARS];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*Function fTimeOut()
{
	wait(300, wTimeOut)
	{
		Send_Next_Out = 1;
	}
}*/
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Send_Next
{
	Send_Next_Out = 0;
}

RELEASE Send_Next
{
	if((len(sQueue[iNextSend]) > 0) && (Connected = 1))
	{
		To_Device = sQueue[iNextSend];
		iOkToSend = 0;
		sQueue[iNextSend] = "";
		iNextSend = iNextSend + 1;
		if(iNextSend > ciQUEUESIZE)
		{
			iNextSend = 1;
		}
	}
	else if((len(sQueue[iNextSend]) > 0) && (Connected = 0))
	{
		Connect = 1;
	}
	else if(len(sQueue[iNextSend]) = 0)
	{
		//Connect = 0;
		iOkToSend = 1;
	}
	else
	{
		iOkToSend = 1;
	}
}

PUSH Connected
{
	Send_Next_Out = 1;
}
/*
PUSH Receiving
{
	cancelwait(wTimeOut);
}
*/
RELEASE Receiving
{
	Send_Next_Out = 1;
}

THREADSAFE CHANGE From_Module
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(find("\r", From_Module) > 0)
		{
			sTemp = remove("\r", From_Module);
			sQueue[iNextStore] = left(sTemp, len(sTemp) - len("\r"));
			iNextStore = iNextStore + 1;
			if(iNextStore > ciQUEUESIZE)
			{
				iNextStore = 1;
			}
			if((iOkToSend = 1) && (Connected = 1))
			{
				Send_Next_Out = 1;
			}
			else if(Connected = 0)
			{
				Connect = 1;
			}
		}
		iFlag1 = 0;
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	iFlag1 = 0;
	iOkToSend = 1;
	setarray(sQueue, "");
}
