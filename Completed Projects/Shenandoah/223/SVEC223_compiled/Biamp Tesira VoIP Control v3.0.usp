/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/

/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira VoIP Control v3.0
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_SPEEDDIAL_ENTRIES 16
#DEFINE_CONSTANT MAX_CALL_APPEARANCES 6
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira VoIP Control v3.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_; 

// Module Control / Status    
DIGITAL_INPUT Poll_Dialer;                                                     
DIGITAL_OUTPUT Is_Initialized;  
     
// Call Control
ANALOG_INPUT Call_Select;
DIGITAL_INPUT Conference, Answer, Flash, Redial, Send, End, Resume, Hold, On_Hook, Off_Hook, Transfer;
DIGITAL_INPUT Answer_Call_1, Answer_Call_2, Answer_Call_3, Answer_Call_4, Answer_Call_5, Answer_Call_6;
DIGITAL_INPUT Hangup_Call_1, Hangup_Call_2, Hangup_Call_3, Hangup_Call_4, Hangup_Call_5, Hangup_Call_6;
DIGITAL_INPUT Hangup_All;

ANALOG_OUTPUT Selected_Call;
ANALOG_OUTPUT Call_1_LED, Call_2_LED, Call_3_LED, Call_4_LED, Call_5_LED, Call_6_LED;
ANALOG_OUTPUT Call_1_State, Call_2_State, Call_3_State, Call_4_State, Call_5_State, Call_6_State;
STRING_OUTPUT Call_1_State$, Call_2_State$, Call_3_State$, Call_4_State$, Call_5_State$, Call_6_State$;
STRING_OUTPUT Call_1_Prompt$, Call_2_Prompt$, Call_3_Prompt$, Call_4_Prompt$, Call_5_Prompt$, Call_6_Prompt$;

STRING_OUTPUT Call_1_CID_Name$, Call_1_CID_Num$, Call_2_CID_Name$, Call_2_CID_Num$, Call_3_CID_Name$, Call_3_CID_Num$;
STRING_OUTPUT Call_4_CID_Name$, Call_4_CID_Num$, Call_5_CID_Name$, Call_5_CID_Num$, Call_6_CID_Name$, Call_6_CID_Num$;

DIGITAL_INPUT Keypad_0, Keypad_1, Keypad_2, Keypad_3, Keypad_4, Keypad_5, Keypad_6, Keypad_7, Keypad_8, Keypad_9, Keypad_Star, Keypad_Pound, Keypad_Clear, Keypad_BackSpace, Keypad_Dial;
STRING_OUTPUT Keypad$, Last_Number_Dialed$;

// Auto - Answer
DIGITAL_INPUT AutoAnswer_On, AutoAnswer_Off, AutoAnswer_Toggle;
DIGITAL_OUTPUT AutoAnswer_Is_On, AutoAnswer_Is_Off;
                 
// Directory Control
DIGITAL_INPUT Select_Directory_Item_01, Select_Directory_Item_02, Select_Directory_Item_03, Select_Directory_Item_04; 
DIGITAL_INPUT Select_Directory_Item_05, Select_Directory_Item_06, Select_Directory_Item_07, Select_Directory_Item_08; 
DIGITAL_INPUT Select_Directory_Item_09, Select_Directory_Item_10, Select_Directory_Item_11, Select_Directory_Item_12; 
DIGITAL_INPUT Select_Directory_Item_13, Select_Directory_Item_14, Select_Directory_Item_15, Select_Directory_Item_16; 
DIGITAL_INPUT Dial_Selected_Directory_Item; 
DIGITAL_INPUT Save_Directory_Entry;                              
ANALOG_INPUT Select_Directory_Save_Location;
STRING_INPUT Directory_Save_Name$[50], Directory_Save_Num$[50];
                                                                          
ANALOG_OUTPUT Selected_Directory_Item;
STRING_OUTPUT Directory_Name_01$, Directory_Name_02$, Directory_Name_03$, Directory_Name_04$;
STRING_OUTPUT Directory_Name_05$, Directory_Name_06$, Directory_Name_07$, Directory_Name_08$;
STRING_OUTPUT Directory_Name_09$, Directory_Name_10$, Directory_Name_11$, Directory_Name_12$;
STRING_OUTPUT Directory_Name_13$, Directory_Name_14$, Directory_Name_15$, Directory_Name_16$;
STRING_OUTPUT Directory_Number_01$, Directory_Number_02$, Directory_Number_03$, Directory_Number_04$;
STRING_OUTPUT Directory_Number_05$, Directory_Number_06$, Directory_Number_07$, Directory_Number_08$;
STRING_OUTPUT Directory_Number_09$, Directory_Number_10$, Directory_Number_11$, Directory_Number_12$;
STRING_OUTPUT Directory_Number_13$, Directory_Number_14$, Directory_Number_15$, Directory_Number_16$;
STRING_OUTPUT Selected_Directory_Item_Name$, Selected_Directory_Item_Num$;

// DND
DIGITAL_INPUT DND_Enabled, DND_Disabled, DND_Toggle;
DIGITAL_INPUT DND_Response_DND, DND_Response_Busy, DND_Response_Decline;
DIGITAL_OUTPUT DND_Is_Enabled, DND_Response_Is_DND, DND_Response_Is_Busy, DND_Response_Is_Decline;
                                
DIGITAL_INPUT AlphaNumeric_Entry_Dial;
STRING_INPUT AlphaNumeric_Entry$[100];

DIGITAL_INPUT Enable;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

STRING_PARAMETER Dialer_Instance_Tag[50], Control_Status_Instance_Tag[50];
INTEGER_PARAMETER Line_Number;
INTEGER_PARAMETER Command_Processor_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES Dialer_Instance_Tag, Control_Status_Instance_Tag
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Line_Number
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d, 2d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d, 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

VoipDialerComponent component;
VoipDialerStatus status;
VoipCallStatus myCallStatus;
INTEGER IsReady;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
   
////////////////////////////////////////////////////////////
// SIMPLSHARP Callback Methods
///////////////////////////////////////////////////////////
EVENTHANDLER OnInitializeChange(VoipDialerComponent Sender, UInt16EventArgs args)
{
	Is_Initialized = args.Payload;
}
             
EVENTHANDLER OnStateChange(VoipDialerComponent Sender, VoipDialerStatusEventArgs args)
{
	status = args.Payload;

	Last_Number_Dialed$ = status.LastNumber;

	AutoAnswer_Is_On = status.IsAutoAnswerOn() = TRUE;
	AutoAnswer_Is_Off = status.IsAutoAnswerOn() = FALSE;
                                                             
	DND_Is_Enabled = status.IsDNDEnabled();
	DND_Response_Is_DND = status.IsDNDResponseModeDND();
	DND_Response_Is_Busy = status.IsDNDResponseModeBusy();
	DND_Response_Is_Decline = status.IsDNDResponseModeDecline();
}

EVENTHANDLER OnKeypadTextChange(VoipDialerComponent Sender, StringEventArgs args)
{
	Keypad$ = args.Payload;
}

EVENTHANDLER OnSpeedDialSeletion(VoipDialerComponent Sender, SpeedDialItemEventArgs args)
{
	Selected_Directory_Item = args.Payload.ID;
	Selected_Directory_Item_Name$ = args.Payload.Label;
	Selected_Directory_Item_Num$ = args.Payload.Number;
}                                                           

EVENTHANDLER OnSpeedDialItemChange(VoipDialerComponent Sender, SpeedDialItemEventArgs args)
{
	SpeedDialItem Item;

	Item = args.Payload;

	IF (Item.ID = 1)
	{
		Directory_Name_01$ = Item.Label;
		Directory_Number_01$ = Item.Number;
	}

	IF (Item.ID = 2)
	{
		Directory_Name_02$ = Item.Label;
		Directory_Number_02$ = Item.Number;
	}

	IF (Item.ID = 3)
	{
		Directory_Name_03$ = Item.Label;
		Directory_Number_03$ = Item.Number;
	}

	IF (Item.ID = 4)
	{
		Directory_Name_04$ = Item.Label;
		Directory_Number_04$ = Item.Number;
	}

	IF (Item.ID = 5)
	{
		Directory_Name_05$ = Item.Label;
		Directory_Number_05$ = Item.Number;
	}

	IF (Item.ID = 6)
	{
		Directory_Name_06$ = Item.Label;
		Directory_Number_06$ = Item.Number;
	}

	IF (Item.ID = 7)
	{
		Directory_Name_07$ = Item.Label;
		Directory_Number_07$ = Item.Number;
	}

	IF (Item.ID = 8)
	{
		Directory_Name_08$ = Item.Label;
		Directory_Number_08$ = Item.Number;
	}

	IF (Item.ID = 9)
	{
		Directory_Name_09$ = Item.Label;
		Directory_Number_09$ = Item.Number;
	}

	IF (Item.ID = 10)
	{
		Directory_Name_10$ = Item.Label;
		Directory_Number_10$ = Item.Number;
	}

	IF (Item.ID = 11)
	{
		Directory_Name_11$ = Item.Label;
		Directory_Number_11$ = Item.Number;
	}

	IF (Item.ID = 12)
	{
		Directory_Name_12$ = Item.Label;
		Directory_Number_12$ = Item.Number;
	}

	IF (Item.ID = 13)
	{
		Directory_Name_13$ = Item.Label;
		Directory_Number_13$ = Item.Number;
	}

	IF (Item.ID = 14)
	{
		Directory_Name_14$ = Item.Label;
		Directory_Number_14$ = Item.Number;
	}

	IF (Item.ID = 15)
	{
		Directory_Name_15$ = Item.Label;
		Directory_Number_15$ = Item.Number;
	}

	IF (Item.ID = 16)
	{
		Directory_Name_16$ = Item.Label;
		Directory_Number_16$ = Item.Number;
	}
}

EVENTHANDLER OnCallChange(VoipDialerComponent Sender, UInt16EventArgs args)
{
	Selected_Call = args.Payload;
}    

EVENTHANDLER OnCallStatusListChange(VoipDialerComponent Sender, VoipCallStatusesEventArgs args)
{
	VoipCallStatuses StatusList;
	VoipCallStatus status;

	StatusList = args.Payload;
	
	if (StatusList.Count > 0)
	{
		StatusList.Get(1, status);
		
		Call_1_LED = status.LedStatus;
		Call_1_State = status.State.Number;
		Call_1_State$ = status.State.Name;
		Call_1_Prompt$ = status.Prompt.Name;

		Call_1_CID_Name$ = status.CidName;
		Call_1_CID_Num$ = status.CidNumber;
    }

	if (StatusList.Count > 1)
	{
		StatusList.Get(2, status);

		Call_2_LED = status.LedStatus;
		Call_2_State = status.State.Number;
		Call_2_State$ = status.State.Name;
		Call_2_Prompt$ = status.Prompt.Name;

		Call_2_CID_Name$ = status.CidName;
		Call_2_CID_Num$ = status.CidNumber;
    }

	if (StatusList.Count > 2)
	{
		StatusList.Get(3, status);
	
		Call_3_LED = status.LedStatus;
		Call_3_State = status.State.Number;
		Call_3_State$ = status.State.Name;
		Call_3_Prompt$ = status.Prompt.Name;

		Call_3_CID_Name$ = status.CidName;
		Call_3_CID_Num$ = status.CidNumber;
    }

	if (StatusList.Count > 3)
	{
		StatusList.Get(4, status);

		Call_4_LED = status.LedStatus;	
		Call_4_State = status.State.Number;
		Call_4_State$ = status.State.Name;
		Call_4_Prompt$ = status.Prompt.Name;

		Call_4_CID_Name$ = status.CidName;
		Call_4_CID_Num$ = status.CidNumber;
    }

	if (StatusList.Count > 4)
	{
		StatusList.Get(5, status);

		Call_5_LED = status.LedStatus;		
		Call_5_State = status.State.Number;
		Call_5_State$ = status.State.Name;
		Call_5_Prompt$ = status.Prompt.Name;

		Call_5_CID_Name$ = status.CidName;
		Call_5_CID_Num$ = status.CidNumber;
    }

	if (StatusList.Count > 5)
	{
		StatusList.Get(6, status);

		Call_6_LED = status.LedStatus;			
		Call_6_State = status.State.Number;
		Call_6_State$ = status.State.Name;
		Call_6_Prompt$ = status.Prompt.Name;

		Call_6_CID_Name$ = status.CidName;
		Call_6_CID_Num$ = status.CidNumber;
    }
}
    
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

////////////////////////////////////////////////////////////              
// Request Poll
////////////////////////////////////////////////////////////

THREADSAFE PUSH Poll_Dialer
{
	component.Poll();
}
            
////////////////////////////////////////////////////////////              
// Call Control
////////////////////////////////////////////////////////////

THREADSAFE PUSH Conference
{
	component.Conference();
}

THREADSAFE PUSH Answer
{
	component.Answer();
}

THREADSAFE PUSH Flash
{
	component.Flash();
}

THREADSAFE PUSH Redial
{
	component.Redial();
}

THREADSAFE PUSH Send
{
	component.Send();
}

THREADSAFE PUSH End
{
	component.End();
}

THREADSAFE PUSH Resume
{
	component.Resume();
}

THREADSAFE PUSH Hold
{
	component.Hold();
}

THREADSAFE PUSH On_Hook
{
	component.OnHook();
}

THREADSAFE PUSH Off_Hook
{
	component.OffHook();
}

THREADSAFE PUSH Transfer
{
	component.Transfer();
}

////////////////////////////////////////////////////////////              
// Answer / Hangup by Call
////////////////////////////////////////////////////////////
           
THREADSAFE PUSH Answer_Call_1
{
	component.Answer_Call(1);
}

THREADSAFE PUSH Answer_Call_2
{
	component.Answer_Call(2);
}

THREADSAFE PUSH Answer_Call_3
{
	component.Answer_Call(3);
}

THREADSAFE PUSH Answer_Call_4
{
	component.Answer_Call(4);
}

THREADSAFE PUSH Answer_Call_5
{
	component.Answer_Call(5);
}

THREADSAFE PUSH Answer_Call_6
{
	component.Answer_Call(6);
}

THREADSAFE PUSH Hangup_Call_1
{
	component.End_Call(1);
}

THREADSAFE PUSH Hangup_Call_2
{
	component.End_Call(2);
}

THREADSAFE PUSH Hangup_Call_3
{
	component.End_Call(3);
}

THREADSAFE PUSH Hangup_Call_4
{
	component.End_Call(4);
}

THREADSAFE PUSH Hangup_Call_5
{
	component.End_Call(5);
}

THREADSAFE PUSH Hangup_Call_6
{
	component.End_Call(6);
}

THREADSAFE PUSH Hangup_All
{
	component.End_All();
}

////////////////////////////////////////////////////////////              
// AutoAnswer Control
////////////////////////////////////////////////////////////

THREADSAFE PUSH AutoAnswer_On
{
	component.AutoAnswer(TRUE);
}

THREADSAFE PUSH AutoAnswer_Off
{
	component.AutoAnswer(FALSE);
}

THREADSAFE PUSH AutoAnswer_Toggle
{
	component.AutoAnswerToggle();
}

////////////////////////////////////////////////////////////              
// DND Control
////////////////////////////////////////////////////////////
THREADSAFE PUSH DND_Enabled
{
	component.DNDEnable(TRUE);
}

THREADSAFE PUSH DND_Disabled
{
	component.DNDEnable(FALSE);
}

THREADSAFE PUSH DND_Toggle
{
	component.DNDEnableToggle();
}

THREADSAFE PUSH DND_Response_DND
{
	component.DNDResponseDND();
}

THREADSAFE PUSH DND_Response_Busy
{
	component.DNDResponseBusy();
}

THREADSAFE PUSH DND_Response_Decline
{
	component.DNDResponseDecline();
}
                 
////////////////////////////////////////////////////////////              
// DialPad Control
////////////////////////////////////////////////////////////

THREADSAFE PUSH Keypad_0
{
	component.DialDigit("0");
}

THREADSAFE PUSH Keypad_1
{
	component.DialDigit("1");
}

THREADSAFE PUSH Keypad_2
{
	component.DialDigit("2");
}

THREADSAFE PUSH Keypad_3
{
	component.DialDigit("3");
}

THREADSAFE PUSH Keypad_4
{
	component.DialDigit("4");
}

THREADSAFE PUSH Keypad_5
{
	component.DialDigit("5");
}

THREADSAFE PUSH Keypad_6
{
	component.DialDigit("6");
}

THREADSAFE PUSH Keypad_7
{
	component.DialDigit("7");
}

THREADSAFE PUSH Keypad_8
{
	component.DialDigit("8");
}

THREADSAFE PUSH Keypad_9
{
	component.DialDigit("9");
}

THREADSAFE PUSH Keypad_Star
{
	component.DialDigit("*");
}

THREADSAFE PUSH Keypad_Pound
{
	component.DialDigit("#");
}

THREADSAFE PUSH Keypad_Clear
{
	component.ClearKeypadText();
}
             
THREADSAFE PUSH Keypad_BackSpace
{
	component.BackspaceKeypadText();
}

THREADSAFE PUSH Keypad_Dial
{
	component.DialKeypadText();
}

////////////////////////////////////////////////////////////              
// AlphaNumeric Dial Control
////////////////////////////////////////////////////////////
THREADSAFE PUSH AlphaNumeric_Entry_Dial
{
	component.Dial(AlphaNumeric_Entry$);
}

////////////////////////////////////////////////////////////              
// SpeedDial List Control
////////////////////////////////////////////////////////////
THREADSAFE PUSH Select_Directory_Item_01
{	
	component.SelectSpeedDialEntry(1);
}

THREADSAFE PUSH Select_Directory_Item_02
{	
	component.SelectSpeedDialEntry(2);
}

THREADSAFE PUSH Select_Directory_Item_03
{	
	component.SelectSpeedDialEntry(3);
}

THREADSAFE PUSH Select_Directory_Item_04
{	
	component.SelectSpeedDialEntry(4);
}

THREADSAFE PUSH Select_Directory_Item_05
{	
	component.SelectSpeedDialEntry(5);
}

THREADSAFE PUSH Select_Directory_Item_06
{	
	component.SelectSpeedDialEntry(6);
}

THREADSAFE PUSH Select_Directory_Item_07
{	
	component.SelectSpeedDialEntry(7);
}

THREADSAFE PUSH Select_Directory_Item_08
{	
	component.SelectSpeedDialEntry(8);
}

THREADSAFE PUSH Select_Directory_Item_09
{	
	component.SelectSpeedDialEntry(9);
}

THREADSAFE PUSH Select_Directory_Item_10
{	
	component.SelectSpeedDialEntry(10);
}

THREADSAFE PUSH Select_Directory_Item_11
{	
	component.SelectSpeedDialEntry(11);
}

THREADSAFE PUSH Select_Directory_Item_12
{	
	component.SelectSpeedDialEntry(12);
}

THREADSAFE PUSH Select_Directory_Item_13
{	
	component.SelectSpeedDialEntry(13);
}

THREADSAFE PUSH Select_Directory_Item_14
{	
	component.SelectSpeedDialEntry(14);
}

THREADSAFE PUSH Select_Directory_Item_15
{	
	component.SelectSpeedDialEntry(15);
}

THREADSAFE PUSH Select_Directory_Item_16
{	
	component.SelectSpeedDialEntry(16);
}

THREADSAFE PUSH Dial_Selected_Directory_Item
{
	component.DialSpeedDialEntry();
}

////////////////////////////////////////////////////////////              
// SpeedDial Entry Control
////////////////////////////////////////////////////////////
THREADSAFE PUSH Save_Directory_Entry
{
	component.SaveSpeedDialEntry(Select_Directory_Save_Location, Directory_Save_Name$, Directory_Save_Num$);
} 

////////////////////////////////////////////////////////////              
// Call Select Control
////////////////////////////////////////////////////////////
THREADSAFE CHANGE Call_Select
{
	IF(Call_Select > 0 && Call_Select <= MAX_CALL_APPEARANCES)
		component.CallSelect(Call_Select);
}

////////////////////////////////////////////////////////////              
// Enable
////////////////////////////////////////////////////////////
THREADSAFE PUSH Enable
{
	IF (IsReady)
		component.Configure(Command_Processor_ID, Dialer_Instance_Tag, Control_Status_Instance_Tag, Line_Number);
}
THREADSAFE RELEASE Enable
{
	IF (IsReady)
		component.UnRegister();
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	IsReady = FALSE;

    WaitForInitializationComplete();
	REGISTEREVENT(component, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(component, OnStateChange, OnStateChange); 
	REGISTEREVENT(component, OnKeypadTextChange, OnKeypadTextChange); 
	REGISTEREVENT(component, OnSpeedDialItemChange, OnSpeedDialItemChange); 
    REGISTEREVENT(component, OnCallChange, OnCallChange);
    REGISTEREVENT(component, OnCallStatusListChange, OnCallStatusListChange);
    REGISTEREVENT(component, OnSpeedDialSeletion, OnSpeedDialSeletion);
                  
	IF (Enable)                                 
	    component.Configure(Command_Processor_ID, Dialer_Instance_Tag, Control_Status_Instance_Tag, Line_Number);

	IsReady = TRUE;
}
