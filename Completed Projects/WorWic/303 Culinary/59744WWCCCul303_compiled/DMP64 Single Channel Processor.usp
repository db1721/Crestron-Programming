/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
   #HINT "DMP64 Single Channel Processor"
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, GetVal, MuteOn, MuteOff;
ANALOG_INPUT _SKIP_, SetVal;
STRING_INPUT _SKIP_, _SKIP_, RX$[100];
// BUFFER_INPUT 

DIGITAL_OUTPUT _SKIP_, _SKIP_, MuteOnFB, MuteOffFB;
ANALOG_OUTPUT _SKIP_, ValFB;
STRING_OUTPUT _SKIP_, _SKIP_, TX$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, CtlPnt[10];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/
String CtlVal[20], CtlMute[20];
Change SetVal
{
	makestring(TX$, "\x1bG%s*%04dAU\r", CtlPnt, SetVal);
}
Change RX$
{
	Integer MuteVal, VolVal;
	String Temp[200];
	Temp = Gather("\r", RX$);
	If(Find(CtlVal, Temp))//LevelSet
	{
    	VolVal = AtoI(Mid(Temp, Find("*", Temp) +1, Find("\r", Temp)- Find("*", Temp) - 1));
    	If(Find("-", Temp))
    	{
    		ValFB = VolVal * -1;
    	}
    	Else
    	{
    		ValFb = VolVal;
    	}
	}
	Else If(Find(CtlMute, Temp))//Muteset
	{
    	Switch(AtoI(Mid(Temp, Find("*", Temp) +1, 1)))
		{
			Case(0):
			{
				MuteOnFB = 0;
				MuteOffFB = 1;
			}
			Case(1):
			{
				MuteOnFB = 1;
				MuteOffFB = 0;
			}
		}
	}

}
Push MuteOn
{
	makestring(TX$, "\x1bM%s*1AU\r", CtlPnt);
}
Push MuteOff
{
	makestring(TX$, "\x1bM%s*0AU\r", CtlPnt);
}

Push GetVal
{
	makestring(TX$, "\x1b3CV\r");
	ProcessLogic();
	makestring(TX$, "\x1bG%sAU\r", CtlPnt);
	ProcessLogic();
	makestring(TX$, "\x1bM%sAU\r", CtlPnt);
}

Function Main()
{
	CtlVal = "DsG" + CtlPnt;
	CtlMute = "DsM" + CtlPnt;
}
