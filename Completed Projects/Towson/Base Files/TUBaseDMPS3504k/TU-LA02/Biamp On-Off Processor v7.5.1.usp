/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BiAmp On-Off Processor v7.5.1"
// #HINT ""
#DEFINE_CONSTANT	TRUE		1
#DEFINE_CONSTANT	FALSE		0
#DEFINE_CONSTANT	DEBUG		0

#DEFINE_CONSTANT	csSENDNAME	"Send Name\x0D\x0A"
#CATEGORY "0"
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	Vol_Mute_On, Vol_Mute_Off, Poll_Mute;
STRING_INPUT	Mute_Device_ID[2],
				Mute_Device_Instance[50],
				Mute_Index1[2],
				Mute_Index2[2],
				Mute_Command_Type[15];
BUFFER_INPUT	Device_RX$[2000]; 

DIGITAL_OUTPUT	Mute_On_Fb, Mute_Off_Fb, Start_Up_Out, Error;
STRING_OUTPUT	Device_TX$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER	bRXOK;
INTEGER	iVolIndex1, iVolIndex2, iMuteIndex1, iMuteIndex2, errorReceived;
STRING	sMute[100], sSendName[50];
STRING	sMutePrefix[100], sMuteType[20], sInstance[52], sSendInst[150];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function ProcessMuteData(string Data)
{
	string sTemp[255], sVal[50];
	sTemp = remove(sMutePrefix, Data); //remove prefix
	sVal = left(Data, 2);
	if(find("1", sVal))
	{
		Mute_Off_Fb = FALSE;
		Mute_On_FB = TRUE;
	}
	else
	{
		Mute_On_FB = FALSE;
		Mute_Off_Fb = TRUE;
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
function ProcessMsgFromDevice(string paramData)
{
	if(find("hello", paramData) > 0)
	{
		errorReceived = 0;
		Error = errorReceived;
		Device_TX$ = paramData;
	}
	else if(find(csSENDNAME, paramData) > 0)
	{
		errorReceived = 0;
		Error = errorReceived;
		Start_Up_Out = 1;
		sSendName = left(paramData, len(paramData) - 2);
	}
	else if(find(sMutePrefix, paramData)) //valid mute data
	{
		if(find("-ERR", paramData) > 0)
		{
			errorReceived = 1;
			Error = errorReceived;
		}
		else
		{
			errorReceived = 0;
			Error = errorReceived;
			call ProcessMuteData(paramData);
		}
	}
}
#if_series3
threadsafe CHANGE Device_RX$
{
	string sTempData[255];
	while(find("\n", Device_RX$) > 0)
	{
		try
		{
			sTempData = gather("\n", Device_RX$);
			ProcessMsgFromDevice(sTempData);
			sTempData = "";
		}
		catch
		{
			generateusernotice("BiAmp On-Off: From_SMPL$: trouble parsing: %s", getexceptionmessage());
		}
	}
}
#else
integer bRXOK;
CHANGE Device_RX$
{
	string sTempData[255];
	if(bRXOK)
	{
		bRXOK = FALSE;
		while(find("\n", Device_RX$) > 0)
		{
			sTempData = gather("\n", Device_RX$);
			ProcessMsgFromDevice(sTempData);
			sTempData = "";
		}
		bRXOK = TRUE;
	}
}
#endif

CHANGE	Mute_Device_Instance
{
	if(find("\x20", Mute_Device_Instance) > 0)
	{
		makestring(sInstance, "\x22%s\x22", left(Mute_Device_Instance, 50));
	}
	else
	{
		sInstance = left(Mute_Device_Instance, 50);
	}
}

change Mute_Index1
{
	iMuteIndex1 = atoi(Mute_Index1);
}

change Mute_Index2
{
	iMuteIndex2 = atoi(Mute_Index2);
}

CHANGE Mute_Command_Type
{
	Start_Up_Out = 0;
	sMuteType = Mute_Command_Type;
	sMutePrefix = "";
	sMute = "";
	if((iMuteIndex1 > 0) && (iMuteIndex2 > 0))
	{
		makestring(sMute, "%s %s %s %s %s", Mute_Device_ID, sMuteType,
						 sInstance, Mute_Index1, Mute_Index2);
		makestring(sSendInst, "%s %s %s %s", Mute_Command_Type,
						 sInstance, Mute_Index1, Mute_Index2);
	}
	else if((iMuteIndex1 > 0) && (iMuteIndex2 = 0))
	{
		makestring(sMute, "%s %s %s %s", Mute_Device_ID, sMuteType,
						 sInstance, Mute_Index1);
		makestring(sSendInst, "%s %s %s", Mute_Command_Type,
						 sInstance, Mute_Index1);
	}
	else
	{
		makestring(sMute, "%s %s %s", Mute_Device_ID, sMuteType,
						 sInstance);
		makestring(sSendInst, "%s %s", Mute_Command_Type, sInstance);
	}
	makestring(Device_TX$, "%s=%s\x0D\x0A", sSendName, sSendInst);
}

Push Vol_Mute_On
{
	if(errorReceived = 0)
	{
		makestring(Device_TX$, "SETD %s 1\x0A", sMute);
		makestring(sMutePrefix, "#SETD %s\x20", sMute);
	}
}

Push Vol_Mute_Off
{
	if(errorReceived = 0)
	{
		makestring(Device_TX$, "SETD %s 0\x0A", sMute);
		makestring(sMutePrefix, "#SETD %s\x20", sMute);
	}
}

Push Poll_Mute
{
	makestring(Device_TX$, "GETD %s\x0A", sMute);
	makestring(sMutePrefix, "#GETD %s\x20", sMute);
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	waitforinitializationcomplete();
	errorReceived = 0;
	Error = errorReceived;
#if_series2
	bRXOK = TRUE;
#endif
	Mute_Off_Fb = FALSE;
	Mute_On_Fb = TRUE;
}
