/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "BiAmp Command Processor IP v7.5.1"
// #HINT ""
#DEFINE_CONSTANT	ciMAXCHARACTERS		100
#DEFINE_CONSTANT	ciQUEUESIZE			500
#DEFINE_CONSTANT	ciMAXINSTANCES		500
#DEFINE_CONSTANT	ciMAXTIMEOUTS		5

#DEFINE_CONSTANT	csSENDNAME			"Send Name\x0D\x0A"
#CATEGORY "34" // Mixer
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
// #DIGITAL_EXPAND 
// #PRINT_TO_TRACE
// #ENABLE_TRACE
// #ANALOG_SERIAL_EXPAND InputsWithOutputs
#HELP_PDF_FILE "Biamp AudiaFlex + Nexia Command Processor IP Help.pdf"
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Initialize, Connected_F;
BUFFER_INPUT	From_Device[5000], From_Modules[5000];

DIGITAL_OUTPUT	Initialize_Is_Busy, initComplete;
STRING_OUTPUT	To_Device, _SKIP_, To_Modules[ciMAXINSTANCES];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iNextCommandStore, iNextCommandSend, iNextGetStore, iNextGetSend, iTempID,
		iTemp, a, b, numberOfModules, _initComplete, _modules[ciMAXINSTANCES],
		commandSent, timeOutCounter, mainComplete;
STRING	sCommand[ciQUEUESIZE][ciMAXCHARACTERS], sGet[ciQUEUESIZE][ciMAXCHARACTERS],
		sTempModules[ciMAXCHARACTERS], sTempDevice[ciMAXCHARACTERS],
		sModuleInstanceID[ciMAXINSTANCES][ciMAXCHARACTERS];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
function sendCommand()
{
	if(_initComplete = 1)
	{
		if(Connected_F = 1)
		{
			if(commandSent = 0)
			{
				if(len(sCommand[iNextCommandSend]) > 0)
				{
					commandSent = 1;
					timeOutCounter = 0;
					To_Device = sCommand[iNextCommandSend];
					sCommand[iNextCommandSend] = "";
					iNextCommandSend = iNextCommandSend + 1;
					if(iNextCommandSend > ciQUEUESIZE)
					{
						iNextCommandSend = 1;
					}
				}
				else if(len(sGet[iNextGetSend]) > 0)
				{
					commandSent = 1;
					timeOutCounter = 0;
					To_Device = sGet[iNextGetSend];
					sGet[iNextGetSend] = "";
					iNextGetSend = iNextGetSend + 1;
					if(iNextGetSend > ciQUEUESIZE)
					{
						iNextGetSend = 1;
					}
				}
			}
			else
			{
				timeOutCounter = timeOutCounter + 1;
				if(timeOutCounter = 10)
				{
					timeOutCounter = 0;
					commandSent = 0;
				}
			}
		}
	}
	wait(20, _sendCommandWait)
	{
		sendCommand();
	}
}

function checkInitStatus()
{
	integer d, emptyFound;
	trace("checking init status");
	emptyFound = 0;
	for(d = 1 to numberOfModules)
	{
		if((_modules[d] = 1) && (len(sModuleInstanceID[d]) = 0))
		{trace("checking init status: found emtpty instance ID %d", d);
			emptyFound = 1;
			break;
		}
	}trace("checking init status: emptyFound = %d", emptyFound);
	if(emptyFound = 0)
	{trace("checking init status: init complete");
		Initialize_is_Busy = 0;
		_initComplete = 1;
		sendCommand();
	}
	else
	{trace("checking init status: init not complete");
		_initComplete = 0;
	}
	initComplete = _initComplete;
}

function AddModule(integer paramData)
{
	_modules[paramData] = 1;
}

function InitModules()
{
	Initialize_is_Busy = 1;
	_initComplete = 0;
	initComplete = _initComplete;
	commandSent = 0;
	timeOutCounter = 0;
	setarray(sModuleInstanceID, "");
	checkInitStatus();
	for(a = 1 to numberOfModules)
	{
		if(_modules[a] = 1)
		{
			makestring(To_Modules[a], "%d %s", a, csSENDNAME);
		}
	}
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH Initialize
{trace("Initialize: mainComplete = %d", mainComplete);
	if((mainComplete = 1) && (_initComplete = 0) && (Initialize_is_Busy = 0))
	{
		print("initialize is %d", Initialize_is_Busy);
		InitModules();
	}
}

PUSH Connected_F
{
	delay(100);
	To_Device = "\xFF\xFE\x01";
}

function AddName(string paramData)
{
	iTempID = atoi(paramData);
	paramData = left(paramData, len(paramData) - 2);
	sModuleInstanceID[iTempID] = mid(paramData, find("=", paramData) + 1, len(paramData) - find("=", paramData)) + " ";
	trace("AddName: itempId = %d; sModuleInstanceID = %s", iTempID, sModuleInstanceID[iTempID]);
	checkInitStatus();
}

function ProcessFromModules(string paramData)
{
	if(find("GET", paramData) > 0)
	{
		sGet[iNextGetStore] = paramData;
		iNextGetStore = iNextGetStore + 1;
		if(iNextGetStore > ciQUEUESIZE)
		{
			iNextGetStore = 1;
		}
	}
	else
	{
		sCommand[iNextCommandStore] = paramData;
		iNextCommandStore = iNextCommandStore + 1;
		if(iNextCommandStore > ciQUEUESIZE)
		{
			iNextCommandStore = 1;
		}
	}
}

#if_series3
threadsafe change From_Modules
{
	string sTempModules[ciMAXCHARACTERS];
	while(1)
	{
		try
		{
			sTempModules = gather("\x0A", From_Modules);
			if(find("hello", sTempModules) > 0)
			{
				AddModule(atoi(sTempModules));
			}
			else if(find("Send Name", sTempModules) > 0)
			{
				AddName(sTempModules);
			}
			else
			{
				ProcessFromModules(sTempModules);
			}
		}
		catch
		{
			generateusernotice("BiAmp IP Queue: From_Modules: trouble parsing: %s", getexceptionmessage());
		}
	}
}
#else
integer bFlag1;
CHANGE From_Modules
{
	string sTempModules[ciMAXCHARACTERS];
	if(bFlag1 = 0)
	{
		bFlag1 = 1;
		while(1)
		{
			sTempModules = gather("\x0A", From_Modules);
			if(find("hello", sTempModules) > 0)
			{
				AddModule(atoi(sTempModules));
			}
			else if(find("Send Name", sTempModules) > 0)
			{
				AddName(sTempModules);
			}
			else
			{
				ProcessFromModules(sTempModules);
			}
			sTempModules = "";
		}
		bFlag1 = 0;
	}
}
#endif

function ProcessFromDevice(string paramData)
{
	if(find("\xFF\xFC\x01", paramData) > 0)
	{
		paramData = "";
	}
	else if((find("RECALL", upper(paramData)) = 0) && (find("PRESET", upper(paramData)) = 0))
	{
		for(b = 1 to numberOfModules)
		{
			if((len(sModuleInstanceID[b]) > 0) && (find(sModuleInstanceID[b], paramData) > 0))
			{
				To_Modules[b] = paramData;
				break;
			}
		}
	}
} 
#if_series3
threadsafe change From_Device
{
	string sTempDevice[ciMAXCHARACTERS];
	while(1)
	{
		try
		{
			sTempDevice = gather("\x0D\x0A", From_Device);
			commandSent = 0;
			timeOutCounter = 0;
			ProcessFromDevice(sTempDevice);
			sTempDevice = "";
		}
		catch
		{
			generateusernotice("BiAmp IP Queue: From_Device: trouble parsing: %s", getexceptionmessage());
		}
	}
}
#else
integer bFlag2;
CHANGE From_Device
{
	string sTempDevice[ciMAXCHARACTERS];
	if(bFlag2 = 0)
	{
		bFlag2 = 1;
		while(1)
		{
			sTempDevice = gather("\x0D\x0A", From_Device);
			commandSent = 0;
			timeOutCounter = 0;
			ProcessFromDevice(sTempDevice);
			sTempDevice = "";
		}
		bFlag2 = 0;
	}
}
#endif
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	waitforinitializationcomplete();
	mainComplete = 0;
	setarray(sCommand, "");
	setarray(sGet, "");
	setarray(_modules, 0);
	_initComplete = 0;
	initComplete = _initComplete;
	Initialize_is_Busy = 0;
	commandSent = 0;
	timeOutCounter = 0;
#if_series2
	bFlag1 = 0;
	bFlag2 = 0;
	delay(500);
#endif
	for(a = ciMAXINSTANCES to 1 step -1)
	{
		if(issignaldefined(To_Modules[a]))
		{
			numberOfModules = a;
			break;
		}
	}
	for(a = 1 to numberOfModules)
	{
		makestring(To_Modules[a], "hello %d\x0D\x0A", a);
	}
	mainComplete = 1;
	if(Initialize = 1)
	{
		InitModules();
	}
}
