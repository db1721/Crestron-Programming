/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "BiAmp Command Processor v5.1"
// #HINT ""
#DEFINE_CONSTANT	ciMAXCHARACTERS		50
#DEFINE_CONSTANT	ciQUEUESIZE				40
#DEFINE_CONSTANT	ciMAXUNITS				25
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Send_Next;
BUFFER_INPUT	From_Modules$[300], From_Device$[500];

DIGITAL_OUTPUT	Timed_Out;
STRING_OUTPUT		To_Device$, To_Unit$[ciMAXUNITS];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iNextCommandStore, iNextCommandSend, iNextGetStore, iNextGetSend,
				bFlag1, bFlag2, bOkToSend, iTemp;
STRING	sCommand[ciQUEUESIZE][ciMAXCHARACTERS], sGet[ciQUEUESIZE][ciMAXCHARACTERS],
				sTempModules[ciMAXCHARACTERS], sTempDevice[ciMAXCHARACTERS];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
Function fTimeOut()
{
	wait(500, wTimeOut)
	{
		Timed_Out = 1;
	}
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH Send_Next
{
	delay(1);
	Timed_Out = 0;
	if(iNextCommandSend <> iNextCommandStore)
	{
		To_Device$ = sCommand[iNextCommandSend];
		call fTimeOut();
		bOkToSend = 0;
		iNextCommandSend = iNextCommandSend + 1;
		if(iNextCommandSend > ciQUEUESIZE)
		{
			iNextCommandSend = 1;
		}
	}
	else if(iNextGetSend <> iNextGetStore)
	{
		To_Device$ = sGet[iNextGetSend];
		call fTimeOut();
		bOkToSend = 0;
		iNextGetSend = iNextGetSend + 1;
		if(iNextGetSend > ciQUEUESIZE)
		{
			iNextGetSend = 1;
		}
	}
}

CHANGE From_Modules$
{
	if(bFlag1 = 0)
	{
		bFlag1 = 1;
		while(find("\x0A", From_Modules$) > 0)
		{
			sTempModules = remove("\x0A", From_Modules$);
			if(bOkToSend = 1)
			{
				To_Device$ = sTempModules;
				call fTimeOut();
				bOkToSend = 0;
			}
			else if(find("GET", sTempModules) > 0)
			{
				sGet[iNextGetStore] = sTempModules;
				iNextGetStore = iNextGetStore + 1;
				if(iNextGetStore > ciQUEUESIZE)
				{
					iNextGetStore = 1;
				}
			}
			else
			{
				sCommand[iNextCommandStore] = sTempModules;
				iNextCommandStore = iNextCommandStore + 1;
				if(iNextCommandStore > ciQUEUESIZE)
				{
					iNextCommandStore = 1;
				}
			}
			sTempModules = "";
		}
		bFlag1 = 0;
	}
}

CHANGE From_Device$
{
	if(bFlag2 = 0)
	{
		bFlag2 = 1;
		while(1)
		{
			sTempDevice = gather("\x0D\x0A", From_Device$);
			cancelwait(wTimeOut);
			if((find("RECALL", upper(sTempDevice)) = 0) && (find("PRESET", upper(sTempDevice)) = 0))
			{
				iTemp = atoi(sTempDevice);
				if((iTemp <= ciMAXUNITS) && (iTemp > 0))
				{
					To_Unit$[iTemp] = sTempDevice;
				}
			}
			bOkToSend = 1;
			if(iNextCommandSend <> iNextCommandStore)
			{
				To_Device$ = sCommand[iNextCommandSend];
				call fTimeOut();
				bOkToSend = 0;
				iNextCommandSend = iNextCommandSend + 1;
				if(iNextCommandSend > ciQUEUESIZE)
				{
					iNextCommandSend = 1;
				}
			}
			else if(iNextGetSend <> iNextGetStore)
			{
				To_Device$ = sGet[iNextGetSend];
				call fTimeOut();
				bOkToSend = 0;
				iNextGetSend = iNextGetSend + 1;
				if(iNextGetSend > ciQUEUESIZE)
				{
					iNextGetSend = 1;
				}
			}
			sTempDevice = "";
		}
		bFlag2 = 0;
	}
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	bFlag1 = 0;
	bFlag2 = 0;
	sTempModules = "";
	sTempDevice = "";
	bOkToSend = 1;
}
