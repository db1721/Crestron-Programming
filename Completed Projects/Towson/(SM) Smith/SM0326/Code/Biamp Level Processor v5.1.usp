/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:	PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BiAmp Level Processor v5.1"
// #HINT ""
#DEFINE_CONSTANT TRUE   1
#DEFINE_CONSTANT FALSE  0
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Vol_Up, Vol_Down, Poll_Level, Send_New_Level;
 
ANALOG_INPUT Volume_Max_Level,
             Volume_Min_Level, New_Volume_Level;
STRING_INPUT 	Volume_Device_ID[2],
							Volume_Device_Instance[5],
             	Volume_Index1[2],
             	Volume_Index2[2],
             	Volume_Command_Type[15];
BUFFER_INPUT Device_RX$[2000]; 

ANALOG_OUTPUT Volume_Level;
STRING_OUTPUT Device_TX$; 
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER bRXOK, bUPOK, bDOWNOK;
INTEGER iVolIndex1, iVolIndex2;

STRING sTempData[255], sVol[30];
STRING sVolumePrefix[30], sVolumeType[20];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function ProcessVolumeData(string Data)
{
	string sTemp[25], sVal[10];
	integer iVolume;
	
	sTemp = remove(sVolumePrefix, Data); //remove prefix
	sVal = remove("\x2E", Data); 
	
	if(find("-", sVal))
	{
		iVolume = 65536 - atoi(sVal);	//sVal Value is Negative
	}
	else
	{
		iVolume = atoi(sVal); 							//value is positive
	}
	if(iVolume S<= Volume_Min_Level)
	{
		bUPOK = 1;
		bDOWNOK = 0;
	}
	else if(iVolume S<= Volume_Max_Level)
	{
		bUPOK = 1;
		bDOWNOK = 1;
	}
	else
	{
		bUPOK = 0;
		bDOWNOK = 1;
	}
	Volume_Level = iVolume;
}

Function fSendCommand()
{
	if((Vol_Up = 1) && (bUPOK = 1))
	{
		makestring(Device_TX$, "INCD %s 1\x0A", sVol);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
	else if((Vol_Down = 1) && (bDOWNOK = 1))
	{
		makestring(Device_TX$, "INCD %s -1\x0A", sVol);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE Device_RX$
{
	if (bRXOK)
	{
		bRXOK = FALSE;
		while (1)
		{
			sTempData = gather("\n", Device_RX$);
			if(find(sVolumePrefix, sTempData)) //valid volume data
			{
				call ProcessVolumeData(sTempData);
				if((Vol_Up = 1) || (Vol_Down = 1))
				{
					call fSendCommand();
				}
			}
		}
		bRXOK = TRUE;
	}
}

change Volume_Index1
{
	iVolIndex1 = atoi(Volume_Index1);
}

change Volume_Index2
{
	iVolIndex2 = atoi(Volume_Index2);
}

CHANGE Volume_Command_Type
{
	sVolumeType = Volume_Command_Type;
	sVolumePrefix = "";
	sVol = "";
	if((iVolIndex1 > 0) && (iVolIndex2 > 0))
	{
		makestring(sVol, "%s %s %s %s %s", Volume_Device_ID, sVolumeType,
						 Volume_Device_Instance, Volume_Index1, Volume_Index2);
	}
	else if((iVolIndex1 > 0) && (iVolIndex2 = 0))
	{
		makestring(sVol, "%s %s %s %s", Volume_Device_ID, sVolumeType,
						 Volume_Device_Instance, Volume_Index1);
	}
	else
	{
		makestring(sVol, "%s %s %s", Volume_Device_ID, sVolumeType,
						 Volume_Device_Instance);
	}
}

Push Vol_Up
{
	if(bUPOK = 1)
	{
		makestring(Device_TX$, "INCD %s 1\x0A", sVol);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
}


Push Vol_Down
{
	if(bDOWNOK = 1)
	{
		makestring(Device_TX$, "INCD %s -1\x0A", sVol);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
}

Push Send_New_Level
{
	if((New_Volume_Level S>= Volume_Min_Level) && (New_Volume_Level S<= (Volume_Max_Level + 1)))
	{
		makestring(Device_TX$, "SETD %s %d\x0A", sVol, New_Volume_Level);
		makestring(sVolumePrefix, "#SETD %s\x20", sVol);
	}
}

Push Poll_Level
{
	makestring(Device_TX$, "GETD %s\x0A", sVol);
	makestring(sVolumePrefix, "#GETD %s\x20", sVol);
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
  bRXOK = TRUE;
	bUPOK = TRUE;
	bDOWNOK = TRUE;
}
