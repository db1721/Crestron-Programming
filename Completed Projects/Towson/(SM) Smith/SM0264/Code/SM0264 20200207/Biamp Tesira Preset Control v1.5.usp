/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:Biamp Tesira Preset Control v1.5
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Preset Control v1.4.umc module only.
Not to be used as a stand-alone module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Recall_Preset;
STRING_INPUT Preset_Name_Number[50],_SKIP_;
BUFFER_INPUT From_Processor$[1024];

DIGITAL_OUTPUT Is_Initialized, _SKIP_, _SKIP_; 
STRING_OUTPUT To_Processor$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER myID;

INTEGER parsingModuleBusy;
STRING parsedModuleMsg[254];
INTEGER responseModuleMsgID;         
STRING responseRequestMsg[MAX_COMMAND_SIZE];
STRING responseMsg[MAX_COMMAND_SIZE];           
STRING parseValue[MAX_COMMAND_SIZE];        
INTEGER hasSubscriptionRegistered;         
STRING trash[MAX_COMMAND_SIZE];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
////////////////////////////////////////////////////////////
// Module Communication Method Helpers
////////////////////////////////////////////////////////////
String_Function getBoundString(STRING source, STRING startString, STRING endString)
{
	INTEGER startIndex;
	INTEGER endIndex;
	STRING response[MAX_COMMAND_SIZE];
                                     
    response = "";

	IF (LEN(source) > 0)
	{
		startIndex = FIND(startString, source);
		endIndex = FIND(endString, source, startIndex + 1);
	
		IF (startIndex > 0 && startIndex < endIndex)
		{
			startIndex = startIndex + LEN(startString);
				
			response = MID(source, startIndex, endIndex - startIndex);
		}
	}

	RETURN (response);
}

////////////////////////////////////////////////////////////
// String Method Helpers
////////////////////////////////////////////////////////////
Integer_Function startsWith(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) = 1); 
}

Integer_Function contains(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) > 0); 
}
                 
Integer_Function ATOI_Signed(STRING value)
{
	IF (startsWith("-", value))
		RETURN (0-ATOI(value));
	ELSE
		RETURN (ATOI(value));
}

String_Function trim(STRING value)
{
	WHILE(LEFT(value, 1) = "\x20")
		value = RIGHT(value, LEN(value) - 1);

	WHILE(RIGHT(value, 1) = "\x20")
		value = LEFT(value, LEN(value) - 1);

	RETURN (value);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessProcessorMsg()
{
    IF (LEN(parsedModuleMsg) > 0)
    {
        IF (startsWith("REGISTER", parsedModuleMsg))
        {
            Is_Initialized = FALSE;

            myID = ATOI(getBoundString(parsedModuleMsg,"<",">"));
            
            IF (myID > 0)
                MakeString(To_Processor$,"REGISTER<%d>", myID);
        }
        ELSE IF (startsWith("INIT", parsedModuleMsg))
        {
            Is_Initialized = TRUE;

            MakeString(To_Processor$,"INIT_DONE<%d>", myID);
        }
        ELSE IF (startsWith("RESPONSE_MSG", parsedModuleMsg))
        {
            responseRequestMsg = getBoundString(parsedModuleMsg,"<","|");
            responseMsg = getBoundString(parsedModuleMsg,"|",">");

            MakeString(To_Processor$,"RESPONSE_OK<%d|%s>", myID, responseRequestMsg);
        }
    }
}

#if_series3
THREADSAFE CHANGE From_Processor$
{
    WHILE (TRUE)
    {
        try
        {
			parsedModuleMsg = GATHER(">", From_Processor$);

			IF (contains(parsedModuleMsg, From_Processor$))
				clearBuffer(From_Processor$);

            ProcessProcessorMsg();        
        }
        catch
        {
            print("Issue with Processor message handeling\n");
        }
    }
}
#else
CHANGE From_Processor$
{
	IF (parsingModuleBusy = FALSE)
	{
		parsingModuleBusy = TRUE;
                       
		WHILE (TRUE)
		{           
			parsedModuleMsg = GATHER(">", From_Processor$);

			IF (contains(parsedModuleMsg, From_Processor$))
				clearBuffer(From_Processor$);

            ProcessProcessorMsg();
		}

		parsingModuleBusy = FALSE;
	}
}
#endif


PUSH Recall_Preset
{
	STRING outgoingMsg[100];
    INTEGER nPresetValue;

	IF (Is_Initialized = TRUE)
	{
		IF (LEN(Preset_Name_Number) > 0)
		{
			nPresetValue = ATOI(Preset_Name_Number);
	
			IF (nPresetValue >= 1001)
				MakeString(outgoingMsg,"DEVICE recallPreset %d", nPresetValue);
			ELSE
				MakeString(outgoingMsg,"DEVICE recallPresetByName %s", Preset_Name_Number);
	
			MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	parsingModuleBusy = FALSE;

	Is_Initialized = FALSE;
	hasSubscriptionRegistered = FALSE;

    //WaitForInitializationComplete();
}

