/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name: DMPS
System Number:
Programmer:kskontrianos
Comments:used to convert serials to analogs from DMPS NVRAM slot

*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
 #DEFINE_CONSTANT STRING_LENGTH 240
 #DEFINE_CONSTANT MAX_OUTPUTS 80
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT  Go;
 //ANALOG_INPUT length;
 STRING_INPUT in$[STRING_LENGTH];
// BUFFER_INPUT 

 DIGITAL_OUTPUT Complete;
 ANALOG_OUTPUT out[MAX_OUTPUTS];
// STRING_OUTPUT 
     

push Go

//pre: String is written to DMPS in proper format (see )
//post: Analogs 1-80 are written to output
{

	integer i,j, temp;
	j = 1;
	Complete = 0;
    for (i = 1 to STRING_LENGTH STEP 3)
		{
		temp = 0;
		if (len(in$)= 0)
			{
			break;
			}


	    temp = (byte (in$,i)<<9) + (((byte (in$,i+1) & 0x7F))<<2) + (byte(in$,i+2) & 0x03);
	    out[j] = temp;
		j = j+1;
		
		}
Complete = 1;

 
}

