#SYMBOL_NAME "DMPS Installer Tools v1_13"

#CATEGORY "0"

#DEFINE_CONSTANT	MENUPASSWORD		1
#DEFINE_CONSTANT	MENUWRONGPASSWORD	2

#DEFINE_CONSTANT	MENUMAIN			3

#DEFINE_CONSTANT	MENUAUDIO			4
#DEFINE_CONSTANT	MENUVIDEO			5
#DEFINE_CONSTANT	MENUNETWORK			6
#DEFINE_CONSTANT	MENUCONTROL			7

#DEFINE_CONSTANT	MENUPROGRAM			8
#DEFINE_CONSTANT	MENURECORD			9
#DEFINE_CONSTANT	MENUSPEECH			10
#DEFINE_CONSTANT	MENUMICROPHONE		11
#DEFINE_CONSTANT	MENUINPUTTRIM		12

#DEFINE_CONSTANT	MENUPROGSOURCEMIX	13
#DEFINE_CONSTANT	MENUPROGBASS		14
#DEFINE_CONSTANT	MENUPROGTREBLE		15
#DEFINE_CONSTANT	MENUPROGMINVOL		16
#DEFINE_CONSTANT	MENUPROGMAXVOL		17
#DEFINE_CONSTANT	MENUPROGMONO		18
#DEFINE_CONSTANT	MENUPROGSTARTUPVOL	19
#DEFINE_CONSTANT	MENUPROGDELAY		118

#DEFINE_CONSTANT	MENURECSOURCEMIX	20
#DEFINE_CONSTANT	MENURECFIXEDVARIABLE	21 //not used
#DEFINE_CONSTANT	MENURECBASS			22
#DEFINE_CONSTANT	MENURECTREBLE		23
#DEFINE_CONSTANT	MENURECSTARTUPVOL	24
#DEFINE_CONSTANT	MENURECMINVOL		119
#DEFINE_CONSTANT	MENURECMAXVOL		120
#DEFINE_CONSTANT	MENURECDELAY		121

#DEFINE_CONSTANT	MENUSPCHSOURCEMIX	25
#DEFINE_CONSTANT	MENUSPCHBASS		26
#DEFINE_CONSTANT	MENUSPCHTREBLE		27
#DEFINE_CONSTANT	MENUSPCHDELAY		28
#DEFINE_CONSTANT	MENUSPCHPROGVOL		29//not used
#DEFINE_CONSTANT	MENUSPCHMINVOL		30
#DEFINE_CONSTANT	MENUSPCHMAXVOL		31
#DEFINE_CONSTANT	MENUSPCHSTARTUPVOL	32

#DEFINE_CONSTANT	MENUSRCGAIN1		33
#DEFINE_CONSTANT	MENUSRCGAIN2		34
#DEFINE_CONSTANT	MENUSRCGAIN3		35
#DEFINE_CONSTANT	MENUSRCGAIN4		36
#DEFINE_CONSTANT	MENUSRCGAIN5		37
#DEFINE_CONSTANT	MENUSRCGAIN6		38
#DEFINE_CONSTANT	MENUSRCGAIN7		39
#DEFINE_CONSTANT	MENUSRCGAIN8		40

#DEFINE_CONSTANT	MENUMASTERSTARTUPVOL	41

#DEFINE_CONSTANT	MENUMIC1GATING		42
#DEFINE_CONSTANT	MENUMIC2GATING		43
#DEFINE_CONSTANT	MENUMIC3GATING		44
#DEFINE_CONSTANT	MENUMIC4GATING		45
#DEFINE_CONSTANT	MENUMIC5GATING		46
#DEFINE_CONSTANT	MENUMIC6GATING		47
#DEFINE_CONSTANT	MENUPHANTOM			48
#DEFINE_CONSTANT	MENUMIC1GAIN		49
#DEFINE_CONSTANT	MENUMIC2GAIN		50
#DEFINE_CONSTANT	MENUMIC3GAIN		51
#DEFINE_CONSTANT	MENUMIC4GAIN		52
#DEFINE_CONSTANT	MENUMIC5GAIN		53
#DEFINE_CONSTANT	MENUMIC6GAIN		54


#DEFINE_CONSTANT	MENUINPUT			55
#DEFINE_CONSTANT 	MENUSIGNALTYPE		56
#DEFINE_CONSTANT	MENUOUTPUT			57

//#DEFINE_CONSTANT 	MENUEDITSIGNALTYPE	58

#DEFINE_CONSTANT	MENUIPADDRESS		59
#DEFINE_CONSTANT	MENUSUBNETMASK		60
#DEFINE_CONSTANT	MENUDEFROUTER		61
#DEFINE_CONSTANT	MENUDHCP			62
#DEFINE_CONSTANT	MENUWINS			63
#DEFINE_CONSTANT	MENUHOSTNAME		64
#DEFINE_CONSTANT	MENUDOMAINNAME		65
#DEFINE_CONSTANT 	MENUROOMVIEW		66
#DEFINE_CONSTANT	MENUSTATUS			67

#DEFINE_CONSTANT	MENUBACKLIGHT		68
#DEFINE_CONSTANT	MENUFUNCTION		69
#DEFINE_CONSTANT	MENUIDDEVICES		70
#DEFINE_CONSTANT	MENUUPGRADEDEVICE	71
#DEFINE_CONSTANT	MENUCHANGEPASSWORD	72
#DEFINE_CONSTANT	MENUINFO			73
#DEFINE_CONSTANT	MENUMESSAGE			74
#DEFINE_CONSTANT	MENUTIMEDATE		75
#DEFINE_CONSTANT	MENURESTOREDEFAULTS	76

#DEFINE_CONSTANT 	MENUERRCLEAR		77
#DEFINE_CONSTANT 	MENUDATE			78
#DEFINE_CONSTANT 	MENUTIME			79
#DEFINE_CONSTANT	MENUREMS			80
#DEFINE_CONSTANT	MENUSHOWHW			81
#DEFINE_CONSTANT	MENUREPORTCRESNET	82
#DEFINE_CONSTANT	MENUOPS				83

#DEFINE_CONSTANT	MENUEDITTEXT		84

#DEFINE_CONSTANT	MENUFRONTPANEL		85

#DEFINE_CONSTANT	MENUAPADUPGRADEMESSAGE	86

#DEFINE_CONSTANT	MENUEXITSETUPCONFIRMATION	87
#DEFINE_CONSTANT	MENUEXITSETUP		88
#DEFINE_CONSTANT	MENUPASSWORDMSG		89
#DEFINE_CONSTANT	MENUSYSTEMID		122
#DEFINE_CONSTANT	MENUSINGLEIP		123
#DEFINE_CONSTANT	MENUPRIVATENETWORK	124

//#DEFINE_CONSTANT	MENUCONFIGKEYPADS	90

//#DEFINE_CONSTANT	MENUEDITKEYPADS		91

#DEFINE_CONSTANT	MENUMIC1COMPRESSION		92
#DEFINE_CONSTANT	MENUMIC1LIMITER			93
#DEFINE_CONSTANT	MENUMIC2COMPRESSION		94
#DEFINE_CONSTANT	MENUMIC2LIMITER			95
#DEFINE_CONSTANT	MENUMIC3COMPRESSION		96
#DEFINE_CONSTANT	MENUMIC3LIMITER			97
#DEFINE_CONSTANT	MENUMIC4COMPRESSION		98
#DEFINE_CONSTANT	MENUMIC4LIMITER			99
#DEFINE_CONSTANT	MENUMIC5COMPRESSION		100
#DEFINE_CONSTANT	MENUMIC5LIMITER			101
#DEFINE_CONSTANT	MENUMIC6COMPRESSION		102
#DEFINE_CONSTANT	MENUMIC6LIMITER			103

#DEFINE_CONSTANT 	MENUEDITSIGNAL1TO2TYPE		104
#DEFINE_CONSTANT 	MENUEDITSIGNAL3TO4TYPE		105
#DEFINE_CONSTANT 	MENUEDITSIGNAL5to5TYPE		106
#DEFINE_CONSTANT	MENURGBPASSTHRU		107

#DEFINE_CONSTANT 	MENUEDITAUDIOSIGNAL1TO2TYPE		108
#DEFINE_CONSTANT 	MENUEDITAUDIOSIGNAL3TO4TYPE		109
#DEFINE_CONSTANT 	MENUEDITAUDIOSIGNAL5to5TYPE		110
#DEFINE_CONSTANT 	MENUAUDIOSIGNALTYPE		111

#DEFINE_CONSTANT	MENUSRCGAIN9		112
#DEFINE_CONSTANT	MENUSRCGAIN10		113
#DEFINE_CONSTANT	MENUSRCGAIN11		114
#DEFINE_CONSTANT	MENUSRCGAIN12		115
#DEFINE_CONSTANT	MENUSRCGAIN13		116
#DEFINE_CONSTANT	MENUSRCGAIN14		117




#DEFINE_CONSTANT	MAINMENUENTRIES		4
#DEFINE_CONSTANT    AUDIOMENUENTRIES	6
#DEFINE_CONSTANT    VIDEOMENUENTRIES	3
#DEFINE_CONSTANT    NETWORKMENUENTRIES	9
#DEFINE_CONSTANT    CONTROLMENUENTRIES	10
#DEFINE_CONSTANT	PRIVATENETWORKMENUENTRIES 2

#DEFINE_CONSTANT	INCONFIGMENUENTRIES 	8
#DEFINE_CONSTANT	SIG1to2TYPEMENUENTRIES	1
#DEFINE_CONSTANT	SIG3to4TYPEMENUENTRIES	3
#DEFINE_CONSTANT	SIG5to5TYPEMENUENTRIES	4//sorry about the name.
//#DEFINE_CONSTANT	SRCTYPEMENUENTRIES		8
//#DEFINE_CONSTANT	OUTCONFIGMENUENTRIES 	7
#DEFINE_CONSTANT	STATUSMENUENTRIES		5
#DEFINE_CONSTANT	IPADDRESSMENUENTRIES 	1
#DEFINE_CONSTANT	SUBNETMASKMENUENTRIES 	1
#DEFINE_CONSTANT	DEFROUTERMENUENTRIES 	1
#DEFINE_CONSTANT	DHCPMENUENTRIES			2
#DEFINE_CONSTANT	WINSMENUENTRIES 		2
#DEFINE_CONSTANT	ROOMVIEWMENUENTRIES		3
#DEFINE_CONSTANT	HOSTNAMEMENUENTRIES 	1
#DEFINE_CONSTANT	DOMAINNAMEMENUENTRIES 	1
#DEFINE_CONSTANT	FUNCTIONMENUENTRIES		5
#DEFINE_CONSTANT	BACKLIGHTMENUENTRIES	3
#DEFINE_CONSTANT	UPGRADEMENUENTRIES		2
#DEFINE_CONSTANT	SIGNALTYPEMENUENTRIES	3
#DEFINE_CONSTANT	DEFAULTENTRIES			3
#DEFINE_CONSTANT	RGBPASSTHRUMENUENTRIES	2
#DEFINE_CONSTANT	AUDIOSIG1to2TYPEMENUENTRIES	3
#DEFINE_CONSTANT	AUDIOSIG3to4TYPEMENUENTRIES	3
#DEFINE_CONSTANT	AUDIOSIG5to5TYPEMENUENTRIES	4

#DEFINE_CONSTANT	PROGAUDIOMENUENTRIES		8
#DEFINE_CONSTANT	RECAUDIOMENUENTRIES			7
#DEFINE_CONSTANT	SPCHAUDIOMENUENTRIES		7
//#DEFINE_CONSTANT	INPUTCOMPMENUENTRIES		8
#DEFINE_CONSTANT	MICMENUENTRIES				24
#DEFINE_CONSTANT    MONOMENUENTRIES				2
#DEFINE_CONSTANT	PROGMONOMENUENTRIES			2
#DEFINE_CONSTANT	PROGSOURCEMIXMENUENTRIES	3
#DEFINE_CONSTANT	RECSOURCEMIXMENUENTRIES		3
#DEFINE_CONSTANT	RECFIXEDVARIABLEMENUENTRIES	2
#DEFINE_CONSTANT	SPCHSOURCEMIXMENUENTRIES	3
#DEFINE_CONSTANT	SPCHPROGVOLMENUENTRIES		4

#DEFINE_CONSTANT	MIC1GATINGMENUENTRIES		2
#DEFINE_CONSTANT	MIC2GATINGMENUENTRIES		2
#DEFINE_CONSTANT	MIC3GATINGMENUENTRIES		2
#DEFINE_CONSTANT	MIC4GATINGMENUENTRIES		2
#DEFINE_CONSTANT	MIC5GATINGMENUENTRIES		2
#DEFINE_CONSTANT	MIC6GATINGMENUENTRIES		2

#DEFINE_CONSTANT	PHANTOMPOWERMENUENTRIES		2
#DEFINE_CONSTANT	MIC1COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC1LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	MIC2COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC2LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	MIC3COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC3LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	MIC4COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC4LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	MIC5COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC5LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	MIC6COMPRESSIONMENUENTRIES	2
#DEFINE_CONSTANT	MIC6LIMITERMENUENTRIES		2
#DEFINE_CONSTANT	SINGLEIPMENUENTRIES			2

#DEFINE_CONSTANT	DEVICETYPEAPAD		1
#DEFINE_CONSTANT	DEVICETYPEC2N12BUT	2
#DEFINE_CONSTANT	DEVICETYPECNX12BUT	3
#DEFINE_CONSTANT	DEVICETYPEFTB10BUT	4
#DEFINE_CONSTANT	DEVICETYPEMNETGW	5
#DEFINE_CONSTANT	DEVICETYPEILUX		6
#DEFINE_CONSTANT	DEVICETYPEAMP		7

#DEFINE_CONSTANT	MAXINPUTS			7

#DEFINE_CONSTANT	MAXFIELDLENGTH		19
#DEFINE_CONSTANT	ARROWNONE			"\x20"
#DEFINE_CONSTANT	ARROWUP				"\x02"
#DEFINE_CONSTANT	ARROWDOWN			"\x03"
#DEFINE_CONSTANT	ARROWUPDOWN			"\x04"

#DEFINE_CONSTANT	TRUE				1
#DEFINE_CONSTANT	FALSE				0

#DEFINE_CONSTANT	OOTBF				1
#DEFINE_CONSTANT	SYSTEMBUILDER		2
#DEFINE_CONSTANT	CUSTOM				3

 

#DEFINE_CONSTANT INPUTCOMP300NUMENTRIES	13

//DEFINE 200/100 lengths
#DEFINE_CONSTANT	MIC200MENUENTRIES				16
#DEFINE_CONSTANT	MIC100MENUENTRIES				8
#DEFINE_CONSTANT	AUDIO100MENUENTRIES				5
#DEFINE_CONSTANT 	INPUTCOMP200NUMENTRIES			13
#DEFINE_CONSTANT 	INPUTCOMP100NUMENTRIES			9
 

                       

#DEFAULT_VOLATILE 

#ENABLE_STACK_CHECKING

INTEGER_PARAMETER  DEVICE_TYPE;//3 for DMPS-300, 2 for DMPS-200, 1 for DMPS 100    
                       

DIGITAL_INPUT KnobLeft;
DIGITAL_INPUT KnobRight;
DIGITAL_INPUT Enter;
DIGITAL_INPUT Menu;
DIGITAL_INPUT VolumeKnobLeft;
DIGITAL_INPUT VolumeKnobRight;
DIGITAL_INPUT PasswordFb;
DIGITAL_INPUT WrongPasswordFb;
DIGITAL_INPUT Start;
DIGITAL_INPUT RegenerateSourceList;
DIGITAL_INPUT RegenerateDestinationList;
DIGITAL_INPUT RegenerateFunctionList;
DIGITAL_INPUT WriteConfig;
DIGITAL_INPUT RestoreDefaultsDone;
DIGITAL_INPUT RestoreAudioDefaultsDone;
DIGITAL_INPUT APADOnline;
DIGITAL_INPUT APADUpgradeStarted;
DIGITAL_INPUT APADUpgradeComplete;
DIGITAL_INPUT atTop;
DIGITAL_INPUT atBottom;
DIGITAL_INPUT InstallerTimeOut;
DIGITAL_INPUT AllowSystemIDChanges;
DIGITAL_INPUT DHCPisEnabled;
DIGITAL_INPUT SoftButton[4];
                      
ANALOG_INPUT ScrollPageSize;
ANALOG_INPUT ConfiguredDevices;
ANALOG_INPUT ConfiguredAPAD;
ANALOG_INPUT ConfiguredC2N;
ANALOG_INPUT ConfiguredCNXB;
ANALOG_INPUT ConfiguredC2NFTB;
ANALOG_INPUT IDDoneFb;
//ANALOG_INPUT SystemType;
ANALOG_INPUT ProgStartUpVolin;
ANALOG_INPUT Progbassin;
ANALOG_INPUT Progtreblein;
ANALOG_INPUT ProgDelayin;
ANALOG_INPUT ProgMinVolin;
ANALOG_INPUT ProgMaxVolin;
ANALOG_INPUT RecStartUpVolin;
ANALOG_INPUT Recbassin;
ANALOG_INPUT Rectreblein;
ANALOG_INPUT RecDelayin;
ANALOG_INPUT RecMinVolin;
ANALOG_INPUT RecMaxVolin;
ANALOG_INPUT SpchStartUpVolin;
ANALOG_INPUT Spchbassin;
ANALOG_INPUT Spchtreblein;
ANALOG_INPUT SpchDelayin;
ANALOG_INPUT SpchMinVolin;
ANALOG_INPUT SpchMaxVolin;
ANALOG_INPUT MasterStartUpVolin;
ANALOG_INPUT Mic1GatingIn;
ANALOG_INPUT Mic2GatingIn;
ANALOG_INPUT Mic3GatingIn;
ANALOG_INPUT Mic4GatingIn;
ANALOG_INPUT Mic5GatingIn;
ANALOG_INPUT Mic6GatingIn;
ANALOG_INPUT Mic1CompressionIn;
ANALOG_INPUT Mic2CompressionIn;
ANALOG_INPUT Mic3CompressionIn;
ANALOG_INPUT Mic4CompressionIn;
ANALOG_INPUT Mic5CompressionIn;
ANALOG_INPUT Mic6CompressionIn;
ANALOG_INPUT Mic1LimiterIn;
ANALOG_INPUT Mic2LimiterIn;
ANALOG_INPUT Mic3LimiterIn;
ANALOG_INPUT Mic4LimiterIn;
ANALOG_INPUT Mic5LimiterIn;
ANALOG_INPUT Mic6LimiterIn;
ANALOG_INPUT PhantomPowerIn;
ANALOG_INPUT ProgramSourceMixIn;
ANALOG_INPUT RecordSourceMixIn;
ANALOG_INPUT SpeechSourceMixIn;
ANALOG_INPUT IPin1;
ANALOG_INPUT IPin2;
ANALOG_INPUT IPin3;
ANALOG_INPUT IPin4;
ANALOG_INPUT BackLightIn;
ANALOG_INPUT FPLockModeIn;
ANALOG_INPUT RoomViewIn;
ANALOG_INPUT RGBPassthruIn;
ANALOG_INPUT SingleIPIn;
ANALOG_INPUT SystemIDIn;
ANALOG_INPUT SystemIDFbIn;
ANALOG_INPUT NumberOfInputs;
ANALOG_INPUT NumberOfOutputs;

STRING_INPUT FrontPanelPassword$[20];
STRING_INPUT SystemInfo1$[48];
STRING_INPUT SystemInfo2$[48];
STRING_INPUT SystemInfo3$[48];
STRING_INPUT SystemInfo4$[48];
STRING_INPUT SystemInfo5$[48];
STRING_INPUT SystemInfo6$[48];
STRING_INPUT SystemInfo7$[48];
STRING_INPUT SystemInfo8$[48];
STRING_INPUT EditedPassword$[20];
STRING_INPUT EditedText$[48];
ANALOG_INPUT SignalTypeIn[MAXINPUTS];
ANALOG_INPUT AudioSignalTypeIn[MAXINPUTS];
ANALOG_INPUT SourceGain[14];
ANALOG_INPUT MicGainIn[6];
STRING_INPUT SourceNameIn$[10][20];
STRING_INPUT AudioSourceNameIn$$[10][20];
STRING_INPUT DestinationNameIn$[10][20];
STRING_INPUT FunctionNameIn$[5][20];

DIGITAL_OUTPUT ExitInstaller;
DIGITAL_OUTPUT EnterButtonFb;
DIGITAL_OUTPUT TextEditKnobLeft;
DIGITAL_OUTPUT TextEditKnobRight;
DIGITAL_OUTPUT TextEditEnter;
DIGITAL_OUTPUT TextEditVolumeKnobLeft;
DIGITAL_OUTPUT TextEditVolumeKnobRight;
DIGITAL_OUTPUT TextEditSoftKey1;
DIGITAL_OUTPUT TextEditSoftKey2;
DIGITAL_OUTPUT TextEditSoftKey3;
DIGITAL_OUTPUT TextEditSoftKey4;
DIGITAL_OUTPUT AudioKnobLeft;
DIGITAL_OUTPUT AudioKnobRight;
DIGITAL_OUTPUT AudioVolumeKnobLeft;
DIGITAL_OUTPUT AudioVolumeKnobRight;
DIGITAL_OUTPUT IPKnobLeft;
DIGITAL_OUTPUT IPKnobRight;
DIGITAL_OUTPUT ScrollUp;
DIGITAL_OUTPUT ScrollDown;
DIGITAL_OUTPUT ScrollLeft;
DIGITAL_OUTPUT ScrollRight;
DIGITAL_OUTPUT TopBottom;
DIGITAL_OUTPUT OOTBFPasswordCorrect;
DIGITAL_OUTPUT PasswordWrong;
DIGITAL_OUTPUT TSIDInit;
DIGITAL_OUTPUT TSIDStart;
DIGITAL_OUTPUT TSIDSetOneID;
DIGITAL_OUTPUT TSIDStopConfig;
DIGITAL_OUTPUT SetMPSId;
DIGITAL_OUTPUT GetErrorLog;
DIGITAL_OUTPUT ClearErrLog;
DIGITAL_OUTPUT ShowProgram;
DIGITAL_OUTPUT ShowHardware;
DIGITAL_OUTPUT ReportCresnet;
DIGITAL_OUTPUT ReportOps;
DIGITAL_OUTPUT RebootCmd;
DIGITAL_OUTPUT GetData;
DIGITAL_OUTPUT RestoreDefaults;
DIGITAL_OUTPUT RestoreAudioDefaults;
DIGITAL_OUTPUT SingleIPOn;
DIGITAL_OUTPUT SingleIPOff;

DIGITAL_OUTPUT FieldToEdit[3];
DIGITAL_OUTPUT DigitalOut[4];

DIGITAL_OUTPUT MicGatingOn[6];
DIGITAL_OUTPUT MicGatingOff[6];
DIGITAL_OUTPUT MicCompressionOn[6];
DIGITAL_OUTPUT MicCompressionOff[6];
DIGITAL_OUTPUT MicLimiterOn[6];
DIGITAL_OUTPUT MicLimiterOff[6];


ANALOG_OUTPUT CurrentMenu;
ANALOG_OUTPUT TSIDToSet;
ANALOG_OUTPUT BacklightConfigured;
ANALOG_OUTPUT FrontPanelConfigured;
//ANALOG_OUTPUT Mic1GatingConfigured;
//ANALOG_OUTPUT Mic2GatingConfigured;
//ANALOG_OUTPUT Mic3GatingConfigured;
//ANALOG_OUTPUT Mic4GatingConfigured;
//ANALOG_OUTPUT Mic5GatingConfigured;
//ANALOG_OUTPUT Mic6GatingConfigured;
//ANALOG_OUTPUT Mic1CompressionConfigured;
//ANALOG_OUTPUT Mic2CompressionConfigured;
//ANALOG_OUTPUT Mic3CompressionConfigured;
//ANALOG_OUTPUT Mic4CompressionConfigured;
//ANALOG_OUTPUT Mic5CompressionConfigured;
//ANALOG_OUTPUT Mic6CompressionConfigured;
//ANALOG_OUTPUT Mic1LimiterConfigured;
//ANALOG_OUTPUT Mic2LimiterConfigured;
//ANALOG_OUTPUT Mic3LimiterConfigured;
//ANALOG_OUTPUT Mic4LimiterConfigured;
//ANALOG_OUTPUT Mic5LimiterConfigured;
//ANALOG_OUTPUT Mic6LimiterConfigured;
ANALOG_OUTPUT PhantomPowerConfigured;
ANALOG_OUTPUT ProgSourceMixConfigured;
ANALOG_OUTPUT ProgMonoModeConfigured;
ANALOG_OUTPUT RecSourceMixConfigured;
ANALOG_OUTPUT SpchSourceMixConfigured;
ANALOG_OUTPUT SpchProgVolConfigured;
ANALOG_OUTPUT RecFixedVariableConfigured;
ANALOG_OUTPUT RGBPassthruModeConfigured;
ANALOG_OUTPUT SourceGainToAdjust;
ANALOG_OUTPUT IPout1;
ANALOG_OUTPUT IPout2;
ANALOG_OUTPUT IPout3;
ANALOG_OUTPUT IPout4;
ANALOG_OUTPUT IPsubmenu;
ANALOG_OUTPUT RoomView;


STRING_OUTPUT CurrentPassword$;
STRING_OUTPUT SourceList$;
STRING_OUTPUT DestinationList$;
STRING_OUTPUT FunctionList$;
STRING_OUTPUT NewSystemInfo1$;
STRING_OUTPUT NewSystemInfo2$;
STRING_OUTPUT NewSystemInfo3$;
STRING_OUTPUT NewSystemInfo4$;
STRING_OUTPUT NewSystemInfo5$;
STRING_OUTPUT NewSystemInfo6$;
STRING_OUTPUT NewSystemInfo7$;
STRING_OUTPUT TSIDType$;
STRING_OUTPUT Line2ScrollArrow$;

//ANALOG_OUTPUT KeypadMap[6];
ANALOG_OUTPUT SignalTypeOut[7];
ANALOG_OUTPUT AudioSignalTypeOut[7];


STRING_OUTPUT SourceNameOut$[10];
STRING_OUTPUT DestinationNameOut$[10];
STRING_OUTPUT FunctionNameOut$[5];
STRING_OUTPUT SoftKey$[4];
STRING_OUTPUT SerialOut$[8];

INTEGER ScrollIndex;
INTEGER ScrollHighlight;
INTEGER ScrollMax;
INTEGER OldScrollIndex;
INTEGER OldAudioScrollIndex;
INTEGER OldProgramAudioScrollIndex;
INTEGER OldRecordAudioScrollIndex;
INTEGER OldSpeechAudioScrollIndex;
INTEGER OldMicScrollIndex;
INTEGER OldInputTrimScrollIndex;
INTEGER	OldNetworkScrollIndex;
INTEGER	OldPrivateNetworkScrollIndex;
INTEGER OldVideoScrollIndex;
INTEGER OldControlScrollIndex;
INTEGER OldInputConfigScrollIndex;
INTEGER OldOutputConfigScrollIndex;
INTEGER OldSigTypeScrollIndex;
INTEGER ProgSourceMixIndex, RecSourceMixIndex, SpchSourceMixIndex;
INTEGER ProgMonoModeIndex, RGBPassthruModeIndex;
INTEGER SpchProgVolIndex;
INTEGER DHCPScrollIndex, WINSScrollIndex;
INTEGER OldWINSScrollIndex, OldDHCPScrollIndex;
INTEGER TypeIndex, BackLightIndex, FrontPanelIndex, RoomViewIndex;
INTEGER RecFixedVariableIndex;
INTEGER SrcGainIndex;
INTEGER MicGainIndex;

INTEGER Semaphore, val1, val2, val3, val4;
INTEGER OldScrollHighlight;
INTEGER EditTextCallingMenu;
INTEGER EditTextSelection;
INTEGER SourceBeingEdited;
INTEGER DestinationBeingEdited;
INTEGER FunctionBeingEdited;
INTEGER SignalTypeBeingEdited;
INTEGER BackLightTypeBeingEdited;
INTEGER ButtonBeingEdited;
INTEGER SourceIndex;
//INTEGER SourceType[10];
//INTEGER DestinationType[10];
//INTEGER FunctionType[10];
INTEGER IDDeviceRoom;
INTEGER IDDeviceType;
INTEGER IDDeviceStep;
INTEGER IDAPAD, IDC2N, IDCNXB, IDC2NFTB;
INTEGER NetworkStep;
INTEGER WaitingForIDFb;
INTEGER IPAsubmenu, IPMsubmenu, DEFRsubmenu;
INTEGER ipa1, ipa2, ipa3, ipa4, ipm1, ipm2, ipm3, ipm4, def1, def2, def3, def4;
INTEGER rv1, rv2, rv3, rv4;
INTEGER ipatemp1, ipatemp2, ipatemp3, ipatemp4;
INTEGER tempipa1, tempipa2, tempipa3, tempipa4;

INTEGER ipmtemp1, ipmtemp2, ipmtemp3, ipmtemp4;
INTEGER deftemp1, deftemp2, deftemp3, deftemp4;
INTEGER rvtemp1, rvtemp2, rvtemp3, rvtemp4;
INTEGER ipaedit1, ipaedit2, ipaedit3, ipaedit4, ipmedit1, ipmedit2, ipmedit3, ipmedit4, defedit1, defedit2, defedit3, defedit4;
INTEGER rvedit1, rvedit2, rvedit3, rvedit4;
INTEGER DHCPIndex, WINSIndex;
INTEGER ipanew1, ipanew2, ipanew3, ipanew4;
INTEGER ipmnew1, ipmnew2, ipmnew3, ipmnew4;
INTEGER defnew1, defnew2, defnew3, defnew4;
INTEGER rvnew1, rvnew2, rvnew3, rvnew4;
INTEGER ipachangeflag, ipmchangeflag, defchangeflag, dhcpchangeflag, winschangeflag, hostchangeflag, domainchangeflag,privatenetworkchangeflag;
INTEGER tempsignaltypeout;
INTEGER global_videoinputselection;
INTEGER global_audioinputselection;

INTEGER dateindex, timeindex;
INTEGER imonth, iday, iyear, ihour, iminutes, iseconds;
INTEGER tempmonth, tempday, tempyear, temphour, tempminutes, tempseconds;
INTEGER displayhour;
INTEGER stars;
INTEGER RestoreDefaultsStep;
INTEGER LastDisplayIndex;

STRING MenuList$[MAINMENUENTRIES][20];
STRING MenuCustomList$[MAINMENUENTRIES][20];
STRING AudioList$[AUDIOMENUENTRIES][20];
STRING Audio100List$[AUDIO100MENUENTRIES][20];
STRING VideoList$[VIDEOMENUENTRIES][20];
STRING VideoCustomList$[1][20];
STRING NetworkList$[NETWORKMENUENTRIES][20];
STRING PrivateNetworkList$[PRIVATENETWORKMENUENTRIES][20];
STRING NetworkCustomList$[NETWORKMENUENTRIES][20];
STRING ControlList$[CONTROLMENUENTRIES][20];
STRING ControlCustomList$[7][20];
STRING AudioProgList$[PROGAUDIOMENUENTRIES][20];
STRING AudioRecList$[RECAUDIOMENUENTRIES][20];
STRING AudioSpchList$[SPCHAUDIOMENUENTRIES][20];
STRING AudioMicList$[MICMENUENTRIES][20];
STRING AudioMic200List$[MIC200MENUENTRIES][20];
STRING AudioMic100List$[MIC100MENUENTRIES][20];


STRING ProgSourceMixList$[PROGSOURCEMIXMENUENTRIES][20];
STRING RecSourceMixList$[RECSOURCEMIXMENUENTRIES][20];
STRING SpchSourceMixList$[SPCHSOURCEMIXMENUENTRIES][20];
STRING SpchProgVolList$[SPCHPROGVOLMENUENTRIES][20];

STRING FixedVariableList$[2][20];
STRING InputCompList$[INPUTCOMP300NUMENTRIES][20];
STRING InputComp200List$[INPUTCOMP200NUMENTRIES][20];
STRING InputComp100List$[INPUTCOMP100NUMENTRIES][20];


STRING ProgMonoList$[PROGMONOMENUENTRIES][20];
STRING Mic1GatingList$[MIC1GATINGMENUENTRIES][20];
STRING Mic2GatingList$[MIC2GATINGMENUENTRIES][20];
STRING Mic3GatingList$[MIC3GATINGMENUENTRIES][20];
STRING Mic4GatingList$[MIC4GATINGMENUENTRIES][20];
STRING Mic5GatingList$[MIC5GATINGMENUENTRIES][20];
STRING Mic6GatingList$[MIC6GATINGMENUENTRIES][20];

STRING Mic1CompressionList$[MIC1COMPRESSIONMENUENTRIES][20];
STRING Mic2CompressionList$[MIC2COMPRESSIONMENUENTRIES][20];
STRING Mic3CompressionList$[MIC3COMPRESSIONMENUENTRIES][20];
STRING Mic4CompressionList$[MIC4COMPRESSIONMENUENTRIES][20];
STRING Mic5CompressionList$[MIC5COMPRESSIONMENUENTRIES][20];
STRING Mic6CompressionList$[MIC6COMPRESSIONMENUENTRIES][20];
STRING Mic1LimiterList$[MIC1LIMITERMENUENTRIES][20];
STRING Mic2LimiterList$[MIC2LIMITERMENUENTRIES][20];
STRING Mic3LimiterList$[MIC3LIMITERMENUENTRIES][20];
STRING Mic4LimiterList$[MIC4LIMITERMENUENTRIES][20];
STRING Mic5LimiterList$[MIC5LIMITERMENUENTRIES][20];
STRING Mic6LimiterList$[MIC6LIMITERMENUENTRIES][20];
STRING PhantomPowerList$[PHANTOMPOWERMENUENTRIES][20];
STRING InputConfigList$[INCONFIGMENUENTRIES][20];
STRING DHCPList$[DHCPMENUENTRIES][20];
STRING WINSList$[WINSMENUENTRIES][20];
STRING SingleIPList$[SINGLEIPMENUENTRIES][20];
STRING RGBPassthruList$[RGBPASSTHRUMENUENTRIES][20];
STRING RoomViewList$[ROOMVIEWMENUENTRIES][20];
STRING Signal1to2TypeList$[SIG1to2TYPEMENUENTRIES][20];
STRING Signal3to4TypeList$[SIG3to4TYPEMENUENTRIES][20];
STRING Signal5to5TypeList$[SIG5to5TYPEMENUENTRIES][20];
STRING AudioSignal1to2TypeList$[AUDIOSIG1to2TYPEMENUENTRIES][20];
STRING AudioSignal3to4TypeList$[AUDIOSIG3to4TYPEMENUENTRIES][20];
STRING AudioSignal5to5TypeList$[AUDIOSIG5to5TYPEMENUENTRIES][20];
STRING BackLightList$[BACKLIGHTMENUENTRIES][20];
STRING FrontPanelList$[2][20];
STRING UpgradeList$[UPGRADEMENUENTRIES][20];
STRING Octet1$[3], Octet2$[3], Octet3$[3], Octet4$[3], ipaddress$[200], ipmask$[200], defrouter$[200];
STRING Tempstring4$[3], Tempstring5$[3], Tempstring6$[48], Tempstring7$[48], Tempstring8$[3];
STRING ipa1$[3], ipa2$[3], ipa3$[3], ipa4$[3];
STRING ipm1$[3], ipm2$[3], ipm3$[3], ipm4$[3];
STRING def1$[3], def2$[3], def3$[3], def4$[3];
STRING KeypadList$[11][10];
STRING DefaultsList$[3][20];
STRING Password$[20];
STRING NewPassword$[20];
STRING OOTBFPassword$[20];
STRING StarPassword$[20];
STRING ampm[2];


FUNCTION CreateSourceList()
	{
	STRING Temp$[255];
	INTEGER i;

	Temp$ = "";
	for(i = 1 to 10)
		Makestring(Temp$, "%s%s,", Temp$, SourceNameIn$[i]);
	SourceList$ = Temp$;
	}

FUNCTION CreateDestinationList()
	{
	STRING Temp$[255];
	INTEGER i;

	Temp$ = "";
	for(i = 1 to 10)
		Makestring(Temp$, "%s%s,", Temp$, DestinationNameIn$[i]);
	DestinationList$ = Temp$;
	}

FUNCTION CreateFunctionList()
	{
	STRING Temp$[255];
	INTEGER i;

	Temp$ = "";
	for(i = 1 to 5)
		Makestring(Temp$, "%s%s,", Temp$, FunctionNameIn$[i]);
	FunctionList$ = Temp$;
	}

FUNCTION CalculateScrollBar(INTEGER Total, INTEGER Index)
	{
	if(Index > 1)
		DigitalOut[1] = 1;
	else
		DigitalOut[1] = 0;
	if(Index < Total)
		DigitalOut[2] = 1;
	else
		DigitalOut[2] = 0;
	}

FUNCTION CalculateLineScrollBar(INTEGER Total, INTEGER Index)
	{
	if ( (Index = 1) && (Total = 1) )
		Line2ScrollArrow$ = ARROWNONE;		
	else if(Index = 1)
		Line2ScrollArrow$ = ARROWDOWN;
	else if(Index = Total)
		Line2ScrollArrow$ = ARROWUP;
	else
		Line2ScrollArrow$ = ARROWUPDOWN;
	}

Function UpdateTime()
{
	if(temphour > 23)
	{
		temphour = 12;
	}

	if(temphour < 12)
 	{
  		if(temphour <> 0)
		{
			displayHour = temphour;
     	}
		else
		{
       		displayHour = 12;
     	}
  	}
	else
	{
	   	if(temphour <> 12)
		{
       		displayhour = temphour - 12;
     	}
    	else
		{
       		displayHour = 12;
     	}
  	}
}

FUNCTION RefreshList(INTEGER Total, INTEGER Index)
	{
		SerialOut$[2] = MenuList$[Index];
		Call CalculateLineScrollBar(Total, Index);

	}         

FUNCTION RefreshAudioList(INTEGER Total, INTEGER Index)
	{
	if (DEVICE_TYPE = 1)
		{
		SerialOut$[2] = Audio100List$[Index];
		}
	else 
		SerialOut$[2] = AudioList$[Index];
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshVideoList(INTEGER Total, INTEGER Index)
	{
//	if( (SystemType = OOTBF) || (SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
//		{
		SerialOut$[2] = VideoList$[Index];
		Call CalculateLineScrollBar(Total, Index);
//		}
/*
	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
		{
		SerialOut$[2] = VideoCustomList$[Index];
		Line2ScrollArrow$ = ARROWNONE;
		}
*/
	}

FUNCTION RefreshNetworkList(INTEGER Total, INTEGER Index)
	{
//	if(SystemType = OOTBF)
//		{
		SerialOut$[2] = NetworkList$[Index];
		Call CalculateLineScrollBar(Total, Index);
/*		}
	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
		{
        SerialOut$[2] = NetworkCustomList$[Index];
		Call CalculateLineScrollBar(Total, Index);
		}
*/
	}
FUNCTION RefreshPrivateNetworkList(INTEGER Total, INTEGER Index)
	{
		if (Index = 1)
			{
			if (SingleIPIn = 0)
				Makestring(SerialOut$[2], "%sOn", PrivateNetworkList$[Index]);
			else if (SingleIPIn = 1)
				Makestring(SerialOut$[2], "%sOff", PrivateNetworkList$[Index]);
			}
		else if (Index = 2)
			Makestring(SerialOut$[2], "%s%i", PrivateNetworkList$[Index],SystemIDFbIn);
		Call CalculateLineScrollBar(Total, Index);
	}


FUNCTION RefreshControlList(INTEGER Total, INTEGER Index)
	{
	//if(SystemType = OOTBF)
		if (0)
		{
		SerialOut$[2] = ControlList$[Index];
		Call CalculateLineScrollBar(Total, Index);
		}
//else if((SystemType = OOTBF)||(SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
else
		{
        SerialOut$[2] = ControlCustomList$[Index];
		Call CalculateLineScrollBar(Total, Index);
		}
	}

FUNCTION RefreshProgAudioOutList(INTEGER Total, INTEGER Index)
	{
    SerialOut$[2] = AudioProgList$[Index];
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshRecAudioOutList(INTEGER Total, INTEGER Index)
	{
    SerialOut$[2] = AudioRecList$[Index];
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshSpchAudioOutList(INTEGER Total, INTEGER Index)
	{
    SerialOut$[2] = AudioSpchList$[Index];
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMicOutList(INTEGER Total, INTEGER Index)
	{
	if (DEVICE_TYPE = 3)
	    SerialOut$[2] = AudioMicList$[Index];
	else if (DEVICE_TYPE = 2)
	    SerialOut$[2] = AudioMic200List$[Index];
	else if (DEVICE_TYPE = 1)
	    SerialOut$[2] = AudioMic100List$[Index];
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshInputCompOutList(INTEGER Total, INTEGER Index)
	{
	if (DEVICE_TYPE = 3)
	    SerialOut$[2] = InputCompList$[Index];
	else if (DEVICE_TYPE = 2)
	    SerialOut$[2] = InputComp200List$[Index];
	else if (DEVICE_TYPE = 1)
	    SerialOut$[2] = InputComp100List$[Index];


	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshDHCPList(INTEGER Total, INTEGER Index)
	{
	if(Index = DHCPIndex)
		Makestring(SerialOut$[2], "*%s", DHCPList$[Index]);
	else
		Makestring(SerialOut$[2], " %s", DHCPList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshWINSList(INTEGER Total, INTEGER Index)
	{
	if(Index = WINSIndex)
		Makestring(SerialOut$[2], "*%s", WINSList$[Index]);
	else
		Makestring(SerialOut$[2], " %s", WINSList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshSingleIPList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		Makestring(SerialOut$[2], "*%s", SingleIPList$[Index]);
	else
		Makestring(SerialOut$[2], " %s", SingleIPList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}


FUNCTION RefreshRGBPassthruList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		Makestring(SerialOut$[2], "*%s", RGBPassthruList$[Index]);
	else
		Makestring(SerialOut$[2], " %s", RGBPassthruList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshSourceList(INTEGER Total, INTEGER Index)
	{
	if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);
	else if (DEVICE_TYPE = 1)
			Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index+1]);
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshSourceTypeList(INTEGER Total, INTEGER Index)
	{

	if (DEVICE_TYPE = 3)
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);

	else  if (DEVICE_TYPE = 2)
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);

	else if (DEVICE_TYPE = 1)
		{
		// For DMPS-100-C, inputs 1-4 are internally mapped to 2-5
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index+1]);
		}




	//print("Source name = %s \n Index = %d \n",SourceNameIn$[Index],Index);

	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshAudioSourceTypeList(INTEGER Total, INTEGER Index)
	{
 
	if (DEVICE_TYPE = 3)
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);

	else  if (DEVICE_TYPE = 2)
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);

	else if (DEVICE_TYPE = 1)
		{
		// For DMPS-100-C, inputs 1-4 are internally mapped to 2-5
		Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index+1]);
		}

//	Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[Index]);
	//print("Source name = %s \n Index = %d \n",AudioSourceNameIn$[Index],Index);

	Call CalculateLineScrollBar(Total, Index);
	}


Function RefreshSignal1to2TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if ((DEVICE_TYPE = 3) || (DEVICE_TYPE = 2))
		{
		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s %i", Signal1to2TypeList$[Index],global_videoinputselection);
			}
		else
			{
			Makestring(SerialOut$[2], " %s %i", Signal1to2TypeList$[Index],global_videoinputselection);
			}
		}
	else if (DEVICE_TYPE = 1)
		{
        if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s %i", Signal1to2TypeList$[Index],global_videoinputselection-1);
			}
		else
			{
			Makestring(SerialOut$[2], " %s %i", Signal1to2TypeList$[Index],global_videoinputselection-1);
			}
		}



	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshAudioSignal1to2TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if (Index = 1)
		{
		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s", AudioSignal1to2TypeList$[Index]);
			}
		else
			{
			Makestring(SerialOut$[2], " %s", AudioSignal1to2TypeList$[Index]);
			}
		}
	else
		{
		if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", AudioSignal1to2TypeList$[Index],global_audioinputselection);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", AudioSignal1to2TypeList$[Index],global_audioinputselection);
				}
			}
		else if (DEVICE_TYPE = 1)
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", AudioSignal1to2TypeList$[Index],global_audioinputselection-1);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", AudioSignal1to2TypeList$[Index],global_audioinputselection-1);
				}
			}

		}
	Call CalculateLineScrollBar(Total, Index);
	}


Function RefreshSignal3to4TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if (Index = 1)
		{	

		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s", Signal3to4TypeList$[Index]);
			}
		else
			{
			Makestring(SerialOut$[2], " %s", Signal3to4TypeList$[Index]);
			}
		}
	else
		{
		if ((DEVICE_TYPE = 3) || (DEVICE_TYPE =2))
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", Signal3to4TypeList$[Index],global_videoinputselection);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", Signal3to4TypeList$[Index],global_videoinputselection);
				}
			}
		else if (DEVICE_TYPE = 1)
			{
            if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", Signal3to4TypeList$[Index],global_videoinputselection-1);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", Signal3to4TypeList$[Index],global_videoinputselection-1);
				}

			}

		}
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshAudioSignal3to4TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{

	if (Index = 1)
		{
		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s", AudioSignal3to4TypeList$[Index]);
			}
		else
			{
			Makestring(SerialOut$[2], " %s", AudioSignal3to4TypeList$[Index]);
			}
		}
	else
		{
		if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
			{
				if(Index = Highlight)
				{
					Makestring(SerialOut$[2], "*%s %i", AudioSignal3to4TypeList$[Index],global_audioinputselection);
				}
				else
				{
					Makestring(SerialOut$[2], " %s %i", AudioSignal3to4TypeList$[Index],global_audioinputselection);
				}
			}
		else if (DEVICE_TYPE = 1)
			{
				if(Index = Highlight)
				{
					Makestring(SerialOut$[2], "*%s %i", AudioSignal3to4TypeList$[Index],global_audioinputselection-1);
				}
				else
				{
					Makestring(SerialOut$[2], " %s %i", AudioSignal3to4TypeList$[Index],global_audioinputselection-1);
				}
			}

         }
	Call CalculateLineScrollBar(Total, Index);
	}


Function RefreshSignal5to5TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if ( (Index = 1) || (Index = 4) )
		{
		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s", Signal5to5TypeList$[Index]);
			}
		else
			{
			Makestring(SerialOut$[2], " %s", Signal5to5TypeList$[Index]);
			}
		}
	else
		{
		if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2))
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", Signal5to5TypeList$[Index], global_videoinputselection);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", Signal5to5TypeList$[Index],global_videoinputselection);
				}
             }
		else if (DEVICE_TYPE = 1)
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", Signal5to5TypeList$[Index], global_videoinputselection-1);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", Signal5to5TypeList$[Index],global_videoinputselection-1);
				}
             }


		}

	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshAudioSignal5to5TypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if ( (Index = 1) || (Index = 4) )
		{
		if(Index = Highlight)
			{
			Makestring(SerialOut$[2], "*%s", AudioSignal5to5TypeList$[Index]);
			}
		else
			{
			Makestring(SerialOut$[2], " %s", AudioSignal5to5TypeList$[Index]);
			}
		}
	else
		{
		if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
			{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", AudioSignal5to5TypeList$[Index],global_audioinputselection);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", AudioSignal5to5TypeList$[Index],global_audioinputselection);
				}
			}
		else if (DEVICE_TYPE = 1)
		{
			if(Index = Highlight)
				{
				Makestring(SerialOut$[2], "*%s %i", AudioSignal5to5TypeList$[Index],global_audioinputselection-1);
				}
			else
				{
				Makestring(SerialOut$[2], " %s %i", AudioSignal5to5TypeList$[Index],global_audioinputselection-1);
				}
			}


		}
	Call CalculateLineScrollBar(Total, Index);
	}



FUNCTION RefreshRoomViewList(INTEGER Total, INTEGER Index, INTEGER HighLight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", RoomViewList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", RoomViewList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshBackLightTypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", BackLightList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", BackLightList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshFrontPanelTypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", FrontPanelList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", FrontPanelList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshProgSourceMixList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", ProgSourceMixList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", ProgSourceMixList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshRecSourceMixList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", RecSourceMixList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", RecSourceMixList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshSpchSourceMixList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", SpchSourceMixList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", SpchSourceMixList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshSpchProgVolList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", SpchProgVolList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", SpchProgVolList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic1GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic1GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic1GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic2GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic2GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic2GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}
FUNCTION RefreshMic3GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic3GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic3GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}
FUNCTION RefreshMic4GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic4GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic4GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}
FUNCTION RefreshMic5GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic5GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic5GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}
FUNCTION RefreshMic6GatingList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic6GatingList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic6GatingList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}



FUNCTION RefreshMic1CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic1CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic1CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}


FUNCTION RefreshMic2CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic2CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic2CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic3CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic3CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic3CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic4CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic4CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic4CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic5CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic5CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic5CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}
 
FUNCTION RefreshMic6CompressionList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic6CompressionList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic6CompressionList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}


FUNCTION RefreshMic1LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic1LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic1LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}


FUNCTION RefreshMic2LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic2LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic2LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic3LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic3LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic3LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic4LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic4LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic4LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic5LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic5LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic5LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshMic6LimiterList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", Mic6LimiterList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", Mic6LimiterList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}





FUNCTION RefreshPhantomPowerList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", PhantomPowerList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", PhantomPowerList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}



FUNCTION RefreshProgMonoTypeList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", ProgMonoList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", ProgMonoList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

FUNCTION RefreshRecFixedVariableList(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	if(Index = Highlight)
		{
		Makestring(SerialOut$[2], "*%s", FixedVariableList$[Index]);
		}
	else
		{
		Makestring(SerialOut$[2], " %s", FixedVariableList$[Index]);
		}
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshDestinationList(INTEGER Total, INTEGER Index)
	{
	if (DEVICE_TYPE = 3)
		Makestring(SerialOut$[2], " %d:%s", Index, DestinationNameIn$[Index]);
	else if (DEVICE_TYPE = 2)
		{
		if (Index = 2)
			Makestring(SerialOut$[2], " %d:%s", Index, DestinationNameIn$[Index+1]);
		else
			Makestring(SerialOut$[2], " %d:%s", Index, DestinationNameIn$[Index]);
		}
	else if (DEVICE_TYPE = 1)
		Makestring(SerialOut$[2], " %d:%s", Index, DestinationNameIn$[Index]);

	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshFunctionList(INTEGER Total, INTEGER Index)
	{
	Makestring(SerialOut$[2], " %d:%s", Index, FunctionNameIn$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}
/*
Function RefreshKeypadList(INTEGER Total, INTEGER Index)
	{
	Makestring(SerialOut$[2], " %d:%s", Index, SourceNameIn$[KeypadMap[Index]]);
	//Call CalculateLineScrollBar(Total, Index);
	}
*/

Function RefreshDefaultsList(INTEGER Total, INTEGER Index)
	{
	Makestring(SerialOut$[2], "%s", DefaultsList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshKeypadSelection(INTEGER Total, INTEGER Index)
	{
	Makestring(SerialOut$[2], "%s", KeypadList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

Function RefreshUpgradeSelection(INTEGER Total, INTEGER Index)
	{
	Makestring(SerialOut$[2], "%s", UpgradeList$[Index]);
	Call CalculateLineScrollBar(Total, Index);
	}

Function SelectIPAddress(INTEGER Octet)
   {
	if(	DHCPisEnabled = 1)
		{
        Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
		}
	
	else if(Octet = 1)
		{
		Makestring(SoftKey$[1], "[%03d]", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
		}
	else if(Octet = 2)
		{
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], "[%03d]", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
		}
	else if(Octet = 3)
		{
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], "[%03d]", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
		}
	else if(Octet = 4)
		{
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], "[%03d]", ipatemp4);
		}
   	}

Function SelectIPMask(INTEGER Octet)
   {
	if(	DHCPisEnabled = 1)
		{
        Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
		}


	else if(Octet = 1)
		{
		Makestring(SoftKey$[1], "[%03d]", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
		}
	else if(Octet = 2)
		{
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], "[%03d]", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
		}
	else if(Octet = 3)
		{
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], "[%03d]", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
		}
	else if(Octet = 4)
		{
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], "[%03d]", ipmtemp4);
		}
   	}

Function SelectDefRouter(INTEGER Octet)
   {
	if(	DHCPisEnabled = 1)
		{
        Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
		}

	else if(Octet = 1)
		{
		Makestring(SoftKey$[1], "[%03d]", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
		}
	else if(Octet = 2)
		{
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], "[%03d]", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
		}
	else if(Octet = 3)
		{
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], "[%03d]", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
		}
	else if(Octet = 4)
		{
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], "[%03d]", deftemp4);
		}
   	}

Function InitNameSourceMenu(INTEGER Selection)
	{
   	SerialOut$[1] = SourceNameIn$[Selection];
   	SerialOut$[2] = " DEL  INS   <    >";
   	SourceBeingEdited = Selection;
   	CurrentMenu = MENUEDITTEXT;
	EditTextCallingMenu = MENUINPUT;
   	EditTextSelection = Selection;
   	Selection = 1;
   	FieldToEdit[Selection] = 1;
   	FieldToEdit[Selection] = 0;
   	DigitalOut[1] = 0;
    DigitalOut[2] = 0;
    }

Function InitSignalTypeMenu(INTEGER Selection)
	{

	if  (DEVICE_TYPE = 1)
		{
		   	Makestring(SerialOut$[1], "Select Input %d Type", Selection-1);//display to end user that we are starting at input1
		}

	else   
	   	Makestring(SerialOut$[1], "Select Input %d Type", Selection);
   	SignalTypeBeingEdited = Selection;

	if ((selection = 1) || (selection=2))
		{
			CurrentMenu = MENUEDITSIGNAL1TO2TYPE;
			Call RefreshSignal1to2TypeList(ScrollMax, 1, 1);
			Line2ScrollArrow$ = ARROWNONE;
       	}
    else if ((selection >= 3) && (selection <=4))
    	{
    		CurrentMenu = MENUEDITSIGNAL3to4TYPE;
			Call RefreshSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			
    	}
    else if ((selection >= 5) && (selection <=5))
    	{
    		CurrentMenu = MENUEDITSIGNAL5to5TYPE;
			Call RefreshSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
    	}
	
    }

Function InitAudioSignalTypeMenu(INTEGER Selection)
	{
	
	if  (DEVICE_TYPE = 1)
	   	Makestring(SerialOut$[1], "Select Input %d Type", Selection-1);
	else
        Makestring(SerialOut$[1], "Select Input %d Type", Selection);

   	SignalTypeBeingEdited = Selection;

	if ((selection = 1) || (selection=2))
		{
			CurrentMenu = MENUEDITAUDIOSIGNAL1TO2TYPE;
			Call RefreshAudioSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);//input # known
       	}
    else if ((selection >= 3) && (selection <=4))
    	{
    		CurrentMenu = MENUEDITAUDIOSIGNAL3to4TYPE;
			Call RefreshAudioSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
    	}
    else if ((selection >= 5) && (selection <=5))
    	{
    		CurrentMenu = MENUEDITAUDIOSIGNAL5to5TYPE;
			Call RefreshAudioSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
    	}

    }



Function InitNameDestinationMenu(INTEGER Selection)
	{
   	SerialOut$[1] = DestinationNameIn$[Selection];
   	SerialOut$[2] = " DEL  INS   <    >";
   	DestinationBeingEdited = Selection;
   	CurrentMenu = MENUEDITTEXT;
	EditTextCallingMenu = MENUOUTPUT;
   	EditTextSelection = Selection;
   	Selection = 1;
   	FieldToEdit[Selection] = 1;
   	FieldToEdit[Selection] = 0;
   	DigitalOut[1] = 0;
    DigitalOut[2] = 0;
    }

Function InitHostNameMenu(INTEGER Selection)
	{
	SerialOut$[1] = TempString6$;
   	SerialOut$[2] = " DEL  INS   <    >";
   	CurrentMenu = MENUEDITTEXT;
	EditTextCallingMenu = MENUHOSTNAME;
   	EditTextSelection = Selection;
   	Selection = 1;
   	FieldToEdit[Selection] = 1;
   	FieldToEdit[Selection] = 0;
   	DigitalOut[1] = 0;
    DigitalOut[2] = 0;
    }

Function InitDomainNameMenu(INTEGER Selection)
	{
	SerialOut$[1] = Tempstring7$;
   	SerialOut$[2] = " DEL  INS   <    >";
   	CurrentMenu = MENUEDITTEXT;
	EditTextCallingMenu = MENUDOMAINNAME;
   	EditTextSelection = Selection;
   	Selection = 1;
   	FieldToEdit[Selection] = 1;
   	FieldToEdit[Selection] = 0;
   	DigitalOut[1] = 0;
    DigitalOut[2] = 0;
    }

Function InitFunctionNameMenu(INTEGER Selection)
	{
   	SerialOut$[1] = FunctionNameIn$[Selection];
   	SerialOut$[2] = " DEL  INS   <    >";
   	FunctionBeingEdited = Selection;
   	CurrentMenu = MENUEDITTEXT;
	EditTextCallingMenu = MENUFUNCTION;
   	EditTextSelection = Selection;
   	Selection = 1;
   	FieldToEdit[Selection] = 1;
   	FieldToEdit[Selection] = 0;
   	DigitalOut[1] = 0;
    DigitalOut[2] = 0;
    }

/*
Function InitConfigKeypadsMenu(INTEGER Selection)
	{
	Makestring(SerialOut$[1], "Select Button %d Src", Selection);
   	ButtonBeingEdited = Selection;
   	CurrentMenu = MENUEDITKEYPADS;
   	if(KeypadMap[ButtonBeingEdited] > 0)
    	Makestring(SerialOut$[2], "[%s]", SourceNameIn$[KeypadMap[ButtonBeingEdited]]);
    else
    	SerialOut$[2] = "[Not Used]";
    SourceIndex = KeypadMap[ButtonBeingEdited];
   	}
*/

Function RefreshMainMenu()
	{
//	if(SystemType = OOTBF)
//		{
		CurrentMenu = MENUMAIN;
		EnterButtonFb = 1;
		SerialOut$[1] = "     Setup Menu";
		ScrollIndex = OldScrollIndex;
		ScrollMax = MAINMENUENTRIES;
		Call RefreshList(ScrollMax, ScrollIndex);
/*		}
	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
		{
        CurrentMenu = MENUMAIN;
		EnterButtonFb = 1;
		SerialOut$[1] = "     Setup Menu";
		ScrollIndex = OldScrollIndex;
		ScrollMax = MAINMENUENTRIES;
		Call RefreshList(ScrollMax, ScrollIndex);
		}
*/
	}

Function RefreshAudioMenu()
	{
	CurrentMenu = MENUAUDIO;
	EnterButtonFb = 1;
	SerialOut$[1] = "    Audio Setup";
	ScrollIndex = OldAudioScrollIndex;
	if (DEVICE_TYPE = 1)
		ScrollMax = AUDIOMENUENTRIES-1;
	else
		ScrollMax = AUDIOMENUENTRIES;
	Call RefreshAudioList(ScrollMax, ScrollIndex);
    }

Function RefreshMicMenu()
	{
	CurrentMenu = MENUMICROPHONE;
	EnterButtonFb = 1;
	SerialOut$[1] = "    Microphones";
	ScrollIndex = OldMicScrollIndex;

	//Set Legth Based on which DMPS model
	if (DEVICE_TYPE = 3)
	{
	ScrollMax = MICMENUENTRIES;
	}
	else if (DEVICE_TYPE = 2)
	{
    ScrollMax = MIC200MENUENTRIES;
	}

	else if (DEVICE_TYPE = 1)
	{
    ScrollMax = MIC100MENUENTRIES;
	}

	Call RefreshMicOutList(ScrollMax, ScrollIndex);
    }

Function RefreshProgAudioMenu()
	{
	CurrentMenu = MENUPROGRAM;
	EnterButtonFb = 1;
	SerialOut$[1] = "   Program Output";
	ScrollIndex = OldProgramAudioScrollIndex;
	ScrollMax = PROGAUDIOMENUENTRIES;
	Call RefreshProgAudioOutList(ScrollMax, ScrollIndex);
    }

Function RefreshRecAudioMenu()
	{
	CurrentMenu = MENURECORD;
	EnterButtonFb = 1;
	SerialOut$[1] = "   Aux. 1 Output";
	ScrollIndex = OldRecordAudioScrollIndex;
	ScrollMax = RECAUDIOMENUENTRIES;
	Call RefreshRecAudioOutList(ScrollMax, ScrollIndex);
	}

Function RefreshSpchAudioMenu()
	{
	CurrentMenu = MENUSPEECH;
	EnterButtonFb = 1;
	SerialOut$[1] = "  Aux. 2 Output";
	ScrollIndex = OldSpeechAudioScrollIndex;
	ScrollMax = SPCHAUDIOMENUENTRIES;
	Call RefreshSpchAudioOutList(ScrollMax, ScrollIndex);
	}

Function RefreshInputTrimMenu()
	{
	CurrentMenu = MENUINPUTTRIM;
	EnterButtonFb = 1;
	SerialOut$[1] = " Input Compensation";



	ScrollIndex = OldInputTrimScrollIndex;
	if (DEVICE_TYPE = 3)
		ScrollMax = INPUTCOMP300NUMENTRIES;
	else if (DEVICE_TYPE = 2)
		ScrollMax = INPUTCOMP200NUMENTRIES;
	else if (DEVICE_TYPE = 1)
		ScrollMax = INPUTCOMP100NUMENTRIES;

	 

	Call RefreshInputCompOutList(ScrollMax, ScrollIndex);
    }

Function RefreshVideoMenu()
	{
	CurrentMenu = MENUVIDEO;
	EnterButtonFb = 1;
	SerialOut$[1] = "    Video Setup";
	ScrollIndex = OldVideoScrollIndex;

//	if(SystemType = OOTBF)
		ScrollMax = VIDEOMENUENTRIES;
//	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
//		ScrollMax = 1;

	Call RefreshVideoList(ScrollMax, ScrollIndex);
    }

Function RefreshSigTypeMenu()
	{
	CurrentMenu = MENUSIGNALTYPE;
	EnterButtonFb = 1;
	SerialOut$[1] = "  Sel. Input Type";
	ScrollIndex = OldSigTypeScrollIndex;

	if (DEVICE_TYPE = 3)
		ScrollMax = 5;//Don't scroll to Input 6 and Input 7 (DM)

	else if (DEVICE_TYPE = 2)
		ScrollMax = 5;//Don't scroll to Input 6 and Input 7 (DM)
	else if (DEVICE_TYPE = 1)
		ScrollMax = 4;	//Don't scroll to Input 6 and Input 7 (DM)& 
					

	Call RefreshSourceTypeList(ScrollMax, ScrollIndex);
    }


Function RefreshAudioSigTypeMenu()
	{
	CurrentMenu = MENUAUDIOSIGNALTYPE;
	EnterButtonFb = 1;
	SerialOut$[1] = "  Sel. Input Type";
	ScrollIndex = OldSigTypeScrollIndex;
	if (DEVICE_TYPE = 3)
		ScrollMax = 5;//Don't scroll to Input 6 and Input 7 (DM)

	else if (DEVICE_TYPE = 2)
		ScrollMax = 5;//Don't scroll to Input 6 and Input 7 (DM)
	else if (DEVICE_TYPE = 1)
		ScrollMax = 4;	//Don't scroll to Input 6 and Input 7 (DM)& 



	Call RefreshAudioSourceTypeList(ScrollMax, ScrollIndex);
    }





Function RefreshNetworkMenu()
	{
//	if(SystemType = OOTBF)
//		{
		CurrentMenu = MENUNETWORK;
		EnterButtonFb = 1;
		SerialOut$[1] = "   Network Setup";
		ScrollIndex = OldNetworkScrollIndex;
		ScrollMax = NETWORKMENUENTRIES;
		Call RefreshNetworkList(ScrollMax, ScrollIndex);
/*		}
	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
		{
        CurrentMenu = MENUNETWORK;
		EnterButtonFb = 1;
		SerialOut$[1] = "   Network Setup";
		ScrollIndex = OldNetworkScrollIndex;
		ScrollMax = 8;
		Call RefreshNetworkList(ScrollMax, ScrollIndex);
		}
*/
    }

Function RefreshControlMenu()
	{
	//if(SystemType = OOTBF)
	if (0)
		{
		CurrentMenu = MENUCONTROL;
		EnterButtonFb = 1;
		SerialOut$[1] = "   Control Setup";
		ScrollIndex = OldControlScrollIndex;
		ScrollMax = CONTROLMENUENTRIES;
		Call RefreshControlList(ScrollMax, ScrollIndex);
		}
//	else if((SystemType = OOTBF) || (SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
	else
		{
        CurrentMenu = MENUCONTROL;
		EnterButtonFb = 1;
		SerialOut$[1] = "   Control Setup";
		ScrollIndex = OldControlScrollIndex;
		ScrollMax = 7;
		Call RefreshControlList(ScrollMax, ScrollIndex);
		}
    }

Function DrawPasswordPage()
	{
	CurrentMenu = MENUPASSWORD;
	SerialOut$[6] = "  Enter Password:";
	SerialOut$[7] = "";
	EnterButtonFb = 1;
	FieldToEdit[2] = 1;
   	FieldToEdit[2] = 0;
	}

Function DrawKeypadSelectPage(INTEGER Room)
	{
	IDDeviceStep = 2;
	EnterButtonFb = 1;
	SerialOut$[1] = " Select device type";
	ScrollIndex = 1;
	ScrollMax = 7;
	Call RefreshKeypadSelection(ScrollMax, ScrollIndex);
	}

Function DeviceConfiguredDone()
{
	SerialOut$[1] = "       Device";
    SerialOut$[2] = "already configured.";
	delay(100);
	Call DrawKeypadSelectPage(IDDeviceRoom);
}

Function RefreshPrivateNetworkMenu()
	{
		CurrentMenu = MENUPRIVATENETWORK;
		EnterButtonFb = 1;
		SerialOut$[1] = "Private Network Mode";
		ScrollIndex = OldPrivateNetworkScrollIndex;
		ScrollMax = PRIVATENETWORKMENUENTRIES;
		Call RefreshPrivateNetworkList(ScrollMax, ScrollIndex);


	}



/*
Function EditKeypadDone()
	{
	INTEGER i;

   	KeypadMap[ButtonBeingEdited] = SourceIndex;
   	for(i = 1 to 6)
   		{
   		if(i <> ButtonBeingEdited)
   			{
   			if(KeypadMap[i] = SourceIndex)
   				KeypadMap[i] = 0;
   			}
   		}
   	CurrentMenu = MENUCONFIGKEYPADS;
	SerialOut$[1] = "Select Button To Map";
	Call RefreshKeypadList(ScrollMax, ScrollIndex);
	}
*/

Function WaitForKeypress()
	{
	wait(12000, KeypadIDWait)
    	{
    	WaitingForIDFb = 0;
    	IDDeviceStep = 4;
    	SerialOut$[1] = " Device not found.";
    	SerialOut$[2] = "     Try again";
    	Call CalculateScrollBar(2, 1);
    	}
	}

Function AbortTSID()
	{
	TSIDStopConfig = 1;
	TSIDStopConfig = 0;
	Call RefreshControlMenu();
	}

STRING_FUNCTION Center(STRING Input$)
	{
	STRING Offset$[MAXFIELDLENGTH];
	STRING New$[MAXFIELDLENGTH];
	INTEGER Offset;
	INTEGER i;

	Offset$ = "";
	if(len(Input$) < MAXFIELDLENGTH)
		{
		Offset = (MAXFIELDLENGTH - len(Input$)) / 2;
		if(Offset > 0)
			{
			for(i = 1 to Offset)
				{
				Offset$ = Offset$ + " ";
				}
			}
		New$ = Offset$ + Input$;
		}
	else
		{
		New$ = left(Input$, MAXFIELDLENGTH);
		}
	return(New$);
	}

STRING_FUNCTION AddSignedNumber(SIGNED_INTEGER LowerLimit, SIGNED_INTEGER UpperLimit, SIGNED_INTEGER Value)
	{
	STRING Temp$[3];

	Makestring(Temp$, "%d", Value);
	if((Value s< UpperLimit) && (Value s> LowerLimit))
		Line2ScrollArrow$ = ARROWUPDOWN;
	else if(Value = LowerLimit)
		Line2ScrollArrow$ = ARROWUP;
	else if(Value = UpperLimit)
		Line2ScrollArrow$ = ARROWDOWN;
	else
		Line2ScrollArrow$ = ARROWNONE;
	return(Temp$);
	}

STRING_FUNCTION AddUnSignedNumber(INTEGER LowerLimit, INTEGER UpperLimit, INTEGER Value)
	{
	STRING Temp$[3];

	Makestring(Temp$, "%d", Value);
	if((Value < UpperLimit) && (Value > LowerLimit))
		Line2ScrollArrow$ = ARROWUPDOWN;
	else if(Value = LowerLimit)
		Line2ScrollArrow$ = ARROWUP;
	else if(Value = UpperLimit)
		Line2ScrollArrow$ = ARROWDOWN;
	else
		Line2ScrollArrow$ = ARROWNONE;
	return(Temp$);
	}

FUNCTION RefreshGainDisplay(INTEGER Index, SIGNED_INTEGER Value, INTEGER DisplayIndex)
	{
	//Index is physical index; DisplayIndex is the input # displayed to user.
	STRING Temp$[18];

    EnterButtonFb = 1;
	if (DisplayIndex = 0)
			DisplayIndex = LastDisplayIndex;
	else
			LastDisplayIndex = DisplayIndex;

//	if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
		if ( (Index >=1) && (Index<=5) )
			{
	    	Makestring(SerialOut$[1], "Analog In %d Comp.", DisplayIndex);
			Temp$ = AddSignedNumber(-10, 10, Value);
		   	Makestring(SerialOut$[2], "        %sdB", Temp$);
			}
		else if (Index = 6)
			{
        	 Makestring(SerialOut$[1], "SPDIF In Comp.");
			Temp$ = AddSignedNumber(-10, 10, Value);
		   	Makestring(SerialOut$[2], "        %sdB", Temp$);

			}
		else if ( (Index >=8) && (Index<=12) )
			{
	    	Makestring(SerialOut$[1], "HDMI In %d Comp.", DisplayIndex);
			Temp$ = AddSignedNumber(-10, 10, Value);
		   	Makestring(SerialOut$[2], "        %sdB", Temp$);
			}
		else if ( (Index >=13) && ( Index<=14) )
			{
	    	Makestring(SerialOut$[1], "  DM In %d Comp.", DisplayIndex);
			Temp$ = AddSignedNumber(-10, 10, Value);
		   	Makestring(SerialOut$[2], "        %sdB", Temp$);
			}

    

		SourceGainToAdjust = Index;


	}

FUNCTION RefreshMicGainDisplay(INTEGER Index, INTEGER Value)
	{
	STRING Temp$[18];

    EnterButtonFb = 1;
	Makestring(SerialOut$[1], "     Mic %d Gain", Index);
	Temp$ = AddUnSignedNumber(0, 100, Value);
	Makestring(SerialOut$[2], "        %s%%", Temp$);
	}

FUNCTION RefreshSystemIDDisplay (INTEGER Value)
	{
	STRING Temp$[18];
        
	if (AllowSystemIDChanges = 0)
		{
		Makestring(SerialOut$[1], " Setting System ID");
		Temp$ = AddUnSignedNumber(0, 64, Value);
		Makestring(SerialOut$[2], "        %s% ", Temp$);
        Line2ScrollArrow$ = ARROWNONE;
		}
	else
		{
	    EnterButtonFb = 1;
		Makestring(SerialOut$[1], "   Set System ID  ");
		Temp$ = AddUnSignedNumber(0, 64, Value);
		Makestring(SerialOut$[2], "        %s% ", Temp$);
		}
	}




FUNCTION RefreshSignedDisplay(SIGNED_INTEGER LowerLimit, SIGNED_INTEGER UpperLimit, SIGNED_INTEGER Value)
	{
	STRING Temp$[18];

    EnterButtonFb = 1;
    Temp$ = AddSignedNumber(LowerLimit, UpperLimit, Value);
   	Makestring(SerialOut$[2], "        %sdB", Temp$);
	}

FUNCTION RefreshUnSignedDisplay(INTEGER LowerLimit, INTEGER UpperLimit, INTEGER Value)
	{
	STRING Temp$[18];

    EnterButtonFb = 1;
    Temp$ = AddUnSignedNumber(LowerLimit, UpperLimit, Value);
   	Makestring(SerialOut$[2], "        %s%%", Temp$);
	}

Function WriteConfigFile()
	{
	SIGNED_INTEGER Error;
	SIGNED_INTEGER File;
	STRING Tempstring$[255];

	Error = startfileoperations();
	if(Error < 0)
		{
		Print("Notice %d: Could not write config to file.\n", Error);
		}
	else
		{
       	Error = SetCurrentDirectory("\\NVRAM");
   		if (Error <> 0)
       		Print("Notice: Couldn't change directory: %d\n", Error);
		File = FileOpen("System Configuration.txt",_O_RDWR | _O_CREAT | _O_TRUNC | _O_TEXT);
		If (File < 0)
			{
			Print("Notice: Could not find configuration file: %d\n ... generating default file", File);
			}
		Else
    		{
			Makestring(TempString$, "FrontPanelPassword = %s\n", OOTBFPassword$);
    		filewrite(File, TempString$, len(TempString$));
			Makestring(TempString$, "FrontPanel = %d\n", FrontPanelConfigured);
    		filewrite(File, TempString$, len(TempString$));
			Makestring(TempString$, "RoomView = %d\n", RoomView);
    		filewrite(File, TempString$, len(TempString$));
    		MakeString(TempString$, "Backlight = %d\n", BacklightConfigured);
    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "ProgramSourceMix = %d\n", ProgSourceMixConfigured);
    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "RecordSourceMix = %d\n", RecSourceMixConfigured);
    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "SpeechSourceMix = %d\n", SpchSourceMixConfigured);
    		filewrite(File, TempString$, len(TempString$));
//			MakeString(TempString$, "ProgramMonoMode = %d\n", ProgMonoModeConfigured);
//    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "SpchProgVolume = %d\n", SpchProgVolConfigured);
    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "RecFixedVariable = %d\n", RecFixedVariableConfigured);
    		filewrite(File, TempString$, len(TempString$));
			MakeString(TempString$, "RGBPassthruMode = %d\n", RGBPassthruModeConfigured);
    		filewrite(File, TempString$, len(TempString$));
    		}
    	FileClose(File);
    	}
    endfileoperations();
	}

INTEGER_Function ReadConfigFile()
	{
	SIGNED_INTEGER Error;
	SIGNED_INTEGER File;
	INTEGER Success;
	INTEGER Marker;
	STRING TempIn$[255];
	STRING ReadIn$[255];
	STRING Read$[200];

	Success = 0;
	Error = startfileoperations();
	File = FileOpen("\\NVRAM\\System Configuration.txt",_O_RDONLY | _O_TEXT);
	if(File >= 0)
		{
		Success = 1;
		TempIn$ = "";
		ReadIn$ = "";
		While(FileEOF(File) = 0)
			{
			Error = FileRead(File, Read$, 100);
			ReadIn$ = ReadIn$ + Read$;
			if(Error >= 0)
				{
				while(find("\x0D\x0A", ReadIn$) > 0)
					{
					TempIn$ = remove("\x0D\x0A", ReadIn$);
					if(find("FrontPanelPassword = ", TempIn$) > 0)
						{
						Marker = find("=", TempIn$);
						OOTBFPassword$ = mid(TempIn$, Marker + 2, len(TempIn$) - Marker - 3);
						CurrentPassword$ = OOTBFPassword$;
						}
					else if(find("FrontPanel = ", TempIn$) > 0)
						{
						FrontPanelConfigured = atoi(TempIn$);
						FrontPanelIndex = atoi(TempIn$);
						}
					else if(find("RoomView = ", TempIn$) > 0)
						{
						RoomView = atoi(TempIn$);
						RoomViewIndex = atoi(TempIn$);
						}
					else if(find("Backlight = ", TempIn$) > 0)
						{
						BackLightConfigured = atoi(TempIn$);
						BackLightIndex =  atoi(TempIn$);
						}
					else if(find("ProgramSourceMix = ", TempIn$) > 0)
						{
						ProgSourceMixConfigured = atoi(TempIn$);
						ProgSourceMixIndex =  atoi(TempIn$);
						}
					else if(find("RecordSourceMix = ", TempIn$) > 0)
						{
						RecSourceMixConfigured = atoi(TempIn$);
						RecSourceMixIndex =  atoi(TempIn$);
						}
					else if(find("SpeechSourceMix = ", TempIn$) > 0)
						{
						SpchSourceMixConfigured = atoi(TempIn$);
						SpchSourceMixIndex =  atoi(TempIn$);
						}
/*					else if(find("ProgramMonoMode = ", TempIn$) > 0)
						{

						ProgMonoModeConfigured = atoi(TempIn$);
						ProgMonoModeIndex =  atoi(TempIn$);

						}
*/
					else if(find("SpchProgVolume = ", TempIn$) > 0)
						{
						SpchProgVolConfigured = atoi(TempIn$);
						SpchProgVolIndex =  atoi(TempIn$);
						}
					else if(find("RecFixedVariable = ", TempIn$) > 0)
						{
						RecFixedVariableConfigured = atoi(TempIn$);
						RecFixedVariableIndex =  atoi(TempIn$);
						}
					else if(find("RGBPassthruMode = ", TempIn$) > 0)
						{
						RGBPassthruModeConfigured = atoi(TempIn$);
						RGBPassthruModeIndex =  atoi(TempIn$);
						}
					}
				}
			}
		}
	fileclose(File);
	endfileoperations();
	Return(Success);
	}

PUSH PasswordFb
	{
	integer test ;
	test = 0;
	CurrentMenu = MENUPASSWORDMSG;
	EnterButtonFb = 1;
	Line2ScrollArrow$ = ARROWNONE;

	wait(800, PasswordWait)
		{
		Call DrawPasswordPage();
		}
	while(CurrentMenu = MENUPASSWORDMSG)
		{
		test=test+1;
		Makestring(SerialOut$[1], "  Use %s for cursor", ARROWUPDOWN);
		SerialOut$[2] = "Knob selects number";
		delay(400);
		if (CurrentMenu = MENUPASSWORDMSG)
			{
        	SerialOut$[1] = "  Then press ENTER";
			SerialOut$[2] = "";
			
			}
		delay(400);
		}
	}

PUSH WrongPasswordFb
	{
	CurrentMenu = MENUWRONGPASSWORD;
	SerialOut$[6] = " Invalid Password!";
	SerialOut$[7] = "";
	Line2ScrollArrow$ = ARROWNONE;
	wait(300, WrongPasswordWait)
		{
		Call DrawPasswordPage();
		}
	}

PUSH Start
	{
//	if(SystemType = OOTBF)
//		{
		SerialOut$[1] = "     Setup Menu";
		CurrentMenu = MENUMAIN;
		ScrollIndex = 1;
		ScrollMax = MAINMENUENTRIES;
		EnterButtonFb = 1;
		Call RefreshList(ScrollMax, ScrollIndex);
/*		}
	else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
		{
        SerialOut$[1] = "     Setup Menu";
		CurrentMenu = MENUMAIN;
		ScrollIndex = 1;
		ScrollMax = MAINMENUENTRIES;
		EnterButtonFb = 1;
		Call RefreshList(ScrollMax, ScrollIndex);
		}
*/
	}

PUSH Menu
	{
	if(CurrentMenu = MENUMAIN)
		{
		CurrentMenu = MENUEXITSETUPCONFIRMATION;
		SerialOut$[1] = "  Exit Setup Menu?";
		SoftKey$[1] = " Yes";
		SoftKey$[2] = "";
		SoftKey$[3] = "";
		SoftKey$[4] = "  No";
		Line2ScrollArrow$ = ARROWNONE;

		}

	else if (CurrentMenu = MENUEXITSETUPCONFIRMATION)
		{
		CurrentMenu = MENUEXITSETUPCONFIRMATION;
		SerialOut$[1] = "  Exit Setup Menu?";
		SoftKey$[1] = " Yes";
		SoftKey$[2] = "";
		SoftKey$[3] = "";
		SoftKey$[4] = "  No";
		Line2ScrollArrow$ = ARROWNONE;

		}
	else if(CurrentMenu = MENUPASSWORDMSG)
		{
		cancelwait(PasswordWait);
		Call DrawPasswordPage();
		}
	else if(CurrentMenu = MENUPASSWORD)
		{
		EnterButtonFb = 0;
		Softkey$[1] = "";
		Softkey$[2] = "";
		Softkey$[3] = "";
		Softkey$[4] = "";
		SerialOut$[6] = "";
		SerialOut$[7] = "";
		ExitInstaller = 1;
		ExitInstaller = 0;
		Password$ = "";
		StarPassword$ = "";
		CurrentMenu = 0;
		}
	else if(CurrentMenu = MENUWRONGPASSWORD)
		{
		cancelwait(WrongPasswordWait);
		Call DrawPasswordPage();
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
		{
        SerialOut$[6] = "";
		SerialOut$[7] = "";
		Call RefreshControlMenu();
		}
	else if((CurrentMenu = MENUAUDIO) || (CurrentMenu = MENUVIDEO) || (CurrentMenu = MENUNETWORK) || (CurrentMenu = MENUCONTROL))
		{
		Call RefreshMainMenu();
		}
	else if((CurrentMenu = MENUPROGRAM) || (CurrentMenu = MENURECORD) || (CurrentMenu = MENUSPEECH) || (CurrentMenu = MENUINPUTTRIM) || (CurrentMenu = MENUMICROPHONE) || (CurrentMenu = MENUMASTERSTARTUPVOL))
		{
		Call RefreshAudioMenu();
		}
	else if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4) || (CurrentMenu = MENUSRCGAIN5) ||(CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) || (CurrentMenu = MENUSRCGAIN8) || (CurrentMenu = MENUSRCGAIN9) || (CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12) || (CurrentMenu = MENUSRCGAIN13) || (CurrentMenu = MENUSRCGAIN14))
		{
		Call RefreshInputTrimMenu();
		}
	else if((CurrentMenu = MENUPROGSOURCEMIX) || (CurrentMenu = MENUPROGBASS) || (CurrentMenu = MENUPROGTREBLE) || (CurrentMenu = MENUPROGMINVOL) || (CurrentMenu = MENUPROGMAXVOL) || (CurrentMenu = MENUPROGMONO) || (CurrentMenu = MENUPROGSTARTUPVOL) || (CurrentMenu = MENUPROGDELAY))
		{
		Call RefreshProgAudioMenu();
		}
	else if((CurrentMenu = MENURECSOURCEMIX) || (CurrentMenu = MENURECFIXEDVARIABLE) || (CurrentMenu = MENURECSTARTUPVOL) || (CurrentMenu = MENURECBASS) || (CurrentMenu = MENURECTREBLE) || (CurrentMenu = MENURECMINVOL) || (CurrentMenu = MENURECMAXVOL) || (CurrentMenu = MENURECDELAY))
		{
		Call RefreshRecAudioMenu();
		}
	else if((CurrentMenu = MENUSPCHSOURCEMIX) || (CurrentMenu = MENUSPCHBASS) || (CurrentMenu = MENUSPCHTREBLE) || (CurrentMenu = MENUSPCHDELAY) || (CurrentMenu = MENUSPCHPROGVOL) || (CurrentMenu = MENUSPCHMINVOL) || (CurrentMenu = MENUSPCHMAXVOL) || (CurrentMenu = MENUSPCHSTARTUPVOL))
		{
		Call RefreshSpchAudioMenu();
		}
	else if((CurrentMenu = MENUMIC1GATING) || (CurrentMenu = MENUMIC2GATING) || (CurrentMenu = MENUMIC3GATING) || (CurrentMenu = MENUMIC4GATING) || (CurrentMenu = MENUMIC5GATING) || (CurrentMenu = MENUMIC6GATING)||(CurrentMenu = MENUMIC1LIMITER) ||(CurrentMenu = MENUMIC2LIMITER) || (CurrentMenu = MENUMIC3LIMITER) ||(CurrentMenu = MENUMIC4LIMITER) || (CurrentMenu = MENUMIC5LIMITER) || (CurrentMenu = MENUMIC6LIMITER) ||(CurrentMenu = MENUMIC1COMPRESSION) ||(CurrentMenu = MENUMIC2COMPRESSION) || (CurrentMenu = MENUMIC3COMPRESSION) || (CurrentMenu = MENUMIC4COMPRESSION) || (CurrentMenu = MENUMIC5COMPRESSION) || (CurrentMenu = MENUMIC6COMPRESSION) || (CurrentMenu = MENUPHANTOM) || (CurrentMenu = MENUMIC1GAIN) || (CurrentMenu = MENUMIC2GAIN) || (CurrentMenu = MENUMIC3GAIN) || (CurrentMenu = MENUMIC3GAIN) || (CurrentMenu = MENUMIC4GAIN) || (CurrentMenu = MENUMIC5GAIN) || (CurrentMenu = MENUMIC6GAIN))
		{
		Call RefreshMicMenu();
		}
	else if((CurrentMenu = MENUINPUT) || (CurrentMenu = MENUOUTPUT) || (CurrentMenu = MENURGBPASSTHRU))
		{
		Call RefreshVideoMenu();
        }
	else if((CurrentMenu = MENUSTATUS) || (CurrentMenu = MENUHOSTNAME) || (CurrentMenu = MENUDOMAINNAME))
		{
		Call RefreshNetworkMenu();
        }
	else if((CurrentMenu = MENUTIMEDATE) || (CurrentMenu = MENUUPGRADEDEVICE) || (CurrentMenu = MENUMESSAGE) || (CurrentMenu = MENUINFO) || (CurrentMenu = MENUFUNCTION) || (CurrentMenu = MENUBACKLIGHT) || (CurrentMenu = MENUFRONTPANEL) || (CurrentMenu = MENUAPADUPGRADEMESSAGE))
		{
		Call RefreshControlMenu();
    	}
	else if(CurrentMenu = MENUIPADDRESS)
		{
			ipatemp1 = ipa1;
			ipatemp2 = ipa2;
			ipatemp3 = ipa3;
			ipatemp4 = ipa4;
			IPout1 = ipatemp1;
			IPout2 = ipatemp2;
			IPout3 = ipatemp3;
			IPout4 = ipatemp4;
			//ipachangeflag = FALSE;
			IPsubmenu = 0;
			Call RefreshNetworkMenu();
		}
	else if(CurrentMenu = MENUSUBNETMASK)
		{
			ipmtemp1 = ipm1;
			ipmtemp2 = ipm2;
			ipmtemp3 = ipm3;
			ipmtemp4 = ipm4;
			IPout1 = ipmtemp1;
			IPout2 = ipmtemp2;
			IPout3 = ipmtemp3;
			IPout4 = ipmtemp4;
			//ipmchangeflag = FALSE;
			IPsubmenu = 0;
			Call RefreshNetworkMenu();
		}
	else if(CurrentMenu = MENUDEFROUTER)
		{
			deftemp1 = def1;
			deftemp2 = def2;
			deftemp3 = def3;
			deftemp4 = def4;
			IPout1 = deftemp1;
			IPout2 = deftemp2;
			IPout3 = deftemp3;
			IPout4 = deftemp4;
			//defchangeflag = FALSE;
			IPsubmenu = 0;
			Call RefreshNetworkMenu();
		}
	else if(CurrentMenu = MENUDHCP)
		{
			//dhcpchangeflag = FALSE;
			Call RefreshNetworkMenu();
		}
	else if(CurrentMenu = MENUWINS)
		{
			//winschangeflag = FALSE;
			Call RefreshNetworkMenu();
		}
	else if (CurrentMenu = MENUPRIVATENETWORK)
		{
			Call RefreshNetworkMenu();
		}
	else if (CurrentMenu = MENUSINGLEIP)
		{
			Call RefreshPrivateNetworkMenu();
		}
	else if (CurrentMenu = MENUSYSTEMID)
		{
			Call RefreshPrivateNetworkMenu();

		}
	else if(CurrentMenu = MENUROOMVIEW)
		{
			rvtemp1 = rv1;
			rvtemp2 = rv2;
			rvtemp3 = rv3;
			rvtemp4 = rv4;
			Call RefreshNetworkMenu();
		}
	else if(CurrentMenu = MENUEDITTEXT)
		{
		CurrentMenu = EditTextCallingMenu;
		EnterButtonFb = 1;
		if(EditTextCallingMenu = MENUINPUT)
			{
			SerialOut$[1] = " Sel. Input To Name";
			Call RefreshSourceList(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUOUTPUT)
			{
			SerialOut$[1] = "Sel. Output To Name";
			Call RefreshDestinationList(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUHOSTNAME)
			{
			SerialOut$[1] = "      HostName";
			SerialOut$[2] = Tempstring6$;
			}
		else if(EditTextCallingMenu = MENUDOMAINNAME)
			{
			SerialOut$[1] = "    Domain Name";
			SerialOut$[2] = Tempstring7$;
			}
		else if(EditTextCallingMenu = MENUFUNCTION)
			{
			SerialOut$[1] = "Select Fct. To Name";
			Call RefreshFunctionList(ScrollMax, ScrollIndex);
			}
		}

	else if(CurrentMenu = MENUSIGNALTYPE)
		{
			Call RefreshVideoMenu();
		}
	else if(CurrentMenu = MENUAUDIOSIGNALTYPE)
		{
			Call RefreshAudioMenu();
		}

	else if((CurrentMenu = MENUEDITSIGNAL1TO2TYPE)||(CurrentMenu = MENUEDITSIGNAL3to4TYPE)|| (CurrentMenu = MENUEDITSIGNAL5to5TYPE))
		{
			Call RefreshSigTypeMenu();
		}
	else if((CurrentMenu = MENUEDITAUDIOSIGNAL1TO2TYPE)||(CurrentMenu = MENUEDITAUDIOSIGNAL3to4TYPE)|| (CurrentMenu = MENUEDITAUDIOSIGNAL5to5TYPE))
		{
			Call RefreshAudioSigTypeMenu();
		}


	else if(CurrentMenu = MENUDATE)
		{
			tempmonth = imonth;
			tempday = iday;
			tempyear = iyear;
			CurrentMenu = MENUTIMEDATE;
		}
	else if(CurrentMenu = MENUTIME)
		{
			temphour = ihour;
			tempminutes = iminutes;
			tempseconds = iseconds;
			CurrentMenu = MENUTIMEDATE;
		}
    else if(CurrentMenu = MENUIDDEVICES)
    	{
    	if(IDDeviceStep = 1)
    		{
    		TSIDStopConfig = 1;
			TSIDStopConfig = 0;
			Call RefreshControlMenu();
			}
		else if((IDDeviceStep = 2) || (IDDeviceStep = 4))
			{
			Call AbortTSID();
			}
		else if(IDDeviceStep = 3)
			{
			cancelwait(KeypadIDWait);
			Call AbortTSID();
			}
    	}
	else if(CurrentMenu = MENUERRCLEAR)
		{
			CurrentMenu = MENUMESSAGE;
			SoftKey$[2] = "Clear";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
			Line2ScrollArrow$ = ARROWDOWN;
		}
	else if((CurrentMenu = MENUREMS) || (CurrentMenu = MENUSHOWHW) || (CurrentMenu = MENUREPORTCRESNET) || (CurrentMenu = MENUOPS))
		{
			CurrentMenu = MENUINFO;
			SerialOut$[1] = "        Info";
			SoftKey$[1] = " REMS";
			SoftKey$[2] = "  HW";
			SoftKey$[3] = " NET";
			SoftKey$[4] = " OPS";
			Line2ScrollArrow$ = ARROWNONE;
		}
	else if((CurrentMenu = MENURESTOREDEFAULTS) && ((RestoreDefaultsStep = 1) || (RestoreDefaultsStep = 2) || (RestoreDefaultsStep = 3)))
		{
		RestoreDefaultsStep = 0;
		Call RefreshControlMenu();
		}
	else if(CurrentMenu = MENUEXITSETUPCONFIRMATION)
		{
	//	if(SystemType = OOTBF)
	//		{
			CurrentMenu = MENUMAIN;
			SerialOut$[1] = "     Setup Menu";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "";
			ScrollIndex = 1;
			ScrollMax = MAINMENUENTRIES;
			EnterButtonFb = 1;
			Call RefreshList(ScrollMax, ScrollIndex);
	/*		}
		else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
			{
            CurrentMenu = MENUMAIN;
			SerialOut$[1] = "     Setup Menu";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "";
			ScrollIndex = 1;
			ScrollMax = MAINMENUENTRIES;
			EnterButtonFb = 1;
			Call RefreshList(ScrollMax, ScrollIndex);
			}
	*/
		}

	/*	else if(CurrentMenu = MENUEDITKEYPADS)
		{
		CurrentMenu = MENUCONFIGKEYPADS;
        SerialOut$[1] = "Select Button To Map";
		Call RefreshKeypadList(ScrollMax, ScrollIndex);
        }*/
	}

PUSH InstallerTimeOut
	{
	Call WriteConfigFile();
	Call CreateSourceList();
	Call CreateDestinationList();
	Call CreateFunctionList();
	EnterButtonFb = 0;
	Line2ScrollArrow$ = ARROWNONE;
	Softkey$[1] = "";
	Softkey$[2] = "";
	Softkey$[3] = "";
	Softkey$[4] = "";
	SerialOut$[3] = "";
	ExitInstaller = 1;
	ExitInstaller = 0;
	CurrentMenu = 0;
	}


PUSH KnobLeft
	{
	if(CurrentMenu = MENUMAIN)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUAUDIO)
		{


		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
				
	    	Call RefreshAudioList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUVIDEO)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshVideoList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUNETWORK)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshNetworkList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUCONTROL)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshControlList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUPROGRAM)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshProgAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENURECORD)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshRecAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUSPEECH)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSpchAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUMICROPHONE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMicOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUINPUTTRIM)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshInputCompOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENURECFIXEDVARIABLE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshRecFixedVariableList(ScrollMax, ScrollIndex, RecFixedVariableIndex);
			}
		}
	else if(CurrentMenu = MENUPROGSOURCEMIX)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshProgSourceMixList(ScrollMax, ScrollIndex, ProgramSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUPROGMONO)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshProgMonoTypeList(ScrollMax, ScrollIndex, ProgMonoModeConfigured);
			}
		}
	else if(CurrentMenu = MENURECSOURCEMIX)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshRecSourceMixList(ScrollMax, ScrollIndex, RecordSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUSPCHSOURCEMIX)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSpchSourceMixList(ScrollMax, ScrollIndex, SpeechSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUSPCHPROGVOL)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSpchProgVolList(ScrollMax, ScrollIndex, SpchProgVolIndex);
			}
		}
	else if(CurrentMenu = MENUMIC1GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC2GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC3GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic3GatingList(ScrollMax, ScrollIndex, Mic3GatingIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC4GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic4GatingList(ScrollMax, ScrollIndex, Mic4GatingIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC5GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic5GatingList(ScrollMax, ScrollIndex, Mic5GatingIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC6GATING)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshMic6GatingList(ScrollMax, ScrollIndex, Mic6GatingIn + 1);
			}
		}



    	else if(CurrentMenu = MENUMIC1LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic1Limiterlist(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC2LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic2Limiterlist(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC3LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic3Limiterlist(ScrollMax, ScrollIndex, Mic3LimiterIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC4LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic4Limiterlist(ScrollMax, ScrollIndex, Mic4LimiterIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC5LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic5Limiterlist(ScrollMax, ScrollIndex, Mic5LimiterIn + 1);
			}
		}
	else if(CurrentMenu = MENUMIC6LIMITER)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic6Limiterlist(ScrollMax, ScrollIndex, Mic6LimiterIn + 1);
			}
		}






	else if(CurrentMenu = MENUMIC1COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic1Compressionlist(ScrollMax, ScrollIndex, Mic1CompressionIn + 1);
			}
		}


	else if(CurrentMenu = MENUMIC2COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic2Compressionlist(ScrollMax, ScrollIndex, Mic2CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC3COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic3Compressionlist(ScrollMax, ScrollIndex, Mic3CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC4COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic4Compressionlist(ScrollMax, ScrollIndex, Mic4CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC5COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic5Compressionlist(ScrollMax, ScrollIndex, Mic5CompressionIn + 1);
			}
		}
                            
	else if(CurrentMenu = MENUMIC6COMPRESSION)
		{
		if(ScrollIndex > 1)
			{
			ScrollIndex = ScrollIndex - 1;
			Call RefreshMic6Compressionlist(ScrollMax, ScrollIndex, Mic6CompressionIn + 1);
			}
		}







	else if(CurrentMenu = MENUPHANTOM)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshPhantomPowerList(ScrollMax, ScrollIndex, PhantomPowerIn + 1);
			}
		}
	else if(CurrentMenu = MENUINPUT)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSourceList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUOUTPUT)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshDestinationList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUSIGNALTYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSourceTypeList(ScrollMax, ScrollIndex);
			}
		}

	else if(CurrentMenu = MENUAUDIOSIGNALTYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;

	    	Call RefreshAudioSourceTypeList(ScrollMax, ScrollIndex);
			}
		}

	else if(CurrentMenu = MENUEDITSIGNAL1TO2TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITSIGNAL3to4TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITSIGNAL5to5TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}

else if(CurrentMenu = MENUEDITAUDIOSIGNAL1TO2TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshAudioSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);//input # not known
			}
		}
	else if(CurrentMenu = MENUEDITAUDIOSIGNAL3to4TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshAudioSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITAUDIOSIGNAL5to5TYPE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshAudioSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}


	else if(CurrentMenu = MENUBACKLIGHT)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshBackLightTypeList(ScrollMax, ScrollIndex, BackLightIn);
			}
		}
	else if(CurrentMenu = MENUFRONTPANEL)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshFrontPanelTypeList(ScrollMax, ScrollIndex, FPLockModeIn);
			}
		}
	else if(CurrentMenu = MENUIPADDRESS)
		{
		IPKnobLeft = 1;
		IPKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSUBNETMASK)
		{
		IPKnobLeft = 1;
		IPKnobLeft = 0;
		}
	else if(CurrentMenu = MENUDEFROUTER)
		{
		IPKnobLeft = 1;
		IPKnobLeft = 0;
		}
     else if(CurrentMenu = MENUDATE)
		{
		if(dateindex = 1)
			{
			if(tempmonth < 12)
	    		{
	    			tempmonth = tempmonth + 1;
				}
			else
				{
					tempmonth = 1;
				}
			Makestring(SerialOut$[4], "[%02d]/%02d/%d", tempmonth, tempday, tempyear);
			}
		else if(dateindex = 2)
			{
			if(tempday < 31)
	    		{
	    			tempday = tempday + 1;
				}
			else
				{
					tempday = 1;
				}
			Makestring(SerialOut$[4], " %02d/[%02d]/%d", tempmonth, tempday, tempyear);
			}
		else if(dateindex = 3)
			{
			if(tempyear <= 2057)
	    		{
	    			tempyear = tempyear + 1;
				}
			else
				{
					tempyear = iyear;
				}
			Makestring(SerialOut$[4], " %02d/%02d/[%d]", tempmonth, tempday, tempyear);
			}
		}
    else if(CurrentMenu = MENUTIME)
		{
		if(timeindex = 1)
			{
			if(temphour < 23)
	    		{
	    			temphour = temphour + 1;
				}
			else
				{
					temphour = 0;
				}
			Call UpdateTime();
			Makestring(SerialOut$[5], "[%02d]:%02d:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(timeindex = 2)
			{
			if(tempminutes < 59)
	    		{
	    			tempminutes = tempminutes + 1;
				}
			else
				{
					tempminutes = 0;
				}
			Makestring(SerialOut$[5], " %02d:[%02d]:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(timeindex = 4)
			{
			if(ampm = "AM")
	    		{
	    			ampm = "PM";
				}
			else if(ampm = "PM")
				{
					ampm = "AM";
				}
			Makestring(SerialOut$[5], " %02d:%02d:%02d[%s]", displayhour, tempminutes, tempseconds, ampm);
			}
		}
	else if(CurrentMenu = MENUDHCP)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshDHCPList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUWINS)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshWINSList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUPRIVATENETWORK)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshPrivateNetworkList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUSINGLEIP)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshSingleIPList(ScrollMax, ScrollIndex, SingleIPIn + 1);
			}
		}
	
	else if(CurrentMenu = MENURGBPASSTHRU)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshRGBPassthruList(ScrollMax, ScrollIndex, RGBPassthruIn + 1);
			}
		}
	else if(CurrentMenu = MENUROOMVIEW)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshRoomViewList(ScrollMax, ScrollIndex, RoomViewIn);
			}
		}
	else if(CurrentMenu = MENUFUNCTION)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshFunctionList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUUPGRADEDEVICE)
		{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshUpgradeSelection(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUPROGBASS)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUPROGTREBLE)
    	{
			AudioKnobLeft = 1;
    	}


	else if(CurrentMenu = MENURECBASS)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENURECTREBLE)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUSPCHBASS)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUSPCHTREBLE)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUPROGMINVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUPROGMAXVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if (CurrentMenu = MENURECMAXVOL)
		{
			AudioKnobLeft = 1;
		}
	else if (CurrentMenu = MENURECMINVOL)
		{
			AudioKnobLeft = 1;
		}

	else if(CurrentMenu = MENUSPCHMINVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUSPCHMAXVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC1GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC2GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC3GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC4GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC5GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMIC6GAIN)
    	{
			AudioKnobLeft = 1;
    	}
	else if (CurrentMenu = MENUSYSTEMID)
		{
         	AudioKnobLeft = 1;
		}


	else if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4) || (CurrentMenu = MENUSRCGAIN5)|| (CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) || (CurrentMenu = MENUSRCGAIN8) || (CurrentMenu = MENUSRCGAIN9) || (CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12) || (CurrentMenu = MENUSRCGAIN13) || (CurrentMenu = MENUSRCGAIN14))
    	{
			AudioKnobLeft = 1;
		}
	else if(CurrentMenu = MENUPROGSTARTUPVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENURECSTARTUPVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUSPCHSTARTUPVOL)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUPROGDELAY)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENURECDELAY)
    	{
			AudioKnobLeft = 1;
    	}


	else if(CurrentMenu = MENUSPCHDELAY)
    	{
			AudioKnobLeft = 1;
    	}
	else if(CurrentMenu = MENUMASTERSTARTUPVOL)
    	{
			AudioKnobLeft = 1;
    	}
    else if(CurrentMenu = MENUIDDEVICES)
    	{
    	if(IDDeviceStep = 2)
    		{
    		if(ScrollIndex > 1)
    			{
    			ScrollIndex = ScrollIndex - 1;
    			call RefreshKeypadSelection(ScrollMax, ScrollIndex);
    			}
    		}
    	else if(IDDeviceStep = 4)
    		{
    		if(ScrollIndex > 1)
    			{
    			ScrollIndex = 1;
    			SerialOut$[2] = "     Try Again";
    			Call calculateScrollbar(2, 1);
    			}
    		}
    	}
	else if(CurrentMenu = MENUMESSAGE)
    	{
    	ScrollUp = 1;
    	ScrollUp = 0;

    	}
	else if(CurrentMenu = MENUREMS)
    	{
/*
	if (atTop = 1)
				Line2ScrollArrow$ = ARROWDOWN;
			else if (atBottom = 1)
				Line2ScrollArrow$ = ARROWUP;
			else
                Line2ScrollArrow$ = ARROWUPDOWN;
*/
    	ScrollUp = 1;
    	ScrollUp = 0;
		
    	}
	else if(CurrentMenu = MENUSHOWHW)
    	{
    	ScrollUp = 1;
    	ScrollUp = 0;
    	}
	else if(CurrentMenu = MENUREPORTCRESNET)
    	{
    	ScrollUp = 1;
    	ScrollUp = 0;
    	}
	else if(CurrentMenu = MENUOPS)
    	{
    	ScrollUp = 1;
    	ScrollUp = 0;
    	}
    else if(CurrentMenu = MENUEDITTEXT)
    	{
    	TextEditKnobLeft = 1;
    	TextEditKnobLeft = 0;
    	}
	/*else if(CurrentMenu = MENUPASSWORDMSG)
    	{
		cancelwait(PasswordWait);
		Call DrawPasswordPage();
		}*/
	else if(CurrentMenu = MENUPASSWORD)
    	{
        TextEditKnobLeft = 1;
    	TextEditKnobLeft = 0;
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
    	{
    	TextEditKnobLeft = 1;
    	TextEditKnobLeft = 0;
    	}
	else if(CurrentMenu = MENURESTOREDEFAULTS)
    	{
    	if(RestoreDefaultsStep = 1)
    		{
    		if(ScrollIndex > 1)
    			{
    			ScrollIndex = ScrollIndex - 1;
    			call RefreshDefaultsList(ScrollMax, ScrollIndex);
    			}
    		}
    	else if(RestoreDefaultsStep = 2)
    		{
    		ScrollIndex = 1;
    		SerialOut$[2] = "No";
			Line2ScrollArrow$ = ARROWDOWN;
            DigitalOut[1] = 0;
    		DigitalOut[2] = 1;
    		}
    	else if(RestoreDefaultsStep = 3)
    		{
    		ScrollIndex = 1;
    		SerialOut$[2] = "No";
			Line2ScrollArrow$ = ARROWDOWN;
            DigitalOut[1] = 0;
    		DigitalOut[2] = 1;
    		}
    	}

	/*else if(CurrentMenu = MENUCONFIGKEYPADS)
    	{
		if(ScrollIndex > 1)
	    	{
	    	ScrollIndex = ScrollIndex - 1;
	    	Call RefreshKeypadList(ScrollMax, ScrollIndex);
			}
    	}*/
   	/*else if(CurrentMenu = MENUEDITKEYPADS)
    	{
    	if(SourceIndex > 0)
    		SourceIndex = SourceIndex - 1;
    	else
    		SourceIndex = 6;
    	if(SourceIndex > 0)
    		Makestring(SerialOut$[2], "[%s]", SourceNameIn$[SourceIndex]);
    	else
    		SerialOut$[2] = "[Not Used]";
    	}*/
	}

RELEASE KnobLeft
	{
	if(CurrentMenu = MENUPROGBASS)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUPROGTREBLE)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECBASS)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECTREBLE)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSPCHBASS)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSPCHTREBLE)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUPROGMINVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUPROGMAXVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECMINVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECMAXVOL)
    	{
			AudioKnobLeft = 0;
		}

	else if(CurrentMenu = MENUSPCHMINVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSPCHMAXVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUMIC1GAIN)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUMIC2GAIN)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUMIC3GAIN)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUMIC4GAIN)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUMIC5GAIN)
    	{
			AudioKnobLeft = 0;
		}
 	else if(CurrentMenu = MENUMIC6GAIN)
    	{
			AudioKnobLeft = 0;
		}
	else if (CurrentMenu = MENUSYSTEMID)
		{
         	AudioKnobLeft = 0;
		}



	else if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4) || (CurrentMenu = MENUSRCGAIN5) || (CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) || (CurrentMenu = MENUSRCGAIN8) 
			|| (CurrentMenu = MENUSRCGAIN9) || (CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12) || 
		(CurrentMenu = MENUSRCGAIN13) || (CurrentMenu = MENUSRCGAIN14))
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUPROGSTARTUPVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECSTARTUPVOL) 
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSPCHSTARTUPVOL)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUSPCHDELAY)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENUPROGDELAY)
    	{
			AudioKnobLeft = 0;
		}
	else if(CurrentMenu = MENURECDELAY)
    	{
			AudioKnobLeft = 0;
		}

	else if(CurrentMenu = MENUMASTERSTARTUPVOL)
    	{
			AudioKnobLeft = 0;
		}
	}

PUSH KnobRight
	{
	if(CurrentMenu = MENUMAIN)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUAUDIO)
		{
		if ( (DEVICE_TYPE = 1) && (ScrollIndex < ScrollMax-1) )
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshAudioList(ScrollMax-1, ScrollIndex);
			}

		else if (ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshAudioList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUVIDEO)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshVideoList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUNETWORK)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshNetworkList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUCONTROL)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshControlList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUPROGRAM)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshProgAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENURECORD)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshRecAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUSPEECH)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSpchAudioOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUMICROPHONE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMicOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUINPUTTRIM)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshInputCompOutList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENURECFIXEDVARIABLE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshRecFixedVariableList(ScrollMax, ScrollIndex, RecFixedVariableIndex);
			}
		}
	else if(CurrentMenu = MENUPROGSOURCEMIX)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshProgSourceMixList(ScrollMax, ScrollIndex, ProgramSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUPROGMONO)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshProgMonoTypeList(ScrollMax, ScrollIndex, ProgMonoModeConfigured);
			}
		}
	else if(CurrentMenu = MENURECSOURCEMIX)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshRecSourceMixList(ScrollMax, ScrollIndex, RecordSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUSPCHSOURCEMIX)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSpchSourceMixList(ScrollMax, ScrollIndex, SpeechSourceMixIn);
			}
		}
	else if(CurrentMenu = MENUSPCHPROGVOL)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSpchProgVolList(ScrollMax, ScrollIndex, SpchProgVolIndex);
			}
		}

	else if(CurrentMenu = MENUMIC1GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC2GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
			}

		}

	else if(CurrentMenu = MENUMIC3GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic3GatingList(ScrollMax, ScrollIndex, Mic3GatingIn + 1);
			}

		}
	else if(CurrentMenu = MENUMIC4GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic4GatingList(ScrollMax, ScrollIndex, Mic4GatingIn + 1);
			}

		}
	else if(CurrentMenu = MENUMIC5GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic5GatingList(ScrollMax, ScrollIndex, Mic5GatingIn + 1);
			}

		}
	else if(CurrentMenu = MENUMIC6GATING)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic6GatingList(ScrollMax, ScrollIndex, Mic6GatingIn + 1);
			}

		}



	else if(CurrentMenu = MENUMIC1LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic1Limiterlist(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
			}
		}


	else if(CurrentMenu = MENUMIC2LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic2Limiterlist(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC3LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic3Limiterlist(ScrollMax, ScrollIndex, Mic3LimiterIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC4LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic4Limiterlist(ScrollMax, ScrollIndex, Mic4LimiterIn + 1);
			}
		}
              
	else if(CurrentMenu = MENUMIC5LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic5Limiterlist(ScrollMax, ScrollIndex, Mic5LimiterIn + 1);
			}
		}
            
	else if(CurrentMenu = MENUMIC6LIMITER)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic6Limiterlist(ScrollMax, ScrollIndex, Mic6LimiterIn + 1);
			}
		}



	else if(CurrentMenu = MENUMIC1COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic1Compressionlist(ScrollMax, ScrollIndex, Mic1CompressionIn + 1);
			}
		}


	else if(CurrentMenu = MENUMIC2COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic2Compressionlist(ScrollMax, ScrollIndex, Mic2CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC3COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic3Compressionlist(ScrollMax, ScrollIndex, Mic3CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC4COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic4Compressionlist(ScrollMax, ScrollIndex, Mic4CompressionIn + 1);
			}
		}
                   
	else if(CurrentMenu = MENUMIC5COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic5Compressionlist(ScrollMax, ScrollIndex, Mic5CompressionIn + 1);
			}
		}

	else if(CurrentMenu = MENUMIC6COMPRESSION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshMic6Compressionlist(ScrollMax, ScrollIndex, Mic6CompressionIn + 1);
			}
		}


	else if(CurrentMenu = MENUPHANTOM)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshPhantomPowerList(ScrollMax, ScrollIndex, PhantomPowerIn + 1);
			}
		}

	else if(CurrentMenu = MENUINPUT)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSourceList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUOUTPUT)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshDestinationList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUSIGNALTYPE)
		{
		//print("Scrollindex = %d \n",ScrollIndex);
		//print("Scrollmax = %d \n",ScrollMax);

		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSourceTypeList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUAUDIOSIGNALTYPE)
		{
		//print("Scrollindex = %d \n",ScrollIndex);
		//print("Scrollmax = %d \n",ScrollMax);

		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;;
			Call RefreshAudioSourceTypeList(ScrollMax, ScrollIndex);
			}
		}

	else if(CurrentMenu = MENUEDITSIGNAL1TO2TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSignal1TO2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITSIGNAL3to4TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITSIGNAL5to5TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}

else if(CurrentMenu = MENUEDITAUDIOSIGNAL1TO2TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshAudioSignal1TO2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITAUDIOSIGNAL3to4TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshAudioSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if(CurrentMenu = MENUEDITAUDIOSIGNAL5to5TYPE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshAudioSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}


	else if(CurrentMenu = MENUBACKLIGHT)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshBackLightTypeList(ScrollMax, ScrollIndex, BackLightIn);
			}
		}
	else if(CurrentMenu = MENUFRONTPANEL)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshFrontPanelTypeList(ScrollMax, ScrollIndex, FPLockModeIn);
			}
		}
	else if(CurrentMenu = MENUIPADDRESS)
		{
		IPKnobRight = 1;
		IPKnobRight = 0;
		}
	else if(CurrentMenu = MENUSUBNETMASK)
		{
		IPKnobRight = 1;
		IPKnobRight = 0;
		}
	else if(CurrentMenu = MENUDEFROUTER)
		{
		IPKnobRight = 1;
		IPKnobRight = 0;
		}
    else if(CurrentMenu = MENUDATE)
		{
    	if(dateindex = 1)
			{
			if(tempmonth > 1)
	    		{
	    			tempmonth = tempmonth - 1;
				}
			else
				{
					tempmonth = 12;
				}
			Makestring(SerialOut$[4], "[%02d]/%02d/%d", tempmonth, tempday, tempyear);
			}
		else if(dateindex = 2)
			{
			if(tempday > 1)
	    		{
	    			tempday = tempday - 1;
				}
			else
				{
					tempday = 31;
				}
			Makestring(SerialOut$[4], " %02d/[%02d]/%d", tempmonth, tempday, tempyear);
			}
		else if(dateindex = 3)
			{
			if(tempyear >= iyear)
	    		{
	    			tempyear = tempyear - 1;
				}
			else
				{
					tempyear = 2057;
				}
			Makestring(SerialOut$[4], " %02d/%02d/[%d]", tempmonth, tempday, tempyear);
			}
		}
	else if(CurrentMenu = MENUTIME)
		{
    	if(timeindex = 1)
			{
			if(temphour > 0)
	    		{
	    			temphour = temphour - 1;
				}
			else
				{
					temphour = 23;
				}
			Call UpdateTime();
			Makestring(SerialOut$[5], "[%02d]:%02d:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(timeindex = 2)
			{
			if(tempminutes > 0)
	    		{
	    			tempminutes = tempminutes - 1;
				}
			else
				{
					tempminutes = 59;
				}
			Makestring(SerialOut$[5], " %02d:[%02d]:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(timeindex = 4)
			{
			if(ampm = "AM")
	    		{
	    			ampm = "PM";
				}
			else if(ampm = "PM")
				{
					ampm = "AM";
				}
			Makestring(SerialOut$[5], " %02d:%02d:%02d[%s]", displayhour, tempminutes, tempseconds, ampm);
			}
		}
	else if(CurrentMenu = MENUDHCP)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshDHCPList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUWINS)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshWINSList(ScrollMax, ScrollIndex);
			}
		}
	else if (CurrentMenu = MENUPRIVATENETWORK)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshPrivateNetworkList(ScrollMax, ScrollIndex);
			}
		}

	else if (CurrentMenu = MENUSINGLEIP)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshSingleIPList(ScrollMax, ScrollIndex, SingleIPIn + 1);
			}
		}


	else if(CurrentMenu = MENURGBPASSTHRU)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshRGBPassthruList(ScrollMax, ScrollIndex, RGBPassthruIn + 1);
			}
		}
	else if(CurrentMenu = MENUROOMVIEW)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshRoomViewList(ScrollMax, ScrollIndex, RoomViewIn);
			}
		}
	else if(CurrentMenu = MENUFUNCTION)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshFunctionList(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUUPGRADEDEVICE)
		{
		if(ScrollIndex < ScrollMax)
			{
			ScrollIndex = ScrollIndex + 1;
			Call RefreshUpgradeSelection(ScrollMax, ScrollIndex);
			}
		}
	else if(CurrentMenu = MENUPROGBASS)
    	{
			AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENUPROGTREBLE)
    	{
    		AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENURECBASS)
    	{
			AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENURECTREBLE)
    	{
    		AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENUSPCHBASS)
    	{
			AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENUSPCHTREBLE)
    	{
    		AudioKnobRight = 1;
       	}
	else if(CurrentMenu = MENUPROGMINVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUPROGMAXVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENURECMINVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENURECMAXVOL)
    	{
			AudioKnobRight = 1;
    	}

	else if(CurrentMenu = MENUSPCHMINVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUSPCHMAXVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMIC1GAIN)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMIC2GAIN)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMIC3GAIN)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMIC4GAIN)
    	{
			AudioKnobRight = 1;
    	}
                
	else if(CurrentMenu = MENUMIC5GAIN)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMIC6GAIN)
    	{
			AudioKnobRight = 1;
    	}

	else if (CurrentMenu = MENUSYSTEMID)
		{
         	AudioKnobRight = 1;
		}



	else if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4) || (CurrentMenu = MENUSRCGAIN5) || (CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) || (CurrentMenu = MENUSRCGAIN8)
			|| (CurrentMenu = MENUSRCGAIN9) || (CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12) 
			|| (CurrentMenu = MENUSRCGAIN13) || (CurrentMenu = MENUSRCGAIN14))
    	{
			AudioKnobRight = 1;
		}
	else if(CurrentMenu = MENUPROGSTARTUPVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENURECSTARTUPVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUSPCHSTARTUPVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUPROGDELAY)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENURECDELAY)
    	{
			AudioKnobRight = 1;
    	}

	else if(CurrentMenu = MENUSPCHDELAY)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUMASTERSTARTUPVOL)
    	{
			AudioKnobRight = 1;
    	}
	else if(CurrentMenu = MENUEDITTEXT)
    	{
    	TextEditKnobRight = 1;
    	TextEditKnobRight = 0;
    	}
	/*else if(CurrentMenu = MENUPASSWORDMSG)
    	{
		cancelwait(PasswordWait);
		Call DrawPasswordPage();
		}*/
	else if(CurrentMenu = MENUPASSWORD)
    	{
		TextEditKnobRight = 1;
    	TextEditKnobRight = 0;
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
    	{
    	TextEditKnobRight = 1;
    	TextEditKnobRight = 0;
    	}
	else if(CurrentMenu = MENUIDDEVICES)
    	{
    	if(IDDeviceStep = 2)
    		{
    		if(ScrollIndex < ScrollMax)
    			{
    			ScrollIndex = ScrollIndex + 1;
    			call RefreshKeypadSelection(ScrollMax, ScrollIndex);
    			}
    		}
    	else if(IDDeviceStep = 4)
    		{
    		if(ScrollIndex = 1)
    			{
    			ScrollIndex = 2;
    			SerialOut$[2] = "Abort";
    			Call CalculateScrollbar(2, 2);
    			}
    		}
    	}
	else if(CurrentMenu = MENUMESSAGE)
    	{
    	ScrollDown = 1;
    	ScrollDown = 0;
    	}
	else if(CurrentMenu = MENUREMS)
    	{
    	ScrollDown = 1;
    	ScrollDown = 0;
	/*		if (atTop = 1)
				Line2ScrollArrow$ = ARROWDOWN;
			else if (atBottom = 1)
				Line2ScrollArrow$ = ARROWUP;
			else
                Line2ScrollArrow$ = ARROWUPDOWN;
*/

    	}
	else if(CurrentMenu = MENUSHOWHW)
    	{
    	ScrollDown = 1;
    	ScrollDown = 0;
    	}
	else if(CurrentMenu = MENUREPORTCRESNET)
    	{
    	ScrollDown = 1;
    	ScrollDown = 0;
    	}
	else if(CurrentMenu = MENUOPS)
    	{
    	ScrollDown = 1;
    	ScrollDown = 0;
    	}
	else if(CurrentMenu = MENURESTOREDEFAULTS)
    	{
    	if(RestoreDefaultsStep = 1)
    		{
    		if(ScrollIndex < ScrollMax)
    			{
    			ScrollIndex = ScrollIndex + 1;
    			call RefreshDefaultsList(ScrollMax, ScrollIndex);
    			}
    		}
    	else if(RestoreDefaultsStep = 2)
    		{
    		ScrollIndex = 2;
    		SerialOut$[2] = "Yes";
			Line2ScrollArrow$ = ARROWUP;
            DigitalOut[1] = 1;
    		DigitalOut[2] = 0;
    		}
    	else if(RestoreDefaultsStep = 3)
    		{
    		ScrollIndex = 2;
    		SerialOut$[2] = "Yes";
			Line2ScrollArrow$ = ARROWUP;
            DigitalOut[1] = 1;
    		DigitalOut[2] = 0;
    		}
    	}

/*    else if(CurrentMenu = MENUEDITKEYPADS)
    	{
    	if(SourceIndex < 6)
    		SourceIndex = SourceIndex + 1;
    	else
    		SourceIndex = 0;
    	if(SourceIndex > 0)
    		Makestring(SerialOut$[2], "[%s]", SourceNameIn$[SourceIndex]);
    	else
    		SerialOut$[2] = "[Not Used]";
    	}*/


	}

RELEASE KnobRight
	{
	if(CurrentMenu = MENUPROGBASS)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUPROGTREBLE)
    	{
    		AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECBASS)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECTREBLE)
    	{
    		AudioKnobRight = 0;
	   	}
    else if(CurrentMenu = MENUSPCHBASS)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUSPCHTREBLE)
    	{
    		AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUPROGMINVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUPROGMAXVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECMINVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECMAXVOL)
    	{
			AudioKnobRight = 0;
	   	}

	else if(CurrentMenu = MENUSPCHMINVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUSPCHMAXVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC1GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC2GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC3GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC4GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC5GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMIC6GAIN)
    	{
			AudioKnobRight = 0;
	   	}
	else if (CurrentMenu = MENUSYSTEMID)
		{
         	AudioKnobRight = 0;
		}

	else if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4) || (CurrentMenu = MENUSRCGAIN5) || (CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) || (CurrentMenu = MENUSRCGAIN8) || (CurrentMenu = MENUSRCGAIN9) || (CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12) || (CurrentMenu = MENUSRCGAIN13) ||(CurrentMenu = MENUSRCGAIN14))
    	{
			AudioKnobRight = 0;
		}
	else if(CurrentMenu = MENUPROGSTARTUPVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECSTARTUPVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUSPCHSTARTUPVOL)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENURECDELAY)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUPROGDELAY)
    	{
			AudioKnobRight = 0;
	   	}

	else if(CurrentMenu = MENUSPCHDELAY)
    	{
			AudioKnobRight = 0;
	   	}
	else if(CurrentMenu = MENUMASTERSTARTUPVOL)
    	{
			AudioKnobRight = 0;
	   	}
	}

PUSH VolumeKnobLeft
	{
	if(CurrentMenu = MENUEDITTEXT)
    	{
    		TextEditVolumeKnobLeft = 1;
    		TextEditVolumeKnobLeft = 0;
    	}
	else if(CurrentMenu = MENUPASSWORD)
    	{
			TextEditVolumeKnobLeft = 1;
    		TextEditVolumeKnobLeft = 0;
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
    	{
    		TextEditVolumeKnobLeft = 1;
    		TextEditVolumeKnobLeft = 0;
    	}
	}

PUSH VolumeKnobRight
	{
	if(CurrentMenu = MENUEDITTEXT)
    	{
    		TextEditVolumeKnobRight = 1;
    		TextEditVolumeKnobRight = 0;
    	}
	else if(CurrentMenu = MENUPASSWORD)
    	{
			TextEditVolumeKnobRight = 1;
    		TextEditVolumeKnobRight = 0;
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
    	{
    		TextEditVolumeKnobRight = 1;
    		TextEditVolumeKnobRight = 0;
    	}
	}

PUSH SoftButton
	{
	INTEGER Index;
	Index = Getlastmodifiedarrayindex();

	if(CurrentMenu = MENUIPADDRESS)
    {
		if(Index = 1)
			{
			IPsubmenu = 1;
			Call SelectIPAddress(IPsubmenu);
			}
		else if(Index = 2)
			{
			IPsubmenu = 2;
			Call SelectIPAddress(IPsubmenu);
			}
		else if(Index = 3)
			{
			IPsubmenu = 3;
			Call SelectIPAddress(IPsubmenu);
			}
		else if(Index = 4)
			{
			IPsubmenu = 4;
			Call SelectIPAddress(IPsubmenu);
			}
	}
	else if(CurrentMenu = MENUSUBNETMASK)
    {
		if(Index = 1)
			{
			IPsubmenu = 1;
			Call SelectIPMask(IPsubmenu);
			}
		else if(Index = 2)
			{
			IPsubmenu = 2;
			Call SelectIPMask(IPsubmenu);
			}
		else if(Index = 3)
			{
			IPsubmenu = 3;
			Call SelectIPMask(IPsubmenu);
			}
		else if(Index = 4)
			{
			IPsubmenu = 4;
			Call SelectIPMask(IPsubmenu);
			}
	}
	else if(CurrentMenu = MENUDEFROUTER)
    {
		if(Index = 1)
			{
			IPsubmenu = 1;
			Call SelectDefRouter(IPsubmenu);
			}
		else if(Index = 2)
			{
			IPsubmenu = 2;
			Call SelectDefRouter(IPsubmenu);
			}
		else if(Index = 3)
			{
			IPsubmenu = 3;
			Call SelectDefRouter(IPsubmenu);
			}
		else if(Index = 4)
			{
			IPsubmenu = 4;
			Call SelectDefRouter(IPsubmenu);			}
	}
	else if(CurrentMenu = MENUTIMEDATE)
	{
		if(Index = 1)
			{
			CurrentMenu = MENUDATE;
			imonth = GetMonthNum();
			iday = GetDateNum();
			iyear = GetYearNum();
			tempmonth = imonth;
			tempday = iday;
			tempyear = iyear;
			Makestring(SerialOut$[4], " %02d/%02d/%d", tempmonth, tempday, tempyear);
			}
		else if(Index = 2)
			{
			CurrentMenu = MENUTIME;
			ihour = GetHourNum();
			iminutes = GetMinutesNum();
			iseconds = GetSecondsNum();
			temphour = ihour;
			tempminutes = iminutes;
			tempseconds = iseconds;
			if(ihour < 12)
				{
  					ampm="AM";
		  		}
			else
				{
					ampm="PM";
				}
			Call UpdateTime();
			Makestring(SerialOut$[5], " %02d:%02d:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
	}
	else if(CurrentMenu = MENUDATE)
	{
		if(Index = 1)
			{
			dateindex = 1;
			Makestring(SerialOut$[4], "[%02d]/%02d/%d ", tempmonth, tempday, tempyear);
			}
		else if(Index = 2)
			{
			dateindex = 2;
			Makestring(SerialOut$[4], " %02d/[%02d]/%d ", tempmonth, tempday, tempyear);
			}
		else if(Index = 3)
			{
			dateindex = 3;
			Makestring(SerialOut$[4], " %02d/%02d/[%d] ", tempmonth, tempday, tempyear);
			}
	}
	else if(CurrentMenu = MENUTIME)
	{
		if(Index = 1)
			{
			timeindex = 1;
			Call UpdateTime();
			Makestring(SerialOut$[5], "[%02d]:%02d:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(Index = 2)
			{
			timeindex = 2;
			Makestring(SerialOut$[5], " %02d:[%02d]:%02d%s", displayhour, tempminutes, tempseconds, ampm);
			}
		else if(Index = 4)
			{
			timeindex = 4;
			Makestring(SerialOut$[5], " %02d:%02d:%02d[%s]", displayhour, tempminutes, tempseconds, ampm);
			}
	}
	else if(CurrentMenu = MENUMESSAGE)
    {
		if(Index = 1)
			{
			TopBottom = 1;
			TopBottom = 0;
			}
		else if(Index = 2)
			{
			CurrentMenu = MENUERRCLEAR;
			SerialOut$[1] = " Clear System Log?";
			SoftKey$[1] = " Yes";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "  No";
			}
		else if(Index = 3)
			{
			ScrollLeft = 1;
			ScrollLeft = 0;
			}
		else if(Index = 4)
			{
			ScrollRight = 1;
			ScrollRight = 0;
			}
	}
	else if(CurrentMenu = MENUERRCLEAR)
	{
		if(Index = 1)
			{
			ClearErrLog = 1;
			ClearErrLog = 0;
			Call RefreshControlMenu();
			}
		else if(Index = 4)
			{
			CurrentMenu = MENUMESSAGE;
			SoftKey$[2] = "Clear";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
			}
	}
	else if(CurrentMenu = MENUINFO)
    {
		Line2ScrollArrow$ = ARROWNONE;

		if(Index = 1)
			{
			CurrentMenu = MENUREMS;
			ShowProgram = 1;
			ShowProgram = 0;
			SerialOut$[1] = "";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
//			Line2ScrollArrow$ = ARROWDOWN;
       /*
		if (atTop = 1)
				Line2ScrollArrow$ = ARROWDOWN;
			else if (atBottom = 1)
				Line2ScrollArrow$ = ARROWUP;
			else
                Line2ScrollArrow$ = ARROWUPDOWN;
*/

			
			}
		else if(Index = 2)
			{
			CurrentMenu = MENUSHOWHW;
			ShowHardware = 1;
			ShowHardware = 0;
			SerialOut$[1] = "";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
			Line2ScrollArrow$ = ARROWDOWN;
			}
		else if(Index = 3)
			{
			CurrentMenu = MENUREPORTCRESNET;
			SerialOut$[1] = "";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
			ReportCresnet = 1;
			ReportCresnet = 0;
			Line2ScrollArrow$ = ARROWDOWN;
			}

		else if(Index = 4)
			{
			CurrentMenu = MENUOPS;
			ReportOps = 1;
			ReportOps = 0;
			SerialOut$[1] = "";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "  <<";
			SoftKey$[4] = "  >>";
			Line2ScrollArrow$ = ARROWNONE;
				}
	}
	else if((CurrentMenu = MENUSHOWHW) || (CurrentMenu = MENUREPORTCRESNET) || (CurrentMenu = MENUREMS) || (CurrentMenu = MENUOPS))
    {
		if(Index = 3)
			{
			ScrollLeft = 1;
			ScrollLeft = 0;
			}
		else if(Index = 4)
			{
			ScrollRight = 1;
			ScrollRight = 0;
			}
	}
	else if(CurrentMenu = MENUEDITTEXT)
		{
		if(Index = 1)
			{
			TextEditSoftKey1 = 1;
			}
		else if(Index = 2)
			{
			TextEditSoftKey2 = 1;
			}
		else if(Index = 3)
			{
			TextEditSoftKey3 = 1;
			}
		else if(Index = 4)
			{
			TextEditSoftKey4 = 1;
			}
		}
	else if(CurrentMenu = MENUEXITSETUPCONFIRMATION)
	{
		if(Index = 1)
			{
			if ((ipachangeflag = TRUE) || (ipmchangeflag = TRUE) || (defchangeflag = TRUE) || (dhcpchangeflag = TRUE) || (winschangeflag = TRUE) || (hostchangeflag = TRUE) || (domainchangeflag = TRUE) || (privatenetworkchangeflag = TRUE))
            	{
				CurrentMenu = MENUEXITSETUP;
				Call WriteConfigFile();
				Call CreateSourceList();
				Call CreateDestinationList();
				Call CreateFunctionList();
				SerialOut$[1] = "  Network Settings";
				SerialOut$[2] = " have been changed.";
				Line2ScrollArrow$ = ARROWNONE;
				Softkey$[1] = "";
				Softkey$[2] = "";
				Softkey$[3] = "";
				Softkey$[4] = "";
				Delay(500);
				SerialOut$[1] = " Rebooting System.";
				SerialOut$[2] = "    Please Wait.";
				rebootcmd = 1;
                rebootcmd = 0;
				Delay(2000);
				EnterButtonFb = 0;
				SerialOut$[3] = "";
				ExitInstaller = 1;
				ExitInstaller = 0;
				CurrentMenu = 0;
				ipachangeflag = FALSE;
				ipmchangeflag = FALSE;
				defchangeflag = FALSE;
				dhcpchangeflag = FALSE;
				winschangeflag = FALSE;
				hostchangeflag = FALSE;
				domainchangeflag = FALSE;
				privatenetworkchangeflag  = FALSE;
				}
			else if((ipachangeflag = FALSE) && (ipmchangeflag = FALSE) && (defchangeflag = FALSE) && (dhcpchangeflag = FALSE) && (winschangeflag = FALSE) && (hostchangeflag = FALSE) && (domainchangeflag = FALSE))
				{
				Call WriteConfigFile();
				Call CreateSourceList();
				Call CreateDestinationList();
				Call CreateFunctionList();
				EnterButtonFb = 0;
				Line2ScrollArrow$ = ARROWNONE;
				Softkey$[1] = "";
				Softkey$[2] = "";
				Softkey$[3] = "";
				Softkey$[4] = "";
				SerialOut$[3] = "";
				ExitInstaller = 1;
				ExitInstaller = 0;
				CurrentMenu = 0;
				}
			}
		else if(Index = 4)
			{
		//	if(SystemType = OOTBF)
		//		{
				CurrentMenu = MENUMAIN;
				SerialOut$[1] = "     Setup Menu";
				SoftKey$[1] = "";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "";
				ScrollIndex = 1;
				ScrollMax = MAINMENUENTRIES;
				EnterButtonFb = 1;
				Line2ScrollArrow$ = ARROWNONE;
				Call RefreshList(ScrollMax, ScrollIndex);
		/*		}
			else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
     			{
				CurrentMenu = MENUMAIN;
				SerialOut$[1] = "     Setup Menu";
				SoftKey$[1] = "";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "";
				ScrollIndex = 1;
				ScrollMax = MAINMENUENTRIES;
				EnterButtonFb = 1;
				Call RefreshList(ScrollMax, ScrollIndex);
				}
		*/
			}
		}

/*
	else if(CurrentMenu = MENUCONFIGKEYPADS)
		{
		if(Index = 4)
			{
			Call InitConfigKeypadsMenu(ScrollHighlight);
			}
		}
	else if(CurrentMenu = MENUEDITKEYPADS)
		{
		if(Index = 4)
			{
			Call EditKeypadDone();
			}
		}



		}*/
	}

RELEASE SoftButton
	{
	INTEGER Index;

	Index = getlastmodifiedarrayindex();
	if(CurrentMenu = MENUEDITTEXT)
		{
		if(Index = 1)
			{
			TextEditSoftKey1 = 0;
			}
		else if(Index = 2)
			{
			TextEditSoftKey2 = 0;
			}
		else if(Index = 3)
			{
			TextEditSoftKey3 = 0;
			}
		else if(Index = 4)
			{
			TextEditSoftKey4 = 0;
			}
		}
	}


PUSH Enter
	{
	INTEGER Selection;
	INTEGER i;
	STRING Temp$[18];

	Selection = ScrollIndex;
	switch(CurrentMenu)
		{
		case(MENUMAIN):
			{
			OldScrollIndex = ScrollIndex;
		//	if(SystemType = OOTBF)
		//		{
				if(Selection = 1)
					{
					CurrentMenu = MENUAUDIO;
					SerialOut$[1] = "    Audio Setup";
					ScrollIndex = 1;
					ScrollMax = AUDIOMENUENTRIES;
					if (DEVICE_TYPE = 1 )
						ScrollMax = AUDIOMENUENTRIES -1;
					Call RefreshAudioList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUVIDEO;
					SerialOut$[1] = "    Video Setup";
					ScrollIndex = 1;
					ScrollMax = VIDEOMENUENTRIES;
					Call RefreshVideoList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUNETWORK;
					SerialOut$[1] = "   Network Setup";
					ScrollIndex = 1;
					ScrollMax = NETWORKMENUENTRIES;
					Call RefreshNetworkList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 4)
					{
					/*
					CurrentMenu = MENUCONTROL;
					SerialOut$[1] = "   Control Setup";
					ScrollIndex = 1;
					ScrollMax = CONTROLMENUENTRIES;
					Call RefreshControlList(ScrollMax, ScrollIndex);
                      */

					CurrentMenu = MENUCONTROL;
					SerialOut$[1] = "   Control Setup";
					ScrollIndex = 1;
					ScrollMax = 7;
					Call RefreshControlList(ScrollMax, ScrollIndex);

					}
			/*	}
			else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
				{
                if(Selection = 1)
					{
					CurrentMenu = MENUAUDIO;
					SerialOut$[1] = "    Audio Setup";
					ScrollIndex = 1;
					ScrollMax = AUDIOMENUENTRIES;
					Call RefreshAudioList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUVIDEO;
					SerialOut$[1] = "    Video Setup";
					ScrollIndex = 1;
					ScrollMax = 1;
					Call RefreshVideoList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUNETWORK;
					SerialOut$[1] = "   Network Setup";
					ScrollIndex = 1;
					ScrollMax = 8;
					Call RefreshNetworkList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUCONTROL;
					SerialOut$[1] = "   Control Setup";
					ScrollIndex = 1;
					ScrollMax = 7;
					Call RefreshControlList(ScrollMax, ScrollIndex);
					}
					
				}*/
			}
		case(MENUAUDIO):
			{
			OldAudioScrollIndex = ScrollIndex;
			if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUAUDIOSIGNALTYPE;
					SerialOut$[1] = "  Sel. Input Type";
					ScrollIndex = 1;
					ScrollMax = 5;//NumberOfInputs - 2;
					if (DEVICE_TYPE = 1)
						ScrollMax = 4;
					Call RefreshAudioSourceTypeList(ScrollMax, ScrollIndex);
					}

				else if(Selection = 2)
					{
					CurrentMenu = MENUPROGRAM;
					SerialOut$[1] = "   Program Output";
					ScrollIndex = 1;
					ScrollMax = PROGAUDIOMENUENTRIES;
					Call RefreshProgAudioOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENURECORD;
					SerialOut$[1] = "   Aux. 1 Output";
					ScrollIndex = 1;
					ScrollMax = RECAUDIOMENUENTRIES;
					Call RefreshRecAudioOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUSPEECH;
					SerialOut$[1] = "   Aux. 2 Output";
					ScrollIndex = 1;
					ScrollMax = SPCHAUDIOMENUENTRIES;
					Call RefreshSpchAudioOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUINPUTTRIM;
					SerialOut$[1] = " Input Compensation";
					ScrollIndex = 1;
					if (DEVICE_TYPE = 3)
						ScrollMax = INPUTCOMP300NUMENTRIES;
					else if (DEVICE_TYPE = 2)
						ScrollMax = INPUTCOMP200NUMENTRIES;
					else if (DEVICE_TYPE = 1)
						ScrollMax = INPUTCOMP100NUMENTRIES;

					Call RefreshInputCompOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUMICROPHONE;
					SerialOut$[1] = "    Microphones";
					ScrollIndex = 1;
					if (DEVICE_TYPE = 3)
						ScrollMax = MICMENUENTRIES;
					else if (DEVICE_TYPE = 2)
						ScrollMax = MIC200MENUENTRIES;
					if (DEVICE_TYPE = 1)
					ScrollMax = MIC100MENUENTRIES;
					Call RefreshMicOutList(ScrollMax, ScrollIndex);
					}
				}
			else if (DEVICE_TYPE =1)
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUAUDIOSIGNALTYPE;
					SerialOut$[1] = "  Sel. Input Type";
					ScrollIndex = 1;
					ScrollMax = 4;
					Call RefreshAudioSourceTypeList(ScrollMax, ScrollIndex);
					}

				else if(Selection = 2)
					{
					CurrentMenu = MENUPROGRAM;
					SerialOut$[1] = "   Program Output";
					ScrollIndex = 1;
					ScrollMax = PROGAUDIOMENUENTRIES;
					Call RefreshProgAudioOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENURECORD;
					SerialOut$[1] = "   Aux. 1 Output";
					ScrollIndex = 1;
					ScrollMax = RECAUDIOMENUENTRIES;
					Call RefreshRecAudioOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUINPUTTRIM;
					SerialOut$[1] = " Input Compensation";
					ScrollIndex = 1;
					if (DEVICE_TYPE = 3)
						ScrollMax = INPUTCOMP300NUMENTRIES;
					else if (DEVICE_TYPE = 2)
						ScrollMax = INPUTCOMP200NUMENTRIES;
					else if (DEVICE_TYPE = 1)
						ScrollMax = INPUTCOMP100NUMENTRIES;

					Call RefreshInputCompOutList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUMICROPHONE;
					SerialOut$[1] = "    Microphones";
					ScrollIndex = 1;
					if (DEVICE_TYPE = 3)
						ScrollMax = MICMENUENTRIES;
					else if (DEVICE_TYPE = 2)
						ScrollMax = MIC200MENUENTRIES;
					if (DEVICE_TYPE = 1)
					ScrollMax = MIC100MENUENTRIES;
					Call RefreshMicOutList(ScrollMax, ScrollIndex);
					}
				}

	
			}
		case(MENUPROGRAM):
			{
			OldProgramAudioScrollIndex = ScrollIndex;
			if(Selection = 1)
				{
				CurrentMenu = MENUPROGSOURCEMIX;
				SerialOut$[1] = " Program Source Mix";
				ScrollIndex = 1;
				ScrollMax = PROGSOURCEMIXMENUENTRIES;
				Call RefreshProgSourceMixList(ScrollMax, ScrollIndex, ProgramSourceMixIn);
				}
			else if(Selection = 2)
				{
				CurrentMenu = MENUPROGBASS;
				SerialOut$[1] = "    Program Bass";
				Call RefreshSignedDisplay(-12, 12, Progbassin s/ 10);
				}
			else if(Selection = 3)
				{
				CurrentMenu = MENUPROGTREBLE;
				SerialOut$[1] = "   Program Treble";
				Call RefreshSignedDisplay(-12, 12, Progtreblein s/ 10);
				}
			else if(Selection = 4)
				{
				CurrentMenu = MENUPROGDELAY;
				SerialOut$[1] = "    Program Delay";
				Temp$ = AddUnSignedNumber(0, 853, ProgDelayin/10);
				Makestring(SerialOut$[2], "        %sms", Temp$);
				}

			else if(Selection = 5)
				{
				CurrentMenu = MENUPROGMINVOL;
				SerialOut$[1] = "  Prog. Min Volume";
				Call RefreshUnSignedDisplay(0, 50, ProgMinVolin);
				}
			else if(Selection = 6)
				{
				CurrentMenu = MENUPROGMAXVOL;
				SerialOut$[1] = "  Prog. Max Volume";
				Call RefreshUnSignedDisplay(50, 100, ProgMaxVolin);
				}
            else if(Selection = 7)
				{
				CurrentMenu = MENUPROGSTARTUPVOL;
				SerialOut$[1] = " Prog. Startup Vol.";
				Call RefreshUnSignedDisplay(0, 100, ProgStartUpVolin);
				}

			else if(Selection = 8)
				{
				CurrentMenu = MENUPROGMONO;
				SerialOut$[1] = " Select Stereo/Mono";
				ScrollIndex = 1;
				ScrollMax = PROGMONOMENUENTRIES;
				Call RefreshProgMonoTypeList(ScrollMax, ScrollIndex, ProgMonoModeConfigured);
				}
			}
		case(MENURECORD):
			{
			OldRecordAudioScrollIndex = ScrollIndex;
			if(Selection = 1)
				{
				CurrentMenu = MENURECSOURCEMIX;
				SerialOut$[1] = " Aux. 1 Source Mix";
				ScrollIndex = 1;
				ScrollMax = RECSOURCEMIXMENUENTRIES;
				Call RefreshRecSourceMixList(ScrollMax, ScrollIndex, RecordSourceMixIn);
				}
/*
			else if(Selection = 2)
				{
				CurrentMenu = MENURECFIXEDVARIABLE;
				SerialOut$[1] = "Aux. 1 Fixed/Variable";
				ScrollIndex = 1;
				ScrollMax = RECFIXEDVARIABLEMENUENTRIES;
				Call RefreshRecFixedVariableList(ScrollMax, ScrollIndex, RecFixedVariableIndex);
				}
*/

				else if(Selection = 2)
				{
				CurrentMenu = MENURECBASS;
				SerialOut$[1] = "    Aux. 1 Bass";
				Call RefreshSignedDisplay(-12, 12, Recbassin s/ 10);
				}
			else if(Selection = 3)
				{
				CurrentMenu = MENURECTREBLE;
				SerialOut$[1] = "    Aux. 1 Treble";
				Call RefreshSignedDisplay(-12, 12, Rectreblein s/ 10);
				}
			else if(Selection = 4)
				{
				CurrentMenu = MENURECDELAY;
				SerialOut$[1] = "    Aux. 1 Delay";
				Temp$ = AddUnSignedNumber(0, 853, RecDelayin/10);
				Makestring(SerialOut$[2], "        %sms", Temp$);
				}
			else if(Selection = 5)
				{
				CurrentMenu = MENURECMINVOL;
				SerialOut$[1] = "  Aux. 1 Min Volume";
				Call RefreshUnSignedDisplay(0, 50, RecMinVolin);
				}
			else if(Selection = 6)
				{
				CurrentMenu = MENURECMAXVOL;
				SerialOut$[1] = "  Aux. 1 Max Volume";
				Call RefreshUnSignedDisplay(50, 100, RecMaxVolin);
				}



			else if(Selection = 7)
				{
				CurrentMenu = MENURECSTARTUPVOL;
				/*if(RecFixedVariableIndex = 1)
					{
					SerialOut$[1] = "Current Aux.1 Startup";
					Makestring(SerialOut$[2], "is Fixed at %d%%", RecStartUpVolin);
					Line2ScrollArrow$ = ARROWNONE;
					}
*/
//				else if(RecFixedVariableIndex = 2)
//					{
					SerialOut$[1] = " Aux. 1 Startup Vol.";
					Call RefreshUnSignedDisplay(0, 100, RecStartUpVolin);
//					}
				}



			}
		case(MENUSPEECH):
			{
			OldSpeechAudioScrollIndex = ScrollIndex;
			if(Selection = 1)
				{
				CurrentMenu = MENUSPCHSOURCEMIX;
				SerialOut$[1] = " Aux. 2 Source Mix";
				ScrollIndex = 1;
				ScrollMax = SPCHSOURCEMIXMENUENTRIES;
				Call RefreshSpchSourceMixList(ScrollMax, ScrollIndex, SpeechSourceMixIn);
				}
			else if(Selection = 2)
				{
				CurrentMenu = MENUSPCHBASS;
				SerialOut$[1] = "    Aux. 2 Bass";
				Call RefreshSignedDisplay(-12, 12, Spchbassin s/ 10);
				}
			else if(Selection = 3)
				{
				CurrentMenu = MENUSPCHTREBLE;
				SerialOut$[1] = "   Aux. 2 Treble";
				Call RefreshSignedDisplay(-12, 12, Spchtreblein s/ 10);
				}
			else if(Selection = 4)
				{
				CurrentMenu = MENUSPCHDELAY;
				SerialOut$[1] = "    Aux. 2 Delay";
				Temp$ = AddUnSignedNumber(0, 853, SpchDelayin/10);
				Makestring(SerialOut$[2], "        %sms", Temp$);
				}
/*			
		else if(Selection = 5)
				{
				CurrentMenu = MENUSPCHPROGVOL;
				SerialOut$[1] = "  Prog/Aux2 Vol.";
				ScrollIndex = 1;
				ScrollMax = SPCHPROGVOLMENUENTRIES;
				Call RefreshSpchProgVolList(ScrollMax, ScrollIndex, SpchProgVolIndex);
				}
*/
			else if(Selection = 5)
				{
				CurrentMenu = MENUSPCHMINVOL;
				SerialOut$[1] = "  Aux. 2 Min Volume";
				Call RefreshUnSignedDisplay(0, 50, SpchMinVolin);
				}
			else if(Selection = 6)
				{
				CurrentMenu = MENUSPCHMAXVOL;
				SerialOut$[1] = "  Aux. 2 Max Volume";
				Call RefreshUnSignedDisplay(50, 100, SpchMaxVolin);
				}
			else if(Selection = 7)
				{
				CurrentMenu = MENUSPCHSTARTUPVOL;
				SerialOut$[1] = " Aux. 2 Startup Vol.";
				Call RefreshUnSignedDisplay(0, 100, SpchStartUpVolin);
				}
			}
		case(MENUMICROPHONE):
			{
			OldMicScrollIndex = ScrollIndex;
			if (DEVICE_TYPE = 3)
				{
				if(Selection = 1)
					{
        	        CurrentMenu = MENUMIC1GATING;
					SerialOut$[1] = "    Mic 1 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC1GATINGMENUENTRIES;
					Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
					}
				else if(Selection = 2)
					{
        	        CurrentMenu = MENUMIC2GATING;
					SerialOut$[1] = "    Mic 2 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC2GATINGMENUENTRIES;
					Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
					}
				else if(Selection = 3)
					{
        	        CurrentMenu = MENUMIC3GATING;
					SerialOut$[1] = "    Mic 3 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC3GATINGMENUENTRIES;
					Call RefreshMic3GatingList(ScrollMax, ScrollIndex, Mic3GatingIn + 1);
					}
				else if(Selection = 4)
					{
    	            CurrentMenu = MENUMIC4GATING;
					SerialOut$[1] = "    Mic 4 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC4GATINGMENUENTRIES;
					Call RefreshMic4GatingList(ScrollMax, ScrollIndex, Mic4GatingIn + 1);
					}
				else if(Selection = 5)
					{
                	CurrentMenu = MENUMIC5GATING;
					SerialOut$[1] = "    Mic 5 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC5GATINGMENUENTRIES;
					Call RefreshMic5GatingList(ScrollMax, ScrollIndex, Mic5GatingIn + 1);
					}
				else if(Selection = 6)
					{
                	CurrentMenu = MENUMIC6GATING;
					SerialOut$[1] = "    Mic 6 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC6GATINGMENUENTRIES;
					Call RefreshMic6GatingList(ScrollMax, ScrollIndex, Mic6GatingIn + 1);
					}


				else if(Selection = 7)
					{
					CurrentMenu = MENUMIC1COMPRESSION;
					SerialOut$[1] = "   Mic 1 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC1COMPRESSIONMENUENTRIES;
					Call RefreshMic1CompressionList(ScrollMax, ScrollIndex, Mic1CompressionIn + 1);
					}
				else if(Selection = 8)
					{
					CurrentMenu = MENUMIC2COMPRESSION;
					SerialOut$[1] = "   Mic 2 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC2COMPRESSIONMENUENTRIES;
					Call RefreshMic2CompressionList(ScrollMax, ScrollIndex, Mic2CompressionIn + 1);
					}
				else if(Selection = 9)
					{
					CurrentMenu = MENUMIC3COMPRESSION;
					SerialOut$[1] = "   Mic 3 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC3COMPRESSIONMENUENTRIES;
					Call RefreshMic3CompressionList(ScrollMax, ScrollIndex, Mic3CompressionIn + 1);
					}
				else if(Selection = 10)
					{
					CurrentMenu = MENUMIC4COMPRESSION;
					SerialOut$[1] = "   Mic 4 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC4COMPRESSIONMENUENTRIES;
					Call RefreshMic4CompressionList(ScrollMax, ScrollIndex, Mic4CompressionIn + 1);
					}
				else if(Selection = 11)
					{
					CurrentMenu = MENUMIC5COMPRESSION;
					SerialOut$[1] = "   Mic 5 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC5COMPRESSIONMENUENTRIES;
					Call RefreshMic5CompressionList(ScrollMax, ScrollIndex, Mic5CompressionIn + 1);
					}
				else if(Selection = 12)
					{
					CurrentMenu = MENUMIC6COMPRESSION;
					SerialOut$[1] = "   Mic 6 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC6COMPRESSIONMENUENTRIES;
					Call RefreshMic6CompressionList(ScrollMax, ScrollIndex, Mic6CompressionIn + 1);
					}
				else if(Selection = 13)
					{
					CurrentMenu = MENUMIC1LIMITER;
					SerialOut$[1] = "   Mic 1 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC1LIMITERMENUENTRIES;
					Call RefreshMic1LimiterList(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
					}

				else if(Selection = 14)
					{
					CurrentMenu = MENUMIC2LIMITER;
					SerialOut$[1] = "   Mic 2 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC2LIMITERMENUENTRIES;
					Call RefreshMic2LimiterList(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
					}
            
				else if(Selection = 15)
					{
					CurrentMenu = MENUMIC3LIMITER;
					SerialOut$[1] = "   Mic 3 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC3LIMITERMENUENTRIES;
					Call RefreshMic3LimiterList(ScrollMax, ScrollIndex, Mic3LimiterIn + 1);
					}

				else if(Selection = 16)
					{
					CurrentMenu = MENUMIC4LIMITER;
					SerialOut$[1] = "   Mic 4 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC4LIMITERMENUENTRIES;
					Call RefreshMic4LimiterList(ScrollMax, ScrollIndex, Mic4LimiterIn + 1);
					}

				else if(Selection = 17)
					{
					CurrentMenu = MENUMIC5LIMITER;
					SerialOut$[1] = "   Mic 5 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC5LIMITERMENUENTRIES;
					Call RefreshMic5LimiterList(ScrollMax, ScrollIndex, Mic5LimiterIn + 1);
					}

				else if(Selection = 18)
					{
					CurrentMenu = MENUMIC6LIMITER;
					SerialOut$[1] = "   Mic 6 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC6LIMITERMENUENTRIES;
					Call RefreshMic6LimiterList(ScrollMax, ScrollIndex, Mic6LimiterIn + 1);
					}

				else if(Selection = 19)
					{
					CurrentMenu = MENUMIC1GAIN;
					MicGainIndex = 1;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 20)
					{
					CurrentMenu = MENUMIC2GAIN;
					MicGainIndex = 2;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 21)
					{
					CurrentMenu = MENUMIC3GAIN;
					MicGainIndex = 3;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 22)
					{
					CurrentMenu = MENUMIC4GAIN;
					MicGainIndex = 4;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 23)
					{
					CurrentMenu = MENUMIC5GAIN;
					MicGainIndex = 5;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 24)
					{
					CurrentMenu = MENUMIC6GAIN;
					MicGainIndex = 6;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				}
			else if (DEVICE_TYPE = 2)
				{
				if(Selection = 1)
					{
        	        CurrentMenu = MENUMIC1GATING;
					SerialOut$[1] = "    Mic 1 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC1GATINGMENUENTRIES;
					Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
					}
				else if(Selection = 2)
					{
        	        CurrentMenu = MENUMIC2GATING;
					SerialOut$[1] = "    Mic 2 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC2GATINGMENUENTRIES;
					Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
					}
				else if(Selection = 3)
					{
        	        CurrentMenu = MENUMIC3GATING;
					SerialOut$[1] = "    Mic 3 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC3GATINGMENUENTRIES;
					Call RefreshMic3GatingList(ScrollMax, ScrollIndex, Mic3GatingIn + 1);
					}
				else if(Selection = 4)
					{
    	            CurrentMenu = MENUMIC4GATING;
					SerialOut$[1] = "    Mic 4 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC4GATINGMENUENTRIES;
					Call RefreshMic4GatingList(ScrollMax, ScrollIndex, Mic4GatingIn + 1);
					}
			
				else if(Selection = 5)
					{
					CurrentMenu = MENUMIC1COMPRESSION;
					SerialOut$[1] = "   Mic 1 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC1COMPRESSIONMENUENTRIES;
					Call RefreshMic1CompressionList(ScrollMax, ScrollIndex, Mic1CompressionIn + 1);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUMIC2COMPRESSION;
					SerialOut$[1] = "   Mic 2 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC2COMPRESSIONMENUENTRIES;
					Call RefreshMic2CompressionList(ScrollMax, ScrollIndex, Mic2CompressionIn + 1);
					}
				else if(Selection = 7)
					{
					CurrentMenu = MENUMIC3COMPRESSION;
					SerialOut$[1] = "   Mic 3 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC3COMPRESSIONMENUENTRIES;
					Call RefreshMic3CompressionList(ScrollMax, ScrollIndex, Mic3CompressionIn + 1);
					}
				else if(Selection = 8)
					{
					CurrentMenu = MENUMIC4COMPRESSION;
					SerialOut$[1] = "   Mic 4 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC4COMPRESSIONMENUENTRIES;
					Call RefreshMic4CompressionList(ScrollMax, ScrollIndex, Mic4CompressionIn + 1);
					}
				else if(Selection = 9)
					{
					CurrentMenu = MENUMIC1LIMITER;
					SerialOut$[1] = "   Mic 1 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC1LIMITERMENUENTRIES;
					Call RefreshMic1LimiterList(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
					}

				else if(Selection = 10)
					{
					CurrentMenu = MENUMIC2LIMITER;
					SerialOut$[1] = "   Mic 2 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC2LIMITERMENUENTRIES;
					Call RefreshMic2LimiterList(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
					}
            
				else if(Selection = 11)
					{
					CurrentMenu = MENUMIC3LIMITER;
					SerialOut$[1] = "   Mic 3 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC3LIMITERMENUENTRIES;
					Call RefreshMic3LimiterList(ScrollMax, ScrollIndex, Mic3LimiterIn + 1);
					}

				else if(Selection = 12)
					{
					CurrentMenu = MENUMIC4LIMITER;
					SerialOut$[1] = "   Mic 4 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC4LIMITERMENUENTRIES;
					Call RefreshMic4LimiterList(ScrollMax, ScrollIndex, Mic4LimiterIn + 1);
					}

			
				else if(Selection = 13)
					{
					CurrentMenu = MENUMIC1GAIN;
					MicGainIndex = 1;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 14)
					{
					CurrentMenu = MENUMIC2GAIN;
					MicGainIndex = 2;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 15)
					{
					CurrentMenu = MENUMIC3GAIN;
					MicGainIndex = 3;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 16)
					{
					CurrentMenu = MENUMIC4GAIN;
					MicGainIndex = 4;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
		            }
    			}
			else if (DEVICE_TYPE = 1)
				{
				if(Selection = 1)
					{
        	        CurrentMenu = MENUMIC1GATING;
					SerialOut$[1] = "    Mic 1 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC1GATINGMENUENTRIES;
					Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
					}
				else if(Selection = 2)
					{
        	        CurrentMenu = MENUMIC2GATING;
					SerialOut$[1] = "    Mic 2 Gating";
					ScrollIndex = 1;
					ScrollMax = MIC2GATINGMENUENTRIES;
					Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
					}
						
				else if(Selection = 3)
					{
					CurrentMenu = MENUMIC1COMPRESSION;
					SerialOut$[1] = "   Mic 1 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC1COMPRESSIONMENUENTRIES;
					Call RefreshMic1CompressionList(ScrollMax, ScrollIndex, Mic1CompressionIn + 1);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUMIC2COMPRESSION;
					SerialOut$[1] = "   Mic 2 Compression";
					ScrollIndex = 1;
					ScrollMax = MIC2COMPRESSIONMENUENTRIES;
					Call RefreshMic2CompressionList(ScrollMax, ScrollIndex, Mic2CompressionIn + 1);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUMIC1LIMITER;
					SerialOut$[1] = "   Mic 1 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC1LIMITERMENUENTRIES;
					Call RefreshMic1LimiterList(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
					}

				else if(Selection = 6)
					{
					CurrentMenu = MENUMIC2LIMITER;
					SerialOut$[1] = "   Mic 2 Limiter";
					ScrollIndex = 1;
					ScrollMax = MIC2LIMITERMENUENTRIES;
					Call RefreshMic2LimiterList(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
					}
           	
				else if(Selection = 7)
					{
					CurrentMenu = MENUMIC1GAIN;
					MicGainIndex = 1;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				else if(Selection = 8)
					{
					CurrentMenu = MENUMIC2GAIN;
					MicGainIndex = 2;
					Call RefreshMicGainDisplay(MicGainIndex, MicGainin[MicGainIndex]);
					}
				}

			}

		case(MENUINPUTTRIM):
			{
			OldInputTrimScrollIndex = ScrollIndex;

			if (DEVICE_TYPE = 3)
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUSRCGAIN1;
					SrcGainIndex = 1;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUSRCGAIN2;
					SrcGainIndex = 2;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUSRCGAIN3;
					SrcGainIndex = 3;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUSRCGAIN4;
					SrcGainIndex = 4;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
   				else if(Selection = 5)
						{
					CurrentMenu = MENUSRCGAIN5;
					SrcGainIndex = 5;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,5);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUSRCGAIN6;
					SrcGainIndex = 6;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,6);
					}
	   			else if(Selection = 7)
					{
					CurrentMenu = MENUSRCGAIN8;
					SrcGainIndex = 8;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
   				else if(Selection = 8)
					{
					CurrentMenu = MENUSRCGAIN9;
					SrcGainIndex = 9;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
   				else if(Selection = 9)
					{
					CurrentMenu = MENUSRCGAIN10;
					SrcGainIndex = 10;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
   				else if(Selection = 10)
					{
					CurrentMenu = MENUSRCGAIN11;
					SrcGainIndex = 11;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
	   			else if(Selection = 11)
					{
					CurrentMenu = MENUSRCGAIN12;
					SrcGainIndex = 12;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,5);
					}
   				else if(Selection = 12)
					{
					CurrentMenu = MENUSRCGAIN13;
					SrcGainIndex = 13;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,6);
					}
	   			else if(Selection = 13)
					{
					CurrentMenu = MENUSRCGAIN14;
					SrcGainIndex = 14;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,7);
					}	
                }
			else if (DEVICE_TYPE = 2)
				{
					if(Selection = 1)
					{
					CurrentMenu = MENUSRCGAIN1;
					SrcGainIndex = 1;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUSRCGAIN2;
					SrcGainIndex = 2;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUSRCGAIN3;
					SrcGainIndex = 3;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUSRCGAIN4;
					SrcGainIndex = 4;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
   				else if(Selection = 5)
						{
					CurrentMenu = MENUSRCGAIN5;
					SrcGainIndex = 5;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,5);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUSRCGAIN6;
					SrcGainIndex = 6;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,6);
					}
	   			else if(Selection = 7)
					{
					CurrentMenu = MENUSRCGAIN8;
					SrcGainIndex = 8;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
   				else if(Selection = 8)
					{
					CurrentMenu = MENUSRCGAIN9;
					SrcGainIndex = 9;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
   				else if(Selection = 9)
					{
					CurrentMenu = MENUSRCGAIN10;
					SrcGainIndex = 10;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
   				else if(Selection = 10)
					{
					CurrentMenu = MENUSRCGAIN11;
					SrcGainIndex = 11;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
	   			else if(Selection = 11)
					{
					CurrentMenu = MENUSRCGAIN12;
					SrcGainIndex = 12;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,5);
					}
   				else if(Selection = 12)
					{
					CurrentMenu = MENUSRCGAIN13;
					SrcGainIndex = 13;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,6);
					}
				}
			else if (DEVICE_TYPE = 1)
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUSRCGAIN1;
					SrcGainIndex = 1;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUSRCGAIN2;
					SrcGainIndex = 2;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUSRCGAIN3;
					SrcGainIndex = 3;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUSRCGAIN4;
					SrcGainIndex = 4;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
   				else if(Selection = 5)
						{
					CurrentMenu = MENUSRCGAIN6;
					SrcGainIndex = 6;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,6);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUSRCGAIN9;
					SrcGainIndex = 9;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,1);
					}
	   			else if(Selection = 7)
					{
					CurrentMenu = MENUSRCGAIN10;
					SrcGainIndex = 10;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,2);
					}
   				else if(Selection = 8)
					{
					CurrentMenu = MENUSRCGAIN11;
					SrcGainIndex = 11;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,3);
					}
   				else if(Selection = 9)
					{
					CurrentMenu = MENUSRCGAIN12;
					SrcGainIndex = 12;
					Call RefreshGainDisplay(SrcGainIndex, SourceGain[SrcGainIndex] s/ 10,4);
					}
   				}


			}
		case(MENUPROGSOURCEMIX):
			{
			if(Selection = 1)
				{
				ProgSourceMixConfigured = 1;
				ProgSourceMixIndex = ProgSourceMixConfigured;
				}
			else if(Selection = 2)
				{
				ProgSourceMixConfigured = 2;
				ProgSourceMixIndex = ProgSourceMixConfigured;
				}
			else if(Selection = 3)
				{
				ProgSourceMixConfigured = 3;
				ProgSourceMixIndex = ProgSourceMixConfigured;
				}
			Call RefreshProgAudioMenu();
			}
		case(MENUPROGBASS):
			{
				Call RefreshProgAudioMenu();
			}
		case(MENUPROGTREBLE):
			{
				Call RefreshProgAudioMenu();
			}
		case(MENUPROGMINVOL):
			{
				Call RefreshProgAudioMenu();
			}
		case(MENUPROGMAXVOL):
			{
				Call RefreshProgAudioMenu();
			}
		case(MENUPROGMONO):
			{
			if(Selection = 1)
				{
				ProgMonoModeConfigured = 1;
				ProgMonoModeIndex = ProgMonoModeConfigured;
				}
			else if(Selection = 2)
				{
				ProgMonoModeConfigured = 2;
				ProgMonoModeIndex = ProgMonoModeConfigured;
				}
			Call RefreshProgAudioMenu();
			}
		case(MENUPROGSTARTUPVOL):
			{
				Call RefreshProgAudioMenu();
			}
		case(MENUPROGDELAY):
			{
				Call RefreshProgAudioMenu();
			}


		case(MENURECSOURCEMIX):
			{
			if(Selection = 1)
				{
				RecSourceMixConfigured = 1;
				RecSourceMixIndex = RecSourceMixConfigured;
				}
			else if(Selection = 2)
				{
				RecSourceMixConfigured = 2;
				RecSourceMixIndex = RecSourceMixConfigured;
				}
			else if(Selection = 3)
				{
				RecSourceMixConfigured = 3;
				RecSourceMixIndex = RecSourceMixConfigured;
				}
			Call RefreshRecAudioMenu();
			}
		case(MENURECFIXEDVARIABLE):
			{
			if(Selection = 1)
				{
				RecFixedVariableConfigured = 1;
				RecFixedVariableIndex = RecFixedVariableConfigured;
				}
			else if(Selection = 2)
				{
				RecFixedVariableConfigured = 2;
				RecFixedVariableIndex = RecFixedVariableConfigured;
				}
			Call RefreshRecAudioMenu();
			}
		case(MENURECBASS):
			{
				Call RefreshRecAudioMenu();
			}
		case(MENURECTREBLE):
			{
				Call RefreshRecAudioMenu();
			}
		case(MENURECSTARTUPVOL):
			{
				Call RefreshRecAudioMenu();
			}
		case (MENURECMINVOL):
			{
				Call RefreshRecAudioMenu();
			}
		case (MENURECMAXVOL):
			{
				Call RefreshRecAudioMenu();
			}
		case (MENURECDELAY):
			{
				Call RefreshRecAudioMenu();
			}



		case(MENUSPCHSOURCEMIX):
			{
			if(Selection = 1)
				{
				SpchSourceMixConfigured = 1;
				SpchSourceMixIndex = SpchSourceMixConfigured;
				}
			else if(Selection = 2)
				{
				SpchSourceMixConfigured = 2;
				SpchSourceMixIndex = SpchSourceMixConfigured;
				}
			else if(Selection = 3)
				{
				SpchSourceMixConfigured = 3;
				SpchSourceMixIndex = SpchSourceMixConfigured;
				}
			Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHBASS):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHTREBLE):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHDELAY):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHPROGVOL):
			{
			if(Selection = 1)
				{
				SpchProgVolConfigured = 1;
				SpchProgVolIndex = SpchProgVolConfigured;
				}
			else if(Selection = 2)
				{
				SpchProgVolConfigured = 2;
				SpchProgVolIndex = SpchProgVolConfigured;
				}
			else if(Selection = 3)
				{
				SpchProgVolConfigured = 3;
				SpchProgVolIndex = SpchProgVolConfigured;
				}
			else if(Selection = 4)
				{
				SpchProgVolConfigured = 4;
				SpchProgVolIndex = SpchProgVolConfigured;
				}
			Call RefreshSpchAudioMenu();
			}

		case(MENUSPCHMINVOL):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHMAXVOL):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUSPCHSTARTUPVOL):
			{
				Call RefreshSpchAudioMenu();
			}
		case(MENUMIC1GATING):
			{
			if(Selection = 1)
				{
				//Mic1GatingConfigured = 0;
				MicGatingOn[1] = 0;
				MicGatingOff[1] = 1;

				}
			else if(Selection = 2)
				{
				//Mic1GatingConfigured = 1;
				MicGatingOn[1] = 1;
				MicGatingOff[1] = 0;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC2GATING):
			{
			if(Selection = 1)
				{
//				Mic2GatingConfigured = 0;
				MicGatingOn[2] = 0;
				MicGatingOff[2] = 1;

				}
			else if(Selection = 2)
				{
//				Mic2GatingConfigured = 1;
				MicGatingOn[2] = 1;
				MicGatingOff[2] = 0;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC3GATING):
			{
			if(Selection = 1)
				{
				//Mic3GatingConfigured = 0;
				MicGatingOn[3] = 0;
				MicGatingOff[3] = 1;

				}
			else if(Selection = 2)
				{
		//		Mic3GatingConfigured = 1;
				MicGatingOn[3] = 1;
				MicGatingOff[3] = 0;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC4GATING):
			{
			if(Selection = 1)
				{
			//	Mic4GatingConfigured = 0;
				MicGatingOn[4] = 0;
				MicGatingOff[4] = 1;

				}
			else if(Selection = 2)
				{
			//	Mic4GatingConfigured = 1;
				MicGatingOn[4] = 1;
				MicGatingOff[4] = 0;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC5GATING):
			{
			if(Selection = 1)
				{
			//	Mic5GatingConfigured = 0;
				MicGatingOn[5] = 0;
				MicGatingOff[5] = 1;

				}
			else if(Selection = 2)
				{
			//	Mic5GatingConfigured = 1;
				MicGatingOn[5] = 1;
				MicGatingOff[5] = 0;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC6GATING):
			{
			if(Selection = 1)
				{
			//	Mic6GatingConfigured = 0;
				MicGatingOn[6] = 0;
				MicGatingOff[6] = 1;

				}
			else if(Selection = 2)
				{
			//	Mic6GatingConfigured = 1;
				MicGatingOn[6] = 1;
				MicGatingOff[6] = 0;

				}
			Call RefreshMicMenu();
			}





		case(MENUMIC1COMPRESSION):
			{
			if(Selection = 1)
				{
				//Mic1CompressionConfigured = 0;
				MicCompressionOff[1] = 1;
				MicCompressionOn[1] = 0;

				}
			else if(Selection = 2)
				{
				//Mic1CompressionConfigured = 1;
				MicCompressionOff[1] = 0;
				MicCompressionOn[1] = 1;

				}
			Call RefreshMicMenu();
			}

		case(MENUMIC2COMPRESSION):
			{
			if(Selection = 1)
				{
			//	Mic2CompressionConfigured = 0;
				MicCompressionOff[2] = 1;
				MicCompressionOn[2] = 0;

				}
			else if(Selection = 2)
				{
			//	Mic2CompressionConfigured = 1;
				MicCompressionOff[2] = 0;
				MicCompressionOn[2] = 1;

				}
			Call RefreshMicMenu();
			}
		case(MENUMIC3COMPRESSION):
			{
			if(Selection = 1)
				{
		//		Mic3CompressionConfigured = 0;
				MicCompressionOff[3] = 1;
				MicCompressionOn[3] = 0;

				}
			else if(Selection = 2)
				{
		//		Mic3CompressionConfigured = 1;
				MicCompressionOff[3] = 0;
				MicCompressionOn[3] = 1;
				}
			Call RefreshMicMenu();
			}
		case(MENUMIC4COMPRESSION):
			{
			if(Selection = 1)
				{
//				Mic4CompressionConfigured = 0;
				MicCompressionOff[4] = 1;
				MicCompressionOn[4] = 0;

				}
			else if(Selection = 2)
				{
	//			Mic4CompressionConfigured = 1;
				MicCompressionOff[4] = 1;
				MicCompressionOn[4] = 0;

				}
			Call RefreshMicMenu();
			}
               
		case(MENUMIC5COMPRESSION):
			{
			if(Selection = 1)
				{
			//	Mic5CompressionConfigured = 0;
				MicCompressionOff[5] = 1;
				MicCompressionOn[5] = 0;

				}
			else if(Selection = 2)
				{
		//		Mic5CompressionConfigured = 1;
				MicCompressionOff[5] = 0;
				MicCompressionOn[5] = 1;

				}
			Call RefreshMicMenu();
			}

		case(MENUMIC6COMPRESSION):
			{
			if(Selection = 1)
				{
		//		Mic6CompressionConfigured = 0;
				MicCompressionOff[6] = 1;
				MicCompressionOn[6] = 0;

				}
			else if(Selection = 2)
				{
	//			Mic6CompressionConfigured = 1;
				MicCompressionOff[6] = 0;
				MicCompressionOn[6] = 1;

				}
			Call RefreshMicMenu();
			}





		case(MENUMIC1LIMITER):
			{
			if(Selection = 1)
				{
		//		Mic1LimiterConfigured = 0;
				MicLimiterOn[1] = 0;
				MicLimiterOff[1] = 1;

				}
			else if(Selection = 2)
				{
		//		Mic1LimiterConfigured = 1;
				MicLimiterOn[1] = 1;
				MicLimiterOff[1] = 0;

				}
			Call RefreshMicMenu();
			}

		case(MENUMIC2LIMITER):
			{
			if(Selection = 1)
				{
		//		Mic2LimiterConfigured = 0;
				MicLimiterOn[2] = 0;
				MicLimiterOff[2] = 1;

				}
			else if(Selection = 2)
				{
		//		Mic2LimiterConfigured = 1;
				MicLimiterOn[2] = 1;
				MicLimiterOff[2] = 0;

				}
			Call RefreshMicMenu();
			}

		case(MENUMIC3LIMITER):
			{
			if(Selection = 1)
				{
		//		Mic3LimiterConfigured = 0;
				MicLimiterOn[3] = 0;
				MicLimiterOff[3] = 1;

				}
			else if(Selection = 2)
				{
		//		Mic3LimiterConfigured = 1;
				MicLimiterOn[3] = 1;
				MicLimiterOff[3] = 0;

				}
			Call RefreshMicMenu();
			}
                   
		case(MENUMIC4LIMITER):
			{
			if(Selection = 1)
				{
		//		Mic4LimiterConfigured = 0;
				MicLimiterOn[4] = 0;
				MicLimiterOff[4] = 1;

				}
			else if(Selection = 2)
				{
//				Mic4LimiterConfigured = 1;
				MicLimiterOn[4] = 1;
				MicLimiterOff[4] = 0;

				}
			Call RefreshMicMenu();
			}

        case(MENUMIC5LIMITER):
			{
			if(Selection = 1)
				{
		//		Mic5LimiterConfigured = 0;
				MicLimiterOn[5] = 0;
				MicLimiterOff[5] = 1;

				}
			else if(Selection = 2)
				{
		//		Mic5LimiterConfigured = 1;
				MicLimiterOn[5] = 1;
				MicLimiterOff[5] = 0;

				}
			Call RefreshMicMenu();
			}
 
		case(MENUMIC6LIMITER):
			{
			if(Selection = 1)
				{
	//			Mic6LimiterConfigured = 0;
				MicLimiterOn[6] = 0;
				MicLimiterOff[6] = 1;

				}
			else if(Selection = 2)
				{
	//			Mic6LimiterConfigured = 1;
				MicLimiterOn[6] = 1;
				MicLimiterOff[6] = 0;

				}
			Call RefreshMicMenu();
			}

		case(MENUPHANTOM):
			{
			if(Selection = 1)
				{
				PhantomPowerConfigured = 0;
				}
			else if(Selection = 2)
				{
				PhantomPowerConfigured = 1;
				}
			Call RefreshMicMenu();
			}

		case(MENUMIC1GAIN):
			{
				Call RefreshMicMenu();
			}
		case(MENUMIC2GAIN):
			{
				Call RefreshMicMenu();
			}
		case(MENUMIC3GAIN):
			{
				Call RefreshMicMenu();
			}
		case(MENUMIC4GAIN):
			{
				Call RefreshMicMenu();
			}
 		case(MENUMIC5GAIN):
			{
				Call RefreshMicMenu();
			}
		case(MENUMIC6GAIN):
			{
				Call RefreshMicMenu();
			}

		case(MENUSRCGAIN1):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN2):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN3):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN4):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN5):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN6):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN7):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN8):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN9):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN10):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN11):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN12):
			{
				Call RefreshInputTrimMenu();
			}
		case(MENUSRCGAIN13):
			{
				Call RefreshInputTrimMenu();
			}
         case(MENUSRCGAIN14):
			{
				Call RefreshInputTrimMenu();
			}






		case(MENUMASTERSTARTUPVOL):
			{
            	Call RefreshAudioMenu();
			}
		case(MENUVIDEO):
			{
				OldVideoScrollIndex = ScrollIndex;
			//	if( (SystemType = OOTBF) || ( SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
			//		{
					if(Selection = 1)
						{
						CurrentMenu = MENUINPUT;
						SerialOut$[1] = " Sel. Input To Name";
						ScrollIndex = 1;
//						ScrollMax = NumberOfInputs;
						if (DEVICE_TYPE = 3)
							ScrollMax = 7;
						else if (DEVICE_TYPE = 2)
							ScrollMax = 6;
						else if (DEVICE_TYPE = 1)
							ScrollMax = 4;

						Call RefreshSourceList(ScrollMax, ScrollIndex);
						}
					else if(Selection = 2)
						{
						CurrentMenu = MENUSIGNALTYPE;
						SerialOut$[1] = "  Sel. Input Type";
						ScrollIndex = 1;
						if (DEVICE_TYPE = 3)
							ScrollMax = 5;
						else if (DEVICE_TYPE = 2)
							ScrollMax = 5;
						else if (DEVICE_TYPE = 1)
							ScrollMax = 4;

						Call RefreshSourceTypeList(ScrollMax, ScrollIndex);
						}
					else if(Selection = 3)
						{
						CurrentMenu = MENUOUTPUT;
						SerialOut$[1] = "Sel. Output To Name";
						ScrollIndex = 1;
						if (DEVICE_TYPE = 3)
							ScrollMax = 4;
						else if (DEVICE_TYPE = 2)
							ScrollMax = 2;
						else if (DEVICE_TYPE = 1)
							ScrollMax = 1;

						Call RefreshDestinationList(ScrollMax, ScrollIndex);
						}
			//		}
/*
					else if(Selection = 4)
						{
						CurrentMenu = MENURGBPASSTHRU;
						SerialOut$[1] = " RGB Pass-thru Mode";
						ScrollIndex = 1;
						ScrollMax = RGBPASSTHRUMENUENTRIES;
						Call RefreshRGBPassthruList(ScrollMax, ScrollIndex, RGBPassthruIn + 1);
						}
					}

				else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
				{
					if(Selection = 1)
					{
					CurrentMenu = MENURGBPASSTHRU;
					SerialOut$[1] = " RGB Pass-thru Mode";
					ScrollIndex = 1;
					ScrollMax = RGBPASSTHRUMENUENTRIES;
					Call RefreshRGBPassthruList(ScrollMax, ScrollIndex, RGBPassthruIn + 1);
					}
				}
	*/
			}
		case(MENUINPUT):
			{
			Line2ScrollArrow$ = ARROWNONE;
			if (DEVICE_TYPE = 1)
				Call InitNameSourceMenu(Selection+1);//offset to start at slot 2
			else
				Call InitNameSourceMenu(Selection);
			}
		case(MENUOUTPUT):
			{
			Line2ScrollArrow$ = ARROWNONE;
			if ( (DEVICE_TYPE = 2) && (Selection = 2) )
				Call InitNameDestinationMenu(Selection+1);
			else
				Call InitNameDestinationMenu(Selection);
			}				
		case(MENUSIGNALTYPE):
			{
			OldSigTypeScrollIndex = ScrollIndex; // remember where to go back to in video setup
			TypeIndex = SignalTypeIn[Selection] + 1;  // Selected type for the selected Input
			ScrollIndex = 1;
			
			//If "Disabled" is coming it in, it must be converted from 4 to the last value at end of list
			if ((DEVICE_TYPE = 2) || (DEVICE_TYPE = 3))
			{
				TypeIndex = SignalTypeIn[Selection] + 1;
				if ((Selection >= 1) && (Selection <= 2) ){
					ScrollMax = SIG1to2TYPEMENUENTRIES;
					TypeIndex = TypeIndex - 1; //Since there is no Auto mode for these Inputs, do not have to shift index

				}
	
				else if((Selection >= 3) && (Selection <= 4)){
					 ScrollMax = SIG3to4TYPEMENUENTRIES;
					if (TypeIndex >= SIG3to4TYPEMENUENTRIES)
						TypeIndex = SIG3to4TYPEMENUENTRIES;
					}
	
				else if((Selection >= 5) && (Selection <= 5))
					 ScrollMax = SIG5to5TYPEMENUENTRIES;
    		}
			else if (DEVICE_TYPE = 1)
			{
				if ((Selection = 1)  ){
					ScrollMax = SIG1to2TYPEMENUENTRIES;
					TypeIndex = 1; //Since there is no Auto mode for these Inputs, do not have to shift index

				}
	
				else if((Selection >= 2) && (Selection <= 3)){
					 ScrollMax = SIG3to4TYPEMENUENTRIES;
					if (TypeIndex >= SIG3to4TYPEMENUENTRIES)
						TypeIndex = SIG3to4TYPEMENUENTRIES;
					}
	
				else if(Selection = 4)
					 ScrollMax = SIG5to5TYPEMENUENTRIES;
				Selection = Selection + 1;//Offset by 1 for slot 2
				TypeIndex = SignalTypeIn[Selection] + 1;

				}



        	   global_videoinputselection = Selection;
			Call InitSignalTypeMenu(Selection);
			}
		case(MENUAUDIOSIGNALTYPE):
			{
			OldSigTypeScrollIndex = ScrollIndex; // remember where to go back to in video setup
			TypeIndex = AudioSignalTypeIn[Selection]+ 1;  // Selected type for the selected Input
			ScrollIndex = 1;
			//If "Disabled" is coming it in, it must be converted from 4 to the last value at end of list
			

			if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
			{
				TypeIndex = AudioSignalTypeIn[Selection]+ 1; 
				if ((Selection >= 1) && (Selection <= 2)){
					ScrollMax = AUDIOSIG1to2TYPEMENUENTRIES;

					
				}

				else if((Selection >= 3) && (Selection <= 4)){
					 ScrollMax = AUDIOSIG3to4TYPEMENUENTRIES;
					if (TypeIndex >= AUDIOSIG3to4TYPEMENUENTRIES)
						TypeIndex = AUDIOSIG3to4TYPEMENUENTRIES;
				}

				else if((Selection >= 5) && (Selection <= 5))
					 ScrollMax = AUDIOSIG5to5TYPEMENUENTRIES;
                 
			}
			else if (DEVICE_TYPE = 1)
			{//Offset by 1 due to removal of Slot 1.
				if (Selection = 1) {
					ScrollMax = AUDIOSIG1to2TYPEMENUENTRIES;

					
				}

				else if((Selection >= 2) && (Selection <= 3)){
					 ScrollMax = AUDIOSIG3to4TYPEMENUENTRIES;
					if (TypeIndex >= AUDIOSIG3to4TYPEMENUENTRIES)
						TypeIndex = AUDIOSIG3to4TYPEMENUENTRIES;
				}

				else if(Selection = 4) 
					 ScrollMax = AUDIOSIG5to5TYPEMENUENTRIES;
				Selection = Selection + 1;//Offset by 1 for slot 2
				TypeIndex = AudioSignalTypeIn[Selection] + 1;


             }               


          	  global_audioinputselection = Selection;

			Call InitAudioSignalTypeMenu(Selection);
			}


		case(MENUEDITSIGNAL1TO2TYPE):
			{
			SignalTypeOut[SignalTypeBeingEdited] = Selection;
		/*
			if (SignalTypeOut[SignalTypeBeingEdited] = 2) //"Disabled" is at the end of the list; however, the video board expects 4; so must check and convert
				SignalTypeOut[SignalTypeBeingEdited] = 4;
		*/
			TypeIndex = Selection;
			Call RefreshSigTypeMenu();
			}

		case(MENUEDITSIGNAL3to4TYPE):
			{
			tempsignaltypeout = 0;
			tempsignaltypeout = Selection - 1;
			if (tempsignaltypeout = 3) //"Disabled" is at the end of the list; however, the video board expects 4; so must check and convert
				tempsignaltypeout = 4;

			TypeIndex = Selection;
			SignalTypeOut[SignalTypeBeingEdited] = tempsignaltypeout;
			Call RefreshSigTypeMenu();
			}

		case(MENUEDITSIGNAL5to5TYPE):
			{
			SignalTypeOut[SignalTypeBeingEdited] = Selection - 1;
			TypeIndex = Selection;
			Call RefreshSigTypeMenu();
			}

		case(MENUEDITAUDIOSIGNAL1TO2TYPE):
			{
			AudioSignalTypeOut[SignalTypeBeingEdited] = Selection - 1;
		/*
			if (AudioSignalTypeOut[AudioSignalTypeBeingEdited] = 2) //"Disabled" is at the end of the list; however, the video board expects 4; so must check and convert
				AudioSignalTypeOut[AudioSignalTypeBeingEdited] = 4;
		*/
			TypeIndex = Selection;
			Call RefreshAudioSigTypeMenu();
			}

		case(MENUEDITAUDIOSIGNAL3to4TYPE):
			{
			tempsignaltypeout = 0;
			tempsignaltypeout = Selection - 1;
			if (tempsignaltypeout = 3) //"Disabled" is at the end of the list; however, the video board expects 4; so must check and convert
				tempsignaltypeout = 4;

			TypeIndex = Selection;
			AudioSignalTypeOut[SignalTypeBeingEdited] = tempsignaltypeout;
			Call RefreshAudioSigTypeMenu();
			}

		case(MENUEDITAUDIOSIGNAL5to5TYPE):
			{
			AudioSignalTypeOut[SignalTypeBeingEdited] = Selection - 1;
			TypeIndex = Selection;
			Call RefreshAudioSigTypeMenu();
			}


		case(MENUNETWORK):
			{
			OldNetworkScrollIndex = ScrollIndex;
		//	if(SystemType = OOTBF)
		//		{
				if(Selection = 1)
					{
					CurrentMenu = MENUIPADDRESS;
					SerialOut$[1] = "     IP Address";
					Makestring(SoftKey$[1], " %03d.", ipatemp1);
					Makestring(SoftKey$[2], " %03d.", ipatemp2);
					Makestring(SoftKey$[3], " %03d.", ipatemp3);
					Makestring(SoftKey$[4], " %03d", ipatemp4);
					IPsubmenu = 1;
					IPout1 = ipatemp1;
					IPout2 = ipatemp2;
					IPout3 = ipatemp3;
					IPout4 = ipatemp4;
					Call SelectIPAddress(IPsubmenu);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUSUBNETMASK;
					SerialOut$[1] = "    Subnet Mask";
					Makestring(SoftKey$[1], " %03d.", ipmtemp1);
					Makestring(SoftKey$[2], " %03d.", ipmtemp2);
					Makestring(SoftKey$[3], " %03d.", ipmtemp3);
					Makestring(SoftKey$[4], " %03d", ipmtemp4);
					IPsubmenu = 1;
					IPout1 = ipmtemp1;
					IPout2 = ipmtemp2;
					IPout3 = ipmtemp3;
					IPout4 = ipmtemp4;
					Call SelectIPMask(IPsubmenu);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUDEFROUTER;
					SerialOut$[1] = "    Def. Router";
					Makestring(SoftKey$[1], " %03d.", deftemp1);
					Makestring(SoftKey$[2], " %03d.", deftemp2);
					Makestring(SoftKey$[3], " %03d.", deftemp3);
					Makestring(SoftKey$[4], " %03d", deftemp4);
					IPsubmenu = 1;
					IPout1 = deftemp1;
					IPout2 = deftemp2;
					IPout3 = deftemp3;
					IPout4 = deftemp4;
					Call SelectDefRouter(IPsubmenu);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUDHCP;
					SerialOut$[1] = "        DHCP";
					ScrollIndex = 1;
					//ScrollIndex = DHCPIndex;
					ScrollMax = DHCPMENUENTRIES;
					Call RefreshDHCPList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUWINS;
					SerialOut$[1] = "        WINS";
					ScrollIndex = 1;
					//ScrollIndex = WINSIndex;
					ScrollMax = WINSMENUENTRIES;
					Call RefreshWINSList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUHOSTNAME;
					SerialOut$[1] = "      HostName";
					SerialOut$[2] = Tempstring6$;
					Line2ScrollArrow$ = ARROWNONE;
					}
				else if(Selection = 7)
					{
					CurrentMenu = MENUDOMAINNAME;
					SerialOut$[1] = "    Domain Name";
					SerialOut$[2] = Tempstring7$;
					Line2ScrollArrow$ = ARROWNONE;
					}
/*
				else if(Selection = 8)
					{
					CurrentMenu = MENUROOMVIEW;
					SerialOut$[1] = "      RoomView";
					ScrollIndex = 1;
					ScrollMax = ROOMVIEWMENUENTRIES;
					Call RefreshRoomViewList(ScrollMax, ScrollIndex, RoomViewIn);
					}
*/
				else if(Selection = 8)
					{
					CurrentMenu = MENUSTATUS;
					SerialOut$[1] = "    MAC Address";
					SerialOut$[2] = SystemInfo8$;
					Line2ScrollArrow$ = ARROWNONE;
					}

				else if(Selection = 9)
					{
					CurrentMenu = MENUPRIVATENETWORK;
					//SerialOut$[1] = "Private Network";
					OldPrivateNetworkScrollIndex = 1;
					RefreshPrivateNetworkMenu();
					}


            /*	}
			else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUIPADDRESS;
					SerialOut$[1] = "     IP Address";
					Makestring(SoftKey$[1], " %03d.", ipatemp1);
					Makestring(SoftKey$[2], " %03d.", ipatemp2);
					Makestring(SoftKey$[3], " %03d.", ipatemp3);
					Makestring(SoftKey$[4], " %03d", ipatemp4);
					IPsubmenu = 1;
					IPout1 = ipatemp1;
					IPout2 = ipatemp2;
					IPout3 = ipatemp3;
					IPout4 = ipatemp4;
					Call SelectIPAddress(IPsubmenu);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUSUBNETMASK;
					SerialOut$[1] = "    Subnet Mask";
					Makestring(SoftKey$[1], " %03d.", ipmtemp1);
					Makestring(SoftKey$[2], " %03d.", ipmtemp2);
					Makestring(SoftKey$[3], " %03d.", ipmtemp3);
					Makestring(SoftKey$[4], " %03d", ipmtemp4);
					IPsubmenu = 1;
					IPout1 = ipmtemp1;
					IPout2 = ipmtemp2;
					IPout3 = ipmtemp3;
					IPout4 = ipmtemp4;
					Call SelectIPMask(IPsubmenu);
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUDEFROUTER;
					SerialOut$[1] = "    Def. Router";
					Makestring(SoftKey$[1], " %03d.", deftemp1);
					Makestring(SoftKey$[2], " %03d.", deftemp2);
					Makestring(SoftKey$[3], " %03d.", deftemp3);
					Makestring(SoftKey$[4], " %03d", deftemp4);
					IPsubmenu = 1;
					IPout1 = deftemp1;
					IPout2 = deftemp2;
					IPout3 = deftemp3;
					IPout4 = deftemp4;
					Call SelectDefRouter(IPsubmenu);
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUDHCP;
					SerialOut$[1] = "        DHCP";
					ScrollIndex = 1;
					//ScrollIndex = DHCPIndex;
					ScrollMax = DHCPMENUENTRIES;
					Call RefreshDHCPList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUWINS;
					SerialOut$[1] = "        WINS";
					ScrollIndex = 1;
					//ScrollIndex = WINSIndex;
					ScrollMax = WINSMENUENTRIES;
					Call RefreshWINSList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUHOSTNAME;
					SerialOut$[1] = "      HostName";
					SerialOut$[2] = Tempstring6$;
					Line2ScrollArrow$ = ARROWNONE;
					}
				else if(Selection = 7)
					{
					CurrentMenu = MENUDOMAINNAME;
					SerialOut$[1] = "    Domain Name";
					SerialOut$[2] = Tempstring7$;
					Line2ScrollArrow$ = ARROWNONE;
					}
				else if(Selection = 8)
					{
					CurrentMenu = MENUSTATUS;
					SerialOut$[1] = "    MAC Address";
					SerialOut$[2] = SystemInfo8$;
					Line2ScrollArrow$ = ARROWNONE;
					}
				}*/
			}
		case (MENUPRIVATENETWORK):
			{
            SerialOut$[1] = "Private Network Mode";
			OldPrivateNetworkScrollIndex = ScrollIndex;
			if (Selection = 1)
				{
				CurrentMenu = MENUSINGLEIP;
//				SerialOut$[1] = "Private Network";
                 Call RefreshSingleIPList(ScrollMax, ScrollIndex, SingleIPIn + 1);
				}
			else if (Selection = 2)
				{
				CurrentMenu = MENUSYSTEMID;
				//SerialOut$[1] = "System ID:";
				RefreshSystemIDDisplay(SystemIdIn);
				}
			}
			
		case(MENUIPADDRESS):
			{
				if(IPsubmenu = 1)
				{
					IPsubmenu = 2;
					Call SelectIPAddress(IPsubmenu);
				}
				else if(IPsubmenu = 2)
				{
					IPsubmenu = 3;
					Call SelectIPAddress(IPsubmenu);
				}
				else if(IPsubmenu = 3)
				{
					IPsubmenu = 4;
					Call SelectIPAddress(IPsubmenu);
				}
				else if(IPsubmenu = 4)
				{
					if (DHCPisEnabled = 0)
					{

						if((ipatemp1 <> ipa1) || (ipatemp2 <> ipa2) || (ipatemp3 <> ipa3) || (ipatemp4 <> ipa4))
						{
							ipanew1 = ipatemp1;
							ipanew2 = ipatemp2;
							ipanew3 = ipatemp3;
							ipanew4 = ipatemp4;
							Makestring(NewSystemInfo1$, "%03d.%03d.%03d.%03d",ipanew1, ipanew2, ipanew3, ipanew4);
							ipachangeflag = TRUE;
						}
						else
						{
							ipachangeflag = FALSE;
						}
						Call RefreshNetworkMenu();
					}
				}
			}
		case(MENUSUBNETMASK):
			{
				if(IPsubmenu = 1)
				{
					IPsubmenu = 2;
					Call SelectIPMask(IPsubmenu);
				}
				else if(IPsubmenu = 2)
				{
					IPsubmenu = 3;
					Call SelectIPMask(IPsubmenu);
				}
				else if(IPsubmenu = 3)
				{
					IPsubmenu = 4;
					Call SelectIPMask(IPsubmenu);
				}
				else if(IPsubmenu = 4)
				{
					if (DHCPisEnabled = 0)
					{

						if((ipmtemp1 <> ipm1) || (ipmtemp2 <> ipm2) || (ipmtemp3 <> ipm3) || (ipmtemp4 <> ipm4))
						{
							ipmnew1 = ipmtemp1;
							ipmnew2 = ipmtemp2;
							ipmnew3 = ipmtemp3;
							ipmnew4 = ipmtemp4;
							Makestring(NewSystemInfo2$, "%03d.%03d.%03d.%03d",ipmnew1, ipmnew2, ipmnew3, ipmnew4);
							ipmchangeflag = TRUE;
						}
						else
						{
							ipmchangeflag = FALSE;
						}
						Call RefreshNetworkMenu();
					}
				}
			}
		case(MENUDEFROUTER):
			{
				if(IPsubmenu = 1)
				{
					IPsubmenu = 2;
					Call SelectDefRouter(IPsubmenu);
				}
				else if(IPsubmenu = 2)
				{
					IPsubmenu = 3;
					Call SelectDefRouter(IPsubmenu);
				}
				else if(IPsubmenu = 3)
				{
					IPsubmenu = 4;
					Call SelectDefRouter(IPsubmenu);
				}
				else if(IPsubmenu = 4)
				{
					if (DHCPisEnabled = 0)
					{
						if((deftemp1 <> def1) || (deftemp2 <> def2) || (deftemp3 <> def3) || (deftemp4 <> def4))
						{
							defnew1 = deftemp1;
							defnew2 = deftemp2;
							defnew3 = deftemp3;
							defnew4 = deftemp4;
							Makestring(NewSystemInfo3$, "%03d.%03d.%03d.%03d",defnew1, defnew2, defnew3, defnew4);
							defchangeflag = TRUE;
						}
						else
						{
							defchangeflag = FALSE;
						}
						Call RefreshNetworkMenu();
					}
				}
			}
		case(MENUDHCP):
			{
			OldDHCPScrollIndex = ScrollIndex;
			if(Selection = 1)
				{
				if(DHCPIndex = 2)
					{
						DHCPIndex = 1;
						NewSystemInfo4$ = "On";
						dhcpchangeflag = TRUE;
					}
				else if(DHCPIndex = 1)
					{
						dhcpchangeflag = FALSE;
					}
				Call RefreshNetworkMenu();
				}
			else if(Selection = 2)
				{
				if(DHCPIndex = 1)
					{
						DHCPIndex = 2;
						NewSystemInfo4$ = "Off";
						dhcpchangeflag = TRUE;
					}
				else if(DHCPIndex = 2)
					{
						dhcpchangeflag = FALSE;
					}
				Call RefreshNetworkMenu();
				}
			}
		case(MENUWINS):
			{
			OldWINSScrollIndex = ScrollIndex;
			if(Selection = 1)
				{
				if(WINSIndex = 2)
					{
						WINSIndex = 1;
						NewSystemInfo5$ = "On";
						winschangeflag = TRUE;
                    }
				else if(WINSIndex  = 1)
					{
						winschangeflag = FALSE;
					}
				Call RefreshNetworkMenu();
				}
			else if(Selection = 2)
				{
				if(WINSIndex  = 1)
					{
						WINSIndex = 2;
						NewSystemInfo5$ = "Off";
						winschangeflag = TRUE;
					}
				else if(WINSIndex  = 2)
					{
						winschangeflag = FALSE;
					}
				Call RefreshNetworkMenu();
				}
			}

		case (MENUSYSTEMID):
			{
            Call RefreshPrivateNetworkMenu();
			}

		case (MENUSINGLEIP):
			{
		
			if(Selection = 1)
				{
				if (SingleIPIn = 1)
					privatenetworkchangeflag = TRUE;

				SingleIPOn = 1;
				SingleIPOff = 0;
			
				}
			else if(Selection = 2)
				{
				if (SingleIPIn = 0)
					privatenetworkchangeflag = TRUE;

				SingleIPOff = 1;
				SingleIPOn = 0;


				}
			Call RefreshPrivateNetworkMenu();


			}
		case(MENURGBPASSTHRU):
			{
			if(Selection = 1)
				{
				RGBPassthruModeConfigured = 0;
				RGBPassthruModeIndex = RGBPassthruModeConfigured;
				}
			else if(Selection = 2)
				{
				RGBPassthruModeConfigured = 1;
				RGBPassthruModeIndex = RGBPassthruModeConfigured;
				}
			Call RefreshVideoMenu();
			}
		case(MENUROOMVIEW):
			{
			if(Selection = 1)
				{
					RoomView = 1;
					RoomViewIndex = RoomView;
				}
			else if(Selection = 2)
				{
					RoomView = 2;
					RoomViewIndex = RoomView;
				}
			else if(Selection = 3)
				{
					RoomView = 3;
					RoomViewIndex = RoomView;
				}
			Call RefreshNetworkMenu();
			}
		case(MENUHOSTNAME):
			{
             Call InitHostNameMenu(Selection);
			}
		case(MENUDOMAINNAME):
			{
             Call InitDomainNameMenu(Selection);
			}
		case(MENUCONTROL):
			{
			OldControlScrollIndex = ScrollIndex;
			//if(SystemType = OOTBF)
			if (0)
				{
				if(Selection = 1)
					{
					CurrentMenu = MENUBACKLIGHT;
					SerialOut$[1] = " Select Brightness";
					ScrollIndex = 1;
					ScrollMax = BACKLIGHTMENUENTRIES;
					Call RefreshBackLightTypeList(ScrollMax, ScrollIndex, BackLightIn);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUFUNCTION;
					SerialOut$[1] = "Select Fct. To Name";
					ScrollIndex = 1;
					ScrollMax = FUNCTIONMENUENTRIES;
					Call RefreshFunctionList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 3)
					{
                	CurrentMenu = MENUIDDEVICES;
					IDDeviceStep = 0;
					SerialOut$[1] = "  Identify Devices";
					SerialOut$[2] = "Detecting Devices...";
					Line2ScrollArrow$ = ARROWNONE;
					EnterButtonFb = 0;
					DigitalOut[1] = 0;
					DigitalOut[2] = 0;
					TSIDInit = 1;
					TSIDInit = 0;
					Delay(200);
					SerialOut$[1] = " Press ENTER to ID";
					SerialOut$[2] = "    all devices.";
					EnterButtonFb = 1;
					IDDeviceStep =  1;
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUUPGRADEDEVICE;
					SerialOut$[1] = "    Upgrade APAD";
					Line2ScrollArrow$ = ARROWNONE;
					ScrollIndex = 1;
					ScrollMax = UPGRADEMENUENTRIES;
					Call RefreshUpgradeSelection(ScrollMax, ScrollIndex);
					}
				else if(Selection = 5)
					{
					CurrentMenu = MENUCHANGEPASSWORD;
					SerialOut$[6] = "  Change Password:";
					SerialOut$[7] = "";
					Line2ScrollArrow$ = ARROWNONE;
					FieldToEdit[2] = 1;
   					FieldToEdit[2] = 0;
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENUINFO;
					SerialOut$[1] = "        Info";
					SoftKey$[1] = " REMS";
					SoftKey$[2] = "  HW";
					SoftKey$[3] = " NET";
					SoftKey$[4] = " OPS";
					Line2ScrollArrow$ = ARROWNONE;
					}
				else if(Selection = 7)
					{
					CurrentMenu = MENUMESSAGE;
					GetErrorLog = 1;
					GetErrorLog = 0;
					SoftKey$[2] = "Clear";
					SoftKey$[3] = "  <<";
					SoftKey$[4] = "  >>";
					}
				else if(Selection = 8)
					{
                	CurrentMenu = MENUTIMEDATE;
					}
				else if(Selection = 9)
					{
					CurrentMenu = MENURESTOREDEFAULTS;
					RestoreDefaultsStep = 1;
					SerialOut$[1] = "  Restore Defaults";
					ScrollIndex = 1;
					ScrollMax = DEFAULTENTRIES;
					Call RefreshDefaultsList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 10)
					{
					CurrentMenu = MENUFRONTPANEL;
					SerialOut$[1] = " Front Panel Lock:";
					ScrollIndex = 1;
					ScrollMax = 2;
					Call RefreshFrontPanelTypeList(ScrollMax, ScrollIndex, FPLockModeIn);
					}
				}
		//	else if((SystemType = OOTBF)||(SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
			else
				{
                if(Selection = 1)
					{
					CurrentMenu = MENUBACKLIGHT;
					SerialOut$[1] = " Select Brightness";
					ScrollIndex = 1;
					ScrollMax = BACKLIGHTMENUENTRIES;
					Call RefreshBackLightTypeList(ScrollMax, ScrollIndex, BackLightIn);
					}
				else if(Selection = 2)
					{
					CurrentMenu = MENUCHANGEPASSWORD;
					SerialOut$[6] = "  Change Password:";
					SerialOut$[7] = "";
					FieldToEdit[2] = 1;
   					FieldToEdit[2] = 0;
					}
				else if(Selection = 3)
					{
					CurrentMenu = MENUINFO;
					SerialOut$[1] = "        Info";
					SoftKey$[1] = " REMS";
					SoftKey$[2] = "  HW";
					SoftKey$[3] = " NET";
					SoftKey$[4] = " OPS";
					Line2ScrollArrow$ = ARROWNONE;
					}
				else if(Selection = 4)
					{
					CurrentMenu = MENUMESSAGE;
					GetErrorLog = 1;
					GetErrorLog = 0;
					SoftKey$[2] = "Clear";
					SoftKey$[3] = "  <<";
					SoftKey$[4] = "  >>";
					}
				else if(Selection = 5)
					{
                	CurrentMenu = MENUTIMEDATE;
					}
				else if(Selection = 6)
					{
					CurrentMenu = MENURESTOREDEFAULTS;
					RestoreDefaultsStep = 1;
					SerialOut$[1] = "  Restore Defaults";
					ScrollIndex = 1;
					ScrollMax = DEFAULTENTRIES;
					Call RefreshDefaultsList(ScrollMax, ScrollIndex);
					}
				else if(Selection = 7)
					{
					CurrentMenu = MENUFRONTPANEL;
					SerialOut$[1] = " Front Panel Lock:";
					ScrollIndex = 1;
					ScrollMax = 2;
					Call RefreshFrontPanelTypeList(ScrollMax, ScrollIndex, FPLockModeIn);
					}
				}
			}
		case(MENUBACKLIGHT):
			{
            if(Selection = 1)
				{
				BacklightConfigured = 1;
				BackLightIndex = BacklightConfigured;
				}
			else if(Selection = 2)
				{
				BacklightConfigured = 2;
				BackLightIndex = BacklightConfigured;
				}
			else if(Selection = 3)
				{
				BacklightConfigured = 3;
				BackLightIndex = BacklightConfigured;
				}
			Call RefreshControlMenu();
			}
		case(MENUFRONTPANEL):
			{
            if(Selection = 1)
				{
				FrontPanelConfigured = 1;
				FrontPanelIndex = FrontPanelConfigured;
				}
			else if(Selection = 2)
				{
				FrontPanelConfigured = 2;
				FrontPanelIndex = FrontPanelConfigured;
				}
			Call RefreshControlMenu();
			}
        case(MENUIDDEVICES):
        	{
        	if(IDDeviceStep = 1)
        		{
        		EnterButtonFb = 0;
        		IDDeviceStep = 0;
				IDDeviceRoom = 1;
				IDAPAD = 1;
				IDC2N = 1;
				IDCNXB = 1;
				IDC2NFTB = 1;
				TSIDStart = 1;
				TSIDStart = 0;
				SerialOut$[1] = "  Clearing Current";
				SerialOut$[2] = "    Settings...";
				Line2ScrollArrow$ = ARROWNONE;
				delay(100);
				Call DrawKeypadSelectPage(IDDeviceRoom);
                }
             else if(IDDeviceStep = 2)
            	{
            	DigitalOut[1] = 0;
        		DigitalOut[2] = 0;
				if(ScrollIndex = 1)
        			{
					if(IDAPAD < ConfiguredAPAD)
						{
						IDDeviceType = DEVICETYPEAPAD;
        				EnterButtonFb = 0;
        				TSIDType$ = "APAD";
        				TSIDToSet = IDAPAD + 45;
        				SerialOut$[1] = "Press any button on";
        				SerialOut$[2] = "      the APAD";
						Line2ScrollArrow$ = ARROWNONE;
	       				IDDeviceStep = 3;
        				processlogic();
        				TSIDSetOneId = 1;
        				TSIDSetOneId = 0;
        				WaitingForIDFb = 1;
        				Call WaitForKeypress();
						}
					else
						{
						Call DeviceConfiguredDone();
						}
					}
           		else if(ScrollIndex = 2)
        			{
					if(IDC2N < ConfiguredC2N)
						{
						IDDeviceType = DEVICETYPEC2N12BUT;
        				EnterButtonFb = 0;
        				TSIDType$ = "C2N-DB";
        				TSIDToSet = IDC2N + 112;
        				SerialOut$[1] = "Press any button on";
        				SerialOut$[2] = "     the keypad";
						Line2ScrollArrow$ = ARROWNONE;
        				IDDeviceStep = 3;
        				processlogic();
        				TSIDSetOneId = 1;
        				TSIDSetOneId = 0;
        				WaitingForIDFb = 1;
        				Call WaitForKeypress();
						}
					else
						{
						Call DeviceConfiguredDone();
						}
					}
				else if(ScrollIndex = 3)
        			{
					if(IDCNXB < ConfiguredCNXB)
						{
						IDDeviceType = DEVICETYPECNX12BUT;
        				EnterButtonFb = 0;
        				TSIDType$ = "CNX-B";
        				TSIDToSet = IDCNXB + 95;
        				SerialOut$[1] = "Press any button on";
        				SerialOut$[2] = "     the keypad";
						Line2ScrollArrow$ = ARROWNONE;
        				IDDeviceStep = 3;
        				processlogic();
        				TSIDSetOneId = 1;
        				TSIDSetOneId = 0;
        				WaitingForIDFb = 1;
        				Call WaitForKeypress();
						}
					else
						{
						Call DeviceConfiguredDone();
						}
					}
				else if(ScrollIndex = 4)
        			{
					if(IDC2NFTB < ConfiguredC2NFTB)
						{
						IDDeviceType = DEVICETYPEFTB10BUT;
        				EnterButtonFb = 0;
        				TSIDType$ = "C2N-FTB";
        				TSIDToSet = IDC2NFTB + 28;
        				SerialOut$[1] = " Press Setup button";
        				SerialOut$[2] = "   on the C2N-FTB";
						Line2ScrollArrow$ = ARROWNONE;
        				IDDeviceStep = 3;
        				processlogic();
        				TSIDSetOneId = 1;
        				TSIDSetOneId = 0;
        				WaitingForIDFb = 1;
        				Call WaitForKeypress();
						}
					else
						{
						Call DeviceConfiguredDone();
						}
					}
				else if(ScrollIndex = 5)
        			{
        			IDDeviceType = DEVICETYPEMNETGW;
        			EnterButtonFb = 0;
        			TSIDType$ = "C2N-MNETGW";
        			TSIDToSet = 15;
        			SerialOut$[1] = " Press Setup button";
        			SerialOut$[2] = "    on the MNET";
					Line2ScrollArrow$ = ARROWNONE;
        			IDDeviceStep = 3;
        			processlogic();
        			TSIDSetOneId = 1;
        			TSIDSetOneId = 0;
        			WaitingForIDFb = 1;
        			Call WaitForKeypress();
        			}
				else if(ScrollIndex = 6)
        			{
        			IDDeviceType = DEVICETYPEILUX;
        			EnterButtonFb = 0;
        			TSIDType$ = "CLS-C6";
        			TSIDToSet = 31;
        			SerialOut$[1] = "Press any button on";
        			SerialOut$[2] = "     the CLS-C6";
					Line2ScrollArrow$ = ARROWNONE;
        			IDDeviceStep = 3;
        			processlogic();
        			TSIDSetOneId = 1;
        			TSIDSetOneId = 0;
        			WaitingForIDFb = 1;
        			Call WaitForKeypress();
        			}
				else if(ScrollIndex = 7)
        			{
        			IDDeviceType = DEVICETYPEAMP;
        			EnterButtonFb = 0;
        			TSIDType$ = "QM-AMP";
        			TSIDToSet = 9;
        			SerialOut$[1] = " Press Setup button";
        			SerialOut$[2] = "     on the amp";
					Line2ScrollArrow$ = ARROWNONE;
        			IDDeviceStep = 3;
        			processlogic();
        			TSIDSetOneId = 1;
        			TSIDSetOneId = 0;
        			WaitingForIDFb = 1;
        			Call WaitForKeypress();
        			}
        	   	}
        	else if(IDDeviceStep = 4)
        		{
    			if(ScrollIndex = 1)
    				Call DrawKeypadSelectPage(IDDeviceRoom);
    			else if(ScrollIndex = 2)
    				Call AbortTSID();
    			}
            }
		case(MENUUPGRADEDEVICE):
			{
            if(Selection = 1)
				{
				if(APADOnline = 1)
					{
					SerialOut$[1] = "   Checking APADs";
					SerialOut$[2] = "";
					Line2ScrollArrow$ = ARROWNONE;
					delay(100);
					GetData = 1;
					GetData = 0;
//					Call RefreshControlMenu();
					}
				else
					{
					CurrentMenu = MENUAPADUPGRADEMESSAGE;
					SerialOut$[1] = "APAD Not On Network";
					SerialOut$[2] = "Press ENTER to Exit";
					Line2ScrollArrow$ = ARROWNONE;
					}
				}
			else if(Selection = 2)
				{
				Call RefreshControlMenu();
				}
			}
		case(MENUAPADUPGRADEMESSAGE):
			{
			Call RefreshControlMenu();
			}
		case(MENUDATE):
			{
				SetDate(tempmonth, tempday, tempyear);
				CurrentMenu = MENUTIMEDATE;
			}
		case(MENUTIME):
			{
			if(ampm = "PM")
				{
					if(displayhour <> 12)
					{
						temphour = displayhour + 12;
					}
					else
						temphour = displayhour;
				}
			else if(ampm = "AM")
				{
					if(displayhour = 12)
					{
                		temphour = displayhour + 12;
					}
					else
						temphour = displayhour;
				}
			SetClock(temphour, tempminutes, tempseconds);
			CurrentMenu = MENUTIMEDATE;
			}
		case(MENUFUNCTION):
			{
				Line2ScrollArrow$ = ARROWNONE;
            	Call InitFunctionNameMenu(Selection);
			}
		case(MENUCHANGEPASSWORD):
			{
			TextEditEnter = 1;
        	TextEditEnter = 0;
			}
		case(MENUEDITTEXT):
        	{
        	TextEditEnter = 1;
        	TextEditEnter = 0;
        	}
		case(MENUPASSWORDMSG):
        	{
			cancelwait(PasswordWait);
			Call DrawPasswordPage();
			}
		case(MENUWRONGPASSWORD):
        	{
			cancelwait(WrongPasswordWait);
			Call DrawPasswordPage();
			}
		case(MENUPASSWORD):
        	{
			TextEditEnter = 1;
        	TextEditEnter = 0;
			}
		case(MENURESTOREDEFAULTS):
        	{
        	if(RestoreDefaultsStep = 1)
        		{
        		if(ScrollIndex = 1)
        			{
        			RestoreDefaultsStep = 2;
        			ScrollIndex = 1;
        			SerialOut$[1] = "  Reset all audio?";
        			SerialOut$[2] = "No";
					Line2ScrollArrow$ = ARROWDOWN;
        			EnterButtonFb = 1;
        			DigitalOut[1] = 0;
        			DigitalOut[2] = 1;
        			}
        		else if(ScrollIndex = 2)
        			{
        			RestoreDefaultsStep = 3;
        			ScrollIndex = 1;
        			SerialOut$[1] = "Reset all settings?";
        			SerialOut$[2] = "No";
					Line2ScrollArrow$ = ARROWDOWN;
        			EnterButtonFb = 1;
        			DigitalOut[1] = 0;
        			DigitalOut[2] = 1;
        			}
        		else if(ScrollIndex = 3)
        			{
        			RestoreDefaultsStep = 0;
					Call RefreshControlMenu();
        			}
        		}
        	else if(RestoreDefaultsStep = 2)
        		{
        		if(ScrollIndex = 1)
        			{
        			RestoreDefaultsStep = 0;
					Call RefreshControlMenu();
        			}
        		else if(ScrollIndex = 2)
        			{
	        		RestoreDefaultsStep = 5;
					SerialOut$[1] = "  Restoring Audio";
					SerialOut$[2] = "    Settings...";
					Line2ScrollArrow$ = ARROWNONE;
					EnterButtonFb = 0;
					DigitalOut[1] = 0;
					DigitalOut[2] = 0;
					RestoreAudioDefaults = 1;
					RestoreAudioDefaults = 0;
					wait(2000, RestoreAudioDefaultsWait)
						{
						RestoreDefaultsStep = 7;
						SerialOut$[2] = "Err restoring deflt.";
						SerialOut$[3] = " ENTER to continue";
						EnterButtonFb = 1;
						}
					}
	        	}
        	else if(RestoreDefaultsStep = 3)
        		{
        		if(ScrollIndex = 1)
        			{
        			RestoreDefaultsStep = 0;
					Call RefreshControlMenu();
        			}
        		else if(ScrollIndex = 2)
        			{
	        		RestoreDefaultsStep = 4;
					SerialOut$[1] = "   Restoring All";
					SerialOut$[2] = "    Settings...";
					Line2ScrollArrow$ = ARROWNONE;
					EnterButtonFb = 0;
					DigitalOut[1] = 0;
					DigitalOut[2] = 0;
					BacklightConfigured = 2;
					FrontPanelConfigured = 2;
					RoomView = 1;
                	Call writeconfigFile();
					RestoreDefaults = 1;
					RestoreDefaults = 0;
					wait(2000, RestoreDefaultsWait)
						{
						RestoreDefaultsStep = 6;
						SerialOut$[2] = "Err restoring deflt.";
						SerialOut$[3] = " ENTER to continue";
						EnterButtonFb = 1;
						}
					}
	        	}
        	else if((RestoreDefaultsStep = 6) || (RestoreDefaultsStep = 7) || (RestoreDefaultsStep = 8) || (RestoreDefaultsStep = 9))
        		{
        		RestoreDefaultsStep = 0;
				Call RefreshControlMenu();
       			}
        	}


	   /* case(MENUCONFIGKEYPADS):
	       	{
	       	Call InitConfigKeypadsMenu(Selection);
	       	}*/
	/*    case(MENUEDITKEYPADS):
	    	{
	    	Call EditKeypadDone();
            }*/

    }

}

PUSH APADUpgradeComplete
	{
	if((CurrentMenu = MENUUPGRADEDEVICE) || (CurrentMenu = MENUAPADUPGRADEMESSAGE))
		{
		CurrentMenu = MENUAPADUPGRADEMESSAGE;
		SerialOut$[1] = "  Upgrade Complete";
		SerialOut$[2] = "Press ENTER to Exit";
		Line2ScrollArrow$ = ARROWNONE;
		}
	}

PUSH APADUpgradeStarted
	{
	CurrentMenu = MENUAPADUPGRADEMESSAGE;
	SerialOut$[1] = "    APAD Upgrade";
	SerialOut$[2] = "    In Progress";
	Line2ScrollArrow$ = ARROWNONE;
	}

CHANGE EditedPassword$
	{
	if(CurrentMenu = MENUPASSWORD)
		{
       	if(EditedPassword$ = OOTBFPassword$)
			{
			OOTBFPasswordCorrect = 1;
			OOTBFPasswordCorrect = 0;
			}
		else
			{
			PasswordWrong = 1;
			PasswordWrong = 0;
			}
		Password$ = "";
		StarPassword$ = "";
		SerialOut$[6] = "";
		SerialOut$[7] = "";
		}
	else if(CurrentMenu = MENUCHANGEPASSWORD)
		{
       	NewPassword$ = EditedPassword$;
		SerialOut$[6] = "";
		SerialOut$[7] = "";
		OOTBFPassword$ = NewPassword$;
		CurrentPassword$ = OOTBFPassword$;
		Call RefreshControlMenu();
		}
	}

CHANGE AllowSystemIDChanges
	{
    if (CurrentMenu = MENUSYSTEMID)
		{
		RefreshSystemIDDisplay(SystemIdIn);
		}

	}

CHANGE EditedText$
	{
	if(CurrentMenu = MENUEDITTEXT)
		{
		CurrentMenu = EditTextCallingMenu;
		EnterButtonFb = 1;
     	if(EditTextCallingMenu = MENUINPUT)
			{
			SourceNameOut$[SourceBeingEdited] = EditedText$;
			SerialOut$[1] = " Sel. Input To Name";
			Makestring(SerialOut$[2], " %d:%s", ScrollIndex, EditedText$);
			call CalculateLineScrollBar(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUOUTPUT)
			{
			DestinationNameOut$[DestinationBeingEdited] = EditedText$;
			SerialOut$[1] = "Sel. Output To Name";
			Makestring(SerialOut$[2], " %d:%s", ScrollIndex, EditedText$);
			call CalculateLineScrollBar(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUHOSTNAME)
			{
			if(EditedText$ <> Tempstring6$)
				{
				NewSystemInfo6$ = EditedText$;
				Tempstring6$ = EditedText$;
				Line2ScrollArrow$ = ARROWNONE;
//				SerialOut$[1] = "** HOSTNAME **";
//				Makestring(SerialOut$[2], "%s", EditedText$);
				hostchangeflag = TRUE;
				}
			else
				{
				hostchangeflag = FALSE;
				}
			CurrentMenu = MENUNETWORK;
			SerialOut$[1] = "   Network Setup";
			ScrollIndex = OldNetworkScrollIndex;
//			if(SystemType = OOTBF)
//				{
				ScrollMax = NETWORKMENUENTRIES;
/*				}
			else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
				{
                ScrollMax = 8;
				}
*/
			Call RefreshNetworkList(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUDOMAINNAME)
			{
			if(EditedText$ <> Tempstring7$)
				{
				NewSystemInfo7$ = EditedText$;
				Tempstring7$ = EditedText$;
				Line2ScrollArrow$ = ARROWNONE;
//				SerialOut$[1] = "** DOMAIN NAME **";
//				Makestring(SerialOut$[2], "%s", EditedText$);
				domainchangeflag = TRUE;
				}
			else
				{
				domainchangeflag = FALSE;
				}
			CurrentMenu = MENUNETWORK;
			SerialOut$[1] = "   Network Setup";
			ScrollIndex = OldNetworkScrollIndex;
//			if(SystemType = OOTBF)
//				{
				ScrollMax = NETWORKMENUENTRIES;
/*				}
			else if((SystemType = SYSTEMBUILDER) || (SystemType = CUSTOM))
				{
                ScrollMax = 8;
				}
*/
			Call RefreshNetworkList(ScrollMax, ScrollIndex);
			}
		else if(EditTextCallingMenu = MENUFUNCTION)
			{
			FunctionNameOut$[FunctionBeingEdited] = EditedText$;
			SerialOut$[1] = "Select Fct. To Name";
			Makestring(SerialOut$[2], " %d:%s", ScrollIndex, EditedText$);
			call CalculateLineScrollBar(ScrollMax, ScrollIndex);
			}

		}
	}

CHANGE FrontPanelPassword$
{
	OOTBFPassword$ = FrontPanelPassword$;
	CurrentPassword$ = OOTBFPassword$;
}

CHANGE SystemInfo1$
{
	STRING Tempstring$[200];
	INTEGER marker1;
	INTEGER marker2;
	INTEGER marker3;
	if(Semaphore = 0)
	{
		Semaphore = 1;
		Tempstring$ = SystemInfo1$;
		marker1 = find(".", Tempstring$);
		marker2 = find(".", Tempstring$, marker1 + 1);
		marker3 = find(".", Tempstring$, marker2 + 1);
		if((marker1 > 0) && (marker2 > 0) && (marker3 > 0))
			{
				ipa1 = atoi(mid(Tempstring$, 1, marker1 - 1));
				ipatemp1 = ipa1;
				ipa2 = atoi(mid(Tempstring$, marker1 + 1, marker2 - marker1 - 1));
				ipatemp2 = ipa2;
				ipa3 = atoi(mid(Tempstring$, marker2 + 1, marker3 - marker2 - 1));
				ipatemp3 = ipa3;
				ipa4= atoi(mid(Tempstring$, marker3 + 1, 3));
				ipatemp4 = ipa4;
			}
		Semaphore = 0;
	}
}

CHANGE SystemInfo2$
{
	STRING Tempstring$[200];
	INTEGER marker1;
	INTEGER marker2;
	INTEGER marker3;
	if(Semaphore = 0)
	{
		Semaphore = 1;
		Tempstring$ = SystemInfo2$;
		marker1 = find(".", Tempstring$);
		marker2 = find(".", Tempstring$, marker1 + 1);
		marker3 = find(".", Tempstring$, marker2 + 1);
		if((marker1 > 0) && (marker2 > 0) && (marker3> 0))
			{
				ipm1 = atoi(mid(Tempstring$, 1, marker1 - 1));
				ipmtemp1 = ipm1;
				ipm2 = atoi(mid(Tempstring$, marker1 + 1, marker2 - marker1 - 1));
				ipmtemp2 = ipm2;
				ipm3 = atoi(mid(Tempstring$, marker2 + 1, marker3 - marker2 - 1));
				ipmtemp3 = ipm3;
				ipm4= atoi(mid(Tempstring$, marker3 + 1, 3));
				ipmtemp4 = ipm4;
			}
		Semaphore = 0;
	}
}

CHANGE SystemInfo3$
{
	STRING Tempstring$[200];
	INTEGER marker1;
	INTEGER marker2;
	INTEGER marker3;
	if(Semaphore = 0)
	{
		Semaphore = 1;
		Tempstring$ = SystemInfo3$;
		marker1 = find(".", Tempstring$);
		marker2 = find(".", Tempstring$, marker1 + 1);
		marker3 = find(".", Tempstring$, marker2 + 1);
		if((marker1 > 0) && (marker2 > 0) && (marker3 > 0))
			{
				def1 = atoi(mid(Tempstring$, 1, marker1 - 1));
				deftemp1 = def1;
				def2 = atoi(mid(Tempstring$, marker1 + 1, marker2 - marker1 - 1));
				deftemp2 = def2;
				def3 = atoi(mid(Tempstring$, marker2 + 1, marker3 - marker2 - 1));
				deftemp3 = def3;
				def4= atoi(mid(Tempstring$, marker3 + 1, 3));
				deftemp4 = def4;
			}
		Semaphore = 0;
	}
}

CHANGE SystemInfo4$
{
	if(Semaphore = 0)
	{
		Semaphore = 1;
		Tempstring4$ = SystemInfo4$;
		if(Tempstring4$ = "On")
		{
			DHCPIndex = 1;
		}
		else if (Tempstring4$ = "Off")
		{
			DHCPIndex = 2;
		}
	Semaphore = 0;
	}
}

CHANGE SystemInfo5$
{
	if(Semaphore = 0)
	{
		Semaphore = 1;
		Tempstring5$ = SystemInfo5$;
		if(Tempstring5$ = "On")
		{
			WINSIndex = 1;
		}
		else if (Tempstring5$ = "Off")
		{
			WINSIndex = 2;
		}
	Semaphore = 0;
	}
}

CHANGE SystemInfo6$
{
	Tempstring6$ = SystemInfo6$;
}

CHANGE SystemInfo7$
{
	Tempstring7$ = SystemInfo7$;
}

CHANGE IdDoneFb
	{
	if((TSIDToSet = IDDoneFb) && (WaitingForIDFb = 1))
		{
		cancelwait(KeypadIDWait);
		WaitingForIDFb = 0;
		if(IDDeviceRoom < ConfiguredDevices)
			{
			if(IdDoneFb = 46 || IdDoneFb = 47)
				{
				IDAPAD = IDAPAD + 1;
				}
			if(IdDoneFb = 113 || IdDoneFb = 114)
				{
				IDC2N = IDC2N + 1;
				}
			if(IdDoneFb = 96 || IdDoneFb = 97)
				{
				IDCNXB = IDCNXB + 1;
				}
			if(IdDoneFb = 29 || IdDoneFb = 30)
				{
				IDC2NFTB = IDC2NFTB + 1;
				}
			IDDeviceRoom = IDDeviceRoom + 1;
			Call DrawKeypadSelectPage(IDDeviceRoom);
			}
		else
			{
			TSIDStopConfig = 1;
			TSIDStopConfig = 0;
			Call RefreshMainMenu();
			}
		}
	}

CHANGE ProgStartUpVolin
	{
		if(CurrentMenu = MENUPROGSTARTUPVOL)
		{
			SerialOut$[1] = " Prog. Startup Vol.";
			Call RefreshUnSignedDisplay(0, 100, ProgStartUpVolin);
		}
	}

CHANGE SystemIDIn
	{
     	if (CurrentMenu = MENUSYSTEMID)
			{
			RefreshSystemIDDisplay(SystemIDIn);
			}
	}

CHANGE SystemIDFbIn
	{
		if (CurrentMenu = MENUPRIVATENETWORK)
			{
			RefreshPrivateNetworkMenu();
			}    
		else if (CurrentMenu = MENUSYSTEMID)
			{
			RefreshSystemIDDisplay(SystemIDIn);
			}


	}

CHANGE RecStartUpVolin
	{
	//	if((CurrentMenu = MENURECSTARTUPVOL) && (RecFixedVariableIndex = 2))
	if(CurrentMenu = MENURECSTARTUPVOL)
		{
			SerialOut$[1] = " Aux. 1 Startup Vol.";
			Call RefreshUnSignedDisplay(0, 100, RecStartUpVolin);
		}
	}

CHANGE SpchStartUpVolin
	{
		if(CurrentMenu = MENUSPCHSTARTUPVOL)
		{
			SerialOut$[1] = " Aux. 2 Startup Vol.";
			Call RefreshUnSignedDisplay(0, 100, SpchStartUpVolin);
		}
	}

CHANGE MasterStartUpVolin
	{
		if(CurrentMenu = MENUMASTERSTARTUPVOL)
		{
			SerialOut$[1] = "Master Startup Vol.";
			Call RefreshUnSignedDisplay(0, 100, MasterStartUpVolin);
		}
	}

CHANGE Progbassin
	{
		if(CurrentMenu = MENUPROGBASS)
		{
			SerialOut$[1] = "    Program Bass";
			Call RefreshSignedDisplay(-12, 12, Progbassin s/ 10);
		}
	}

CHANGE Progtreblein
	{
		if(CurrentMenu = MENUPROGTREBLE)
		{
			SerialOut$[1] = "   Program Treble";
			Call RefreshSignedDisplay(-12, 12, Progtreblein s/ 10);
		}
	}

CHANGE Recbassin
	{
		if(CurrentMenu = MENURECBASS)
		{
			SerialOut$[1] = "    Aux. 1 Bass";
			Call RefreshSignedDisplay(-12, 12, Recbassin s/ 10);
		}
	}

CHANGE Rectreblein
	{
		if(CurrentMenu = MENURECTREBLE)
		{
			SerialOut$[1] = "    Aux. 1 Treble";
			Call RefreshSignedDisplay(-12, 12, Rectreblein s/ 10);
		}
	}

CHANGE Spchbassin
	{
		if(CurrentMenu = MENUSPCHBASS)
		{
			SerialOut$[1] = "    Aux. 2 Bass";
			Call RefreshSignedDisplay(-12, 12, Spchbassin s/ 10);
		}
	}

CHANGE Spchtreblein
	{
		if(CurrentMenu = MENUSPCHTREBLE)
		{
			SerialOut$[1] = "   Aux. 2 Treble";
			Call RefreshSignedDisplay(-12, 12, Spchtreblein s/ 10);
		}
	}

CHANGE ProgMinVolin
	{
		if(CurrentMenu = MENUPROGMINVOL)
		{
			SerialOut$[1] = "  Prog. Min Volume";
			Call RefreshUnSignedDisplay(0, 50, ProgMinVolin);
		}
	}

CHANGE ProgMaxVolin
	{
		if(CurrentMenu = MENUPROGMAXVOL)
		{
			SerialOut$[1] = "  Prog. Max Volume";
			Call RefreshUnSignedDisplay(50, 100, ProgMaxVolin);
		}
	}

CHANGE RecMaxVolin
	{
		if(CurrentMenu = MENURECMAXVOL)
		{
			SerialOut$[1] = "  Aux. 1 Max Volume";
			Call RefreshUnSignedDisplay(50, 100, RecMaxVolin);
		}
	}

CHANGE RecMinVolin
 {
		if(CurrentMenu = MENURECMINVOL)
		{
			SerialOut$[1] = "  Aux. 1 Min Volume";
			Call RefreshUnSignedDisplay(0, 50, RecMinVolin);
		}
	}

	

CHANGE SpchMinVolin
	{
		if(CurrentMenu = MENUSPCHMINVOL)
		{
			SerialOut$[1] = "  Aux. 2 Min Volume";
			Call RefreshUnSignedDisplay(0, 50, SpchMinVolin);
		}
	}

CHANGE SpchMaxVolin
	{
		if(CurrentMenu = MENUSPCHMAXVOL)
		{
			SerialOut$[1] = "  Aux. 2 Max Volume";
			Call RefreshUnSignedDisplay(50, 100, SpchMaxVolin);
		}
	}

CHANGE ProgDelayin
    {
		STRING Temp$[18];
    	if(CurrentMenu = MENUPROGDELAY)
		{
			EnterButtonFb = 1;
			SerialOut$[1] = "    Program Delay";
			Temp$ = AddUnSignedNumber(0, 853, ProgDelayin/10);
			Makestring(SerialOut$[2], "        %sms", Temp$);
		}
	}

CHANGE RecDelayin
	{
		STRING Temp$[18];
    	if(CurrentMenu = MENURECDELAY)
		{
			EnterButtonFb = 1;
			SerialOut$[1] = "    Aux. 1 Delay";
			Temp$ = AddUnSignedNumber(0, 853, RecDelayin/10);
			Makestring(SerialOut$[2], "        %sms", Temp$);
		}
	}




CHANGE SpchDelayin
	{
		STRING Temp$[18];
    	if(CurrentMenu = MENUSPCHDELAY)
		{
			EnterButtonFb = 1;
			SerialOut$[1] = "    Aux. 2 Delay";
			Temp$ = AddUnSignedNumber(0, 853, SpchDelayin/10);
			Makestring(SerialOut$[2], "        %sms", Temp$);
		}
	}

CHANGE MicGainIn
	{
    INTEGER Index;

	Index = GetLastModifiedArrayIndex();
    if((CurrentMenu = MENUMIC1GAIN) || (CurrentMenu = MENUMIC2GAIN) || (CurrentMenu = MENUMIC3GAIN) ||
		(CurrentMenu = MENUMIC4GAIN) || (CurrentMenu = MENUMIC5GAIN) || (CurrentMenu = MENUMIC6GAIN))
		Call RefreshMicGainDisplay(Index, MicGainIn[Index]);
	}

CHANGE SourceGain
	{
	INTEGER Index;

	Index = GetLastModifiedArrayIndex();
	if((CurrentMenu = MENUSRCGAIN1) || (CurrentMenu = MENUSRCGAIN2) || (CurrentMenu = MENUSRCGAIN3) || (CurrentMenu = MENUSRCGAIN4)
		|| (CurrentMenu = MENUSRCGAIN5) || (CurrentMenu = MENUSRCGAIN6) || (CurrentMenu = MENUSRCGAIN7) ||(CurrentMenu = MENUSRCGAIN8)
	|| (CurrentMenu = MENUSRCGAIN9) ||(CurrentMenu = MENUSRCGAIN10) || (CurrentMenu = MENUSRCGAIN11) || (CurrentMenu = MENUSRCGAIN12)
	|| (CurrentMenu = MENUSRCGAIN13) || (CurrentMenu = MENUSRCGAIN14))
	     Call RefreshGainDisplay(Index, SourceGain[Index] s/ 10,0);
	}

CHANGE Mic1GatingIn
	{
	if(CurrentMenu = MENUMIC1GATING)
		{
		Call RefreshMic1GatingList(ScrollMax, ScrollIndex, Mic1GatingIn + 1);
		}
	}

CHANGE Mic2GatingIn
	{
	if(CurrentMenu = MENUMIC2GATING)
		{
		Call RefreshMic2GatingList(ScrollMax, ScrollIndex, Mic2GatingIn + 1);
		}
	}

CHANGE Mic3GatingIn
	{
	if(CurrentMenu = MENUMIC3GATING)
		{
		Call RefreshMic3GatingList(ScrollMax, ScrollIndex, Mic3GatingIn + 1);
		}
	}
CHANGE Mic4GatingIn
	{
	if(CurrentMenu = MENUMIC4GATING)
		{
		Call RefreshMic4GatingList(ScrollMax, ScrollIndex, Mic4GatingIn + 1);
		}
	}
CHANGE Mic5GatingIn
	{
	if(CurrentMenu = MENUMIC5GATING)
		{
		Call RefreshMic5GatingList(ScrollMax, ScrollIndex, Mic5GatingIn + 1);
		}
	}
CHANGE Mic6GatingIn
	{
	if(CurrentMenu = MENUMIC6GATING)
		{
		Call RefreshMic6GatingList(ScrollMax, ScrollIndex, Mic6GatingIn + 1);
		}
	}



CHANGE Mic1compressionIn
	{
	if(CurrentMenu = MENUMIC1COMPRESSION)
		{
		Call RefreshMic1compressionList(ScrollMax, ScrollIndex, Mic1compressionIn + 1);
		}
	}

CHANGE Mic2compressionIn
	{
	if(CurrentMenu = MENUMIC2COMPRESSION)
		{
		Call RefreshMic2compressionList(ScrollMax, ScrollIndex, Mic2compressionIn + 1);
		}
	}
CHANGE Mic3compressionIn
	{
	if(CurrentMenu = MENUMIC3COMPRESSION)
		{
		Call RefreshMic3compressionList(ScrollMax, ScrollIndex, Mic3compressionIn + 1);
		}
	}

CHANGE Mic4compressionIn
	{
	if(CurrentMenu = MENUMIC4COMPRESSION)
		{
		Call RefreshMic4compressionList(ScrollMax, ScrollIndex, Mic4compressionIn + 1);
		}
	}
 
CHANGE Mic5compressionIn
	{
	if(CurrentMenu = MENUMIC5COMPRESSION)
		{
		Call RefreshMic5compressionList(ScrollMax, ScrollIndex, Mic5compressionIn + 1);
		}
	}
CHANGE Mic6compressionIn
	{
	if(CurrentMenu = MENUMIC6COMPRESSION)
		{
		Call RefreshMic6compressionList(ScrollMax, ScrollIndex, Mic6compressionIn + 1);
		}
	}
 
            


CHANGE Mic1LimiterIn
	{
	if(CurrentMenu = MENUMIC1LIMITER)
		{
		Call RefreshMic1LimiterList(ScrollMax, ScrollIndex, Mic1LimiterIn + 1);
		}
	}
CHANGE Mic2LimiterIn
	{
	if(CurrentMenu = MENUMIC2LIMITER)
		{
		Call RefreshMic2LimiterList(ScrollMax, ScrollIndex, Mic2LimiterIn + 1);
		}
	}
CHANGE Mic3LimiterIn
	{
	if(CurrentMenu = MENUMIC3LIMITER)
		{
		Call RefreshMic3LimiterList(ScrollMax, ScrollIndex, Mic3LimiterIn + 1);
		}
	}
CHANGE Mic4LimiterIn
	{
	if(CurrentMenu = MENUMIC4LIMITER)
		{
		Call RefreshMic4LimiterList(ScrollMax, ScrollIndex, Mic4LimiterIn + 1);
		}
	}
CHANGE Mic5LimiterIn
	{
	if(CurrentMenu = MENUMIC5LIMITER)
		{
		Call RefreshMic5LimiterList(ScrollMax, ScrollIndex, Mic5LimiterIn + 1);
		}
	}
CHANGE Mic6LimiterIn
	{
	if(CurrentMenu = MENUMIC6LIMITER)
		{
		Call RefreshMic6LimiterList(ScrollMax, ScrollIndex, Mic6LimiterIn + 1);
		}
	}



CHANGE PhantomPowerIn
	{
	if(CurrentMenu = MENUPHANTOM)
		{
		Call RefreshPhantomPowerList(ScrollMax, ScrollIndex, PhantomPowerIn + 1);
		}
	}

CHANGE ProgramSourceMixIn
	{
	if(CurrentMenu = MENUPROGSOURCEMIX)
		{
		Call RefreshProgSourceMixList(ScrollMax, ScrollIndex, ProgramSourceMixIn);
		}
	}



CHANGE RecordSourceMixIn
	{
	if(CurrentMenu = MENURECSOURCEMIX)
		{
		Call RefreshRecSourceMixList(ScrollMax, ScrollIndex, RecordSourceMixIn);
		}
	}

CHANGE SpeechSourceMixIn
	{
	if(CurrentMenu = MENUSPCHSOURCEMIX)
		{
		Call RefreshSpchSourceMixList(ScrollMax, ScrollIndex, SpeechSourceMixIn);
		}
	}

CHANGE BackLightIn
	{
	if(CurrentMenu = MENUBACKLIGHT)
		{
		Call RefreshBackLightTypeList(ScrollMax, ScrollIndex, BackLightIn);
		}
	}

CHANGE FPLockModeIn
	{
	if(CurrentMenu = MENUFRONTPANEL)
		{
		Call RefreshFrontPanelTypeList(ScrollMax, ScrollIndex, FPLockModeIn);
		}
	}

CHANGE RoomViewIn
	{
	if(CurrentMenu = MENUROOMVIEW)
		{
		Call RefreshRoomViewList(ScrollMax, ScrollIndex, RoomViewIn);
		}
	}

CHANGE SignalTypeIn
	{
	INTEGER Index;

	Index = GetLastModifiedArrayIndex();

	if ( (DEVICE_TYPE = 2) || (DEVICE_TYPE = 3) )
		{


		if((CurrentMenu = MenuEditSignal1to2Type) && (Index >= 1) && (Index <= 2))
			{
			Call RefreshSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditSignal3to4Type) && (Index >= 3) && (Index <= 4))
			{
			Call RefreshSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
    	
		else if((CurrentMenu = MenuEditSignal5to5Type) && (Index >= 5) && (Index <= 5))
			{
			Call RefreshSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if (DEVICE_TYPE = 1)
		{
		if((CurrentMenu = MenuEditSignal1to2Type)  && (Index >= 1) && (Index = 2) )
			{
			Call RefreshSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditSignal3to4Type) && (Index >= 3) && (Index <= 4))
			{
			Call RefreshSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
    	
		else if((CurrentMenu = MenuEditSignal5to5Type) && (Index = 5) )
			{
			Call RefreshSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}

	}

CHANGE AudioSignalTypeIn
	{
	INTEGER Index;

	Index = GetLastModifiedArrayIndex();
                                   
	if ( (DEVICE_TYPE = 3) || (DEVICE_TYPE = 2) )
		{
		if((CurrentMenu = MenuEditAudioSignal1to2Type) && (Index >= 1) && (Index <= 2))
			{
			Call RefreshAudioSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditAudioSignal3to4Type) && (Index >= 3) && (Index <= 4))
			{
			Call RefreshAudioSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditAudioSignal5to5Type) && (Index >= 5) && (Index <= 5))
			{
			Call RefreshAudioSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}
		}
	else if (DEVICE_TYPE = 1)
		{
		if((CurrentMenu = MenuEditAudioSignal1to2Type) && (Index >= 1) && (Index <= 2))
			{
			Call RefreshAudioSignal1to2TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditAudioSignal3to4Type) && (Index >= 3) && (Index <= 4))
			{
			Call RefreshAudioSignal3to4TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}

		else if((CurrentMenu = MenuEditAudioSignal5to5Type) && (Index >= 5) && (Index <= 5))
			{
			Call RefreshAudioSignal5to5TypeList(ScrollMax, ScrollIndex, TypeIndex);
			}


		}
	}


CHANGE RGBPassthruIn
	{
	if(CurrentMenu = MENURGBPASSTHRU)
		{
		Call RefreshRGBPassthruList(ScrollMax, ScrollIndex, RGBPassthruIn + 1);
		}
	}

CHANGE IPin1
{
	if(CurrentMenu = MENUIPADDRESS)
	{
		ipatemp1 = IPin1;
		Makestring(SoftKey$[1], "[%03d]", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
	}
	else if(CurrentMenu = MENUSUBNETMASK)
	{
		ipmtemp1 = IPin1;
		Makestring(SoftKey$[1], "[%03d]", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
	}
	else if(CurrentMenu = MENUDEFROUTER)
	{
     	deftemp1 = IPin1;
		Makestring(SoftKey$[1], "[%03d]", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
	}
}

CHANGE IPin2
{
	if(CurrentMenu = MENUIPADDRESS)
	{
		ipatemp2 = IPin2;
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], "[%03d]", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
	}
	else if(CurrentMenu = MENUSUBNETMASK)
	{
		ipmtemp2 = IPin2;
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], "[%03d]", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
	}
	else if(CurrentMenu = MENUDEFROUTER)
	{
     	deftemp2 = IPin2;
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], "[%03d]", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
	}
}

CHANGE IPin3
{
	if(CurrentMenu = MENUIPADDRESS)
	{
		ipatemp3 = IPin3;
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], "[%03d]", ipatemp3);
		Makestring(SoftKey$[4], " %03d", ipatemp4);
	}
	else if(CurrentMenu = MENUSUBNETMASK)
	{
		ipmtemp3 = IPin3;
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], "[%03d]", ipmtemp3);
		Makestring(SoftKey$[4], " %03d", ipmtemp4);
	}
	else if(CurrentMenu = MENUDEFROUTER)
	{
     	deftemp3 = IPin3;
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], "[%03d]", deftemp3);
		Makestring(SoftKey$[4], " %03d", deftemp4);
	}
}

CHANGE IPin4
{
	if(CurrentMenu = MENUIPADDRESS)
	{
		ipatemp4 = IPin4;
		Makestring(SoftKey$[1], " %03d.", ipatemp1);
		Makestring(SoftKey$[2], " %03d.", ipatemp2);
		Makestring(SoftKey$[3], " %03d.", ipatemp3);
		Makestring(SoftKey$[4], "[%03d]", ipatemp4);
	}
	else if(CurrentMenu = MENUSUBNETMASK)
	{
		ipmtemp4 = IPin4;
		Makestring(SoftKey$[1], " %03d.", ipmtemp1);
		Makestring(SoftKey$[2], " %03d.", ipmtemp2);
		Makestring(SoftKey$[3], " %03d.", ipmtemp3);
		Makestring(SoftKey$[4], "[%03d]", ipmtemp4);
	}
	else if(CurrentMenu = MENUDEFROUTER)
	{
     	deftemp4 = IPin4;
		Makestring(SoftKey$[1], " %03d.", deftemp1);
		Makestring(SoftKey$[2], " %03d.", deftemp2);
		Makestring(SoftKey$[3], " %03d.", deftemp3);
		Makestring(SoftKey$[4], "[%03d]", deftemp4);
	}
}

PUSH RegenerateSourceList
	{
	Call CreateSourceList();
	}

PUSH RegenerateDestinationList
	{
	Call CreateDestinationList();
	}

PUSH RegenerateFunctionList
	{
	Call CreateFunctionList();
	}

PUSH WriteConfig
	{
	Call WriteConfigFile();
	}

PUSH RestoreDefaultsDone
	{
	if((CurrentMenu = MENURESTOREDEFAULTS) && (RestoreDefaultsStep = 4))
		{
		cancelwait(RestoreDefaultsWait);
		RestoreDefaultsStep = 8;
		SerialOut$[1] = " Defaults restored";
		SerialOut$[2] = " ENTER to continue";
		Line2ScrollArrow$ = ARROWNONE;
		EnterButtonFb = 1;
		}
    }

PUSH RestoreAudioDefaultsDone
	{
	if((CurrentMenu = MENURESTOREDEFAULTS) && (RestoreDefaultsStep = 5))
		{
		cancelwait(RestoreAudioDefaultsWait);
		RestoreDefaultsStep = 9;
		SerialOut$[1] = " Defaults restored";
		SerialOut$[2] = " ENTER to continue";
		Line2ScrollArrow$ = ARROWNONE;
		EnterButtonFb = 1;
		}
    }

Function Main()
	{
	Line2ScrollArrow$ = ARROWNONE;
	MenuList$[1] = "Audio Setup";
	MenuList$[2] = "Video Setup";
	MenuList$[3] = "Network Setup";
	MenuList$[4] = "Control Setup";
	MenuCustomList$[1] = "Audio Setup";
	MenuCustomList$[2] = "Video Setup";
	MenuCustomList$[3] = "Network Setup";
	MenuCustomList$[4] = "Control Setup";
	AudioList$[1] = "Input Sig. Type";
	AudioList$[2] = "Program Output";
	AudioList$[3] = "Aux. 1 Output";
	AudioList$[4] = "Aux. 2 Output";
	AudioList$[5] = "Input Compensation";
	AudioList$[6] = "Microphones";

	Audio100List$[1] = "Input Sig. Type";
	Audio100List$[2] = "Program Output";
	Audio100List$[3] = "Aux. 1 Output";
	Audio100List$[4] = "Input Compensation";
	Audio100List$[5] = "Microphones";
//*********
	AudioProgList$[1] = "Source Mix";
	AudioProgList$[2] = "Bass";
	AudioProgList$[3] = "Treble";
    AudioProgList$[4] = "Prog. Delay";
	AudioProgList$[5] = "Min Volume";
	AudioProgList$[6] = "Max Volume";
	AudioProgList$[7] = "Startup Vol.";
	AudioProgList$[8] = "Stereo/Mono";


	AudioRecList$[1] = "Source Mix";
	//AudioRecList$[2] = "Fixed/Variable";
	AudioRecList$[2] = "Bass";
	AudioRecList$[3] = "Treble";
	AudioRecList$[4] = "Aux. 1 Delay";
	AudioRecList$[5] = "Min Volume";
	AudioRecList$[6] = "Max Volume";
	AudioRecList$[7] = "Startup Vol.";


	AudioSpchList$[1] = "Source Mix";
	AudioSpchList$[2] = "Bass";
	AudioSpchList$[3] = "Treble";
	AudioSpchList$[4] = "Aux. 2 Delay";
//	AudioSpchList$[5] = "Prog/Spch Vol.";
	AudioSpchList$[5] = "Min Volume";
	AudioSpchList$[6] = "Max Volume";
	AudioSpchList$[7] = "Startup Vol.";

//********
	AudioMicList$[1] = "Mic 1 Gating";
	AudioMicList$[2] = "Mic 2 Gating";
	AudioMicList$[3] = "Mic 3 Gating";
	AudioMicList$[4] = "Mic 4 Gating";
	AudioMicList$[5] = "Mic 5 Gating";
	AudioMicList$[6] = "Mic 6 Gating";
	AudioMicList$[7] = "Mic 1 Compression";
	AudioMicList$[8] = "Mic 2 Compression";
	AudioMicList$[9] = "Mic 3 Compression";
	AudioMicList$[10] = "Mic 4 Compression";
	AudioMicList$[11] = "Mic 5 Compression";
	AudioMicList$[12] = "Mic 6 Compression";
	AudioMicList$[13] = "Mic 1 Limiter";
	AudioMicList$[14] = "Mic 2 Limiter";
	AudioMicList$[15] = "Mic 3 Limiter";
	AudioMicList$[16] = "Mic 4 Limiter";
	AudioMicList$[17] = "Mic 5 Limiter";
	AudioMicList$[18] = "Mic 6 Limiter";
//	AudioMicList$[19] = "Phantom Power";
	AudioMicList$[19] = "Mic 1 Gain";
	AudioMicList$[20] = "Mic 2 Gain";
	AudioMicList$[21] = "Mic 3 Gain";
	AudioMicList$[22] = "Mic 4 Gain";
	AudioMicList$[23] = "Mic 5 Gain";
	AudioMicList$[24] = "Mic 6 Gain";

	AudioMic200List$[1] = "Mic 1 Gating";
	AudioMic200List$[2] = "Mic 2 Gating";
	AudioMic200List$[3] = "Mic 3 Gating";
	AudioMic200List$[4] = "Mic 4 Gating";
	AudioMic200List$[5] = "Mic 1 Compression";
	AudioMic200List$[6] = "Mic 2 Compression";
	AudioMic200List$[7] = "Mic 3 Compression";
	AudioMic200List$[8] = "Mic 4 Compression";
	AudioMic200List$[9] = "Mic 1 Limiter";
	AudioMic200List$[10] = "Mic 2 Limiter";
	AudioMic200List$[11] = "Mic 3 Limiter";
	AudioMic200List$[12] = "Mic 4 Limiter";
	AudioMic200List$[13] = "Mic 1 Gain";
	AudioMic200List$[14] = "Mic 2 Gain";
	AudioMic200List$[15] = "Mic 3 Gain";
	AudioMic200List$[16] = "Mic 4 Gain";

	AudioMic100List$[1] = "Mic 1 Gating";
	AudioMic100List$[2] = "Mic 2 Gating";
	AudioMic100List$[3] = "Mic 1 Compression";
	AudioMic100List$[4] = "Mic 2 Compression";
	AudioMic100List$[5] = "Mic 1 Limiter";
	AudioMic100List$[6] = "Mic 2 Limiter";
	AudioMic100List$[7] = "Mic 1 Gain";
	AudioMic100List$[8] = "Mic 2 Gain";





	InputCompList$[1] = "Analog 1 Comp.";
	InputCompList$[2] = "Analog 2 Comp.";
	InputCompList$[3] = "Analog 3 Comp.";
	InputCompList$[4] = "Analog 4 Comp.";
	InputCompList$[5] = "Analog 5 Comp.";
	InputCompList$[6] = "SPDIF   Comp.";
	InputCompList$[7] = "HDMI  1 Comp.";
	InputCompList$[8] = "HDMI  2 Comp.";
	InputCompList$[9] = "HDMI  3 Comp.";
	InputCompList$[10] = "HDMI  4 Comp.";
	InputCompList$[11] = "HDMI  5 Comp.";
	InputCompList$[12] = "  DM  6 Comp.";
	InputCompList$[13] = "  DM  7 Comp.";


	InputComp200List$[1] = "Analog 1 Comp.";
	InputComp200List$[2] = "Analog 2 Comp.";
	InputComp200List$[3] = "Analog 3 Comp.";
	InputComp200List$[4] = "Analog 4 Comp.";
	InputComp200List$[5] = "Analog 5 Comp.";
	InputComp200List$[6] = "SPDIF   Comp.";
	InputComp200List$[7] = "HDMI  1 Comp.";
	InputComp200List$[8] = "HDMI  2 Comp.";
	InputComp200List$[9] = "HDMI  3 Comp.";
	InputComp200List$[10] = "HDMI  4 Comp.";
	InputComp200List$[11] = "HDMI  5 Comp.";
	InputComp200List$[12] = "  DM  6 Comp.";

	InputComp100List$[1] = "Analog 1 Comp.";
	InputComp100List$[2] = "Analog 2 Comp.";
	InputComp100List$[3] = "Analog 3 Comp.";
	InputComp100List$[4] = "Analog 4 Comp.";
	InputComp100List$[5] = "SPDIF   Comp.";
	InputComp100List$[6] = "HDMI  1 Comp.";
	InputComp100List$[7] = "HDMI  2 Comp.";
	InputComp100List$[8] = "HDMI  3 Comp.";
	InputComp100List$[9] = "HDMI  4 Comp.";





	VideoList$[1] = "Input Names";
	VideoList$[2] = "Input Types";
	VideoList$[3] = "Output Names";
//	VideoList$[4] = "RGB Pass-thru Mode";
	VideoCustomList$[1] = "RGB Pass-thru Mode";
	NetworkList$[1] = "IP Address";
	NetworkList$[2] = "Subnet Mask";
	NetworkList$[3] = "Def. Router";
	NetworkList$[4] = "DHCP";
	NetworkList$[5] = "WINS";
	NetworkList$[6] = "HostName";
	NetworkList$[7] = "Domain Name";
	//NetworkList$[8] = "RoomView";
	NetworkList$[8] = "MAC Address";
	NetworkList$[9] = "Private Network";
//	NetworkList$[10] = "Single IP Mode";

	NetworkCustomList$[1] = "IP Address";
	NetworkCustomList$[2] = "Subnet Mask";
	NetworkCustomList$[3] = "Def. Router";
	NetworkCustomList$[4] = "DHCP";
	NetworkCustomList$[5] = "WINS";
	NetworkCustomList$[6] = "HostName";
	NetworkCustomList$[7] = "Domain Name";
	NetworkCustomList$[8] = "MAC Address";
	NetworkCustomList$[9] = "Private Network";
//	NetworkCustomList$[10] = "Single IP Mode";

	PrivateNetworkList$[1] = "Private Network:";
	PrivateNetworkList$[2] = "System ID: ";

	ControlList$[1] = "Backlight";
	ControlList$[2] = "Functions";
	ControlList$[3] = "Devices";
	ControlList$[4] = "APAD Upgrade";
	ControlList$[5] = "Password";
	ControlList$[6] = "Info";
	ControlList$[7] = "Messages";
	ControlList$[8] = "Time/Date";
	ControlList$[9] = "Defaults";
	ControlList$[10] = "Front Panel";
	ControlCustomList$[1] = "Backlight";
	ControlCustomList$[2] = "Password";
	ControlCustomList$[3] = "Info";
	ControlCustomList$[4] = "Messages";
	ControlCustomList$[5] = "Time/Date";
	ControlCustomList$[6] = "Defaults";
	ControlCustomList$[7] = "Front Panel";
	ProgMonoList$[1] = "Stereo";
	ProgMonoList$[2] = "Mono";
	ProgSourceMixList$[1] = "Audio Only";
	ProgSourceMixList$[2] = "Mic. Only";
	ProgSourceMixList$[3] = "Mic. + Audio";
	RecSourceMixList$[1] = "Audio Only";
	RecSourceMixList$[2] = "Mic. Only";
	RecSourceMixList$[3] = "Mic. + Audio";
	SpchSourceMixList$[1] = "Audio Only";
	SpchSourceMixList$[2] = "Mic. Only";
	SpchSourceMixList$[3] = "Mic. + Audio";
	SpchProgVolList$[1] = "Program Only";
    SpchProgVolList$[2] = "Aux. 2 Only";
	SpchProgVolList$[3] = "Pgm/Spch Sel.";
    SpchProgVolList$[4] = "Master Vol.";
	Mic1GatingList$[1] = "Off";
	Mic1GatingList$[2] = "On";
	Mic2GatingList$[1] = "Off";
	Mic2GatingList$[2] = "On";
	Mic3GatingList$[1] = "Off";
	Mic3GatingList$[2] = "On";
	Mic4GatingList$[1] = "Off";
	Mic4GatingList$[2] = "On";
	Mic5GatingList$[1] = "Off";
	Mic5GatingList$[2] = "On";
	Mic6GatingList$[1] = "Off";
	Mic6GatingList$[2] = "On";
	Mic1CompressionList$[1]= "Off";
	Mic1CompressionList$[2]= "On";
	Mic2CompressionList$[1]= "Off";
	Mic2CompressionList$[2]= "On";
	Mic3CompressionList$[1]= "Off";
	Mic3CompressionList$[2]= "On";
	Mic4CompressionList$[1]= "Off";
	Mic4CompressionList$[2]= "On";
	Mic5CompressionList$[1]= "Off";
	Mic5CompressionList$[2]= "On";
	Mic6CompressionList$[1]= "Off";
	Mic6CompressionList$[2]= "On";
	Mic1LimiterList$[1]= "Off";
	Mic1LimiterList$[2]= "On";
	Mic2LimiterList$[1]= "Off";
	Mic2LimiterList$[2]= "On";
	Mic3LimiterList$[1]= "Off";
	Mic3LimiterList$[2]= "On";
	Mic4LimiterList$[1]= "Off";
	Mic4LimiterList$[2]= "On";
	Mic5LimiterList$[1]= "Off";
	Mic5LimiterList$[2]= "On";
	Mic6LimiterList$[1]= "Off";
	Mic6LimiterList$[2]= "On";
	PhantomPowerList$[1] = "Off";
	PhantomPowerList$[2] = "On";
	FixedVariableList$[1] = "Fixed";
	FixedVariableList$[2] = "Variable";
	WINSList$[1] = "On";
	WINSList$[2] = "Off";
	DHCPList$[1] = "On";
	DHCPList$[2] = "Off";
	SingleIPList$[1] = "On";
	SingleIPList$[2] = "Off";
	RGBPassthruList$[1] = "Off";
	RGBPassthruList$[2] = "On";
	RoomViewList$[1] = "RV None";
	RoomViewList$[2] = "RV Express";
	RoomViewList$[3] = "RV Server Edition";
	Signal1to2TypeList$[1] = "HDMI";
	Signal3to4TypeList$[1] = "Auto";//Change to 3to4
	Signal3to4TypeList$[2] = "HDMI";
	Signal3to4TypeList$[3] = "VGA";
	Signal5to5TypeList$[1] = "Auto";//Change to 5
	Signal5to5TypeList$[2] = "HDMI";
	Signal5to5TypeList$[3] = "VGA";
	Signal5to5TypeList$[4] = "BNC";


	AudioSignal1to2TypeList$[1] = "Auto";	
	AudioSignal1to2TypeList$[2] = "HDMI";
	AudioSignal1to2TypeList$[3] = "Analog";
//	AudioSignal1to2TypeList$[3] = "Disable";
//	AudioSignal1to2TypeList$[4] = "Comp + S-Video";
	AudioSignal3to4TypeList$[1] = "Auto";//Change to 3to4
	AudioSignal3to4TypeList$[2] = "HDMI";
	AudioSignal3to4TypeList$[3] = "Analog";
//	AudioSignal3to4TypeList$[4] = "Disable";
	AudioSignal5to5TypeList$[1] = "Auto";//Change to 5
	AudioSignal5to5TypeList$[2] = "HDMI";
	AudioSignal5to5TypeList$[3] = "Analog";
	AudioSignal5to5TypeList$[4] = "SPDIF";
	//AudioSignal5to5TypeList$[5] = "Disable";

	BackLightList$[1] = "Bklt Low";
	BackLightList$[2] = "Bklt Medium";
	BackLightList$[3] = "Bklt High";
	FrontPanelList$[1] = "On";
	FrontPanelList$[2] = "Off";
	UpgradeList$[1] = "Yes";
	UpgradeList$[2] = "No";
	KeypadList$[1] = "APAD";
	KeypadList$[2] = "C2N-DB12";
	KeypadList$[3] = "CNX-B12";
	KeypadList$[4] = "C2N-FTB";
	KeypadList$[5] = "MNETGW";
	KeypadList$[6] = "CLS-C6";
	KeypadList$[7] = "QM-AMP";
	DefaultsList$[1] = "Aud. settings only";
	DefaultsList$[2] = "All settings";
	DefaultsList$[3] = "Abort";
	RestoreDefaultsStep = 0;
	waitforinitializationcomplete();
	// Set RGB Pass-thru defaults if file not found, or file found but no entry.
	RGBPassthruModeConfigured = 1;
	RGBPassthruModeIndex = 1;

	if(ReadConfigFile() = 0)
		{
		OOTBFPassword$ = "12345";
		FrontPanelConfigured = 2;

/*
		RoomView = 1;
		RoomViewIndex = 1;
		FrontPanelConfigured = 2;
		FrontPanelIndex = 2;
		BackLightConfigured = 2;
		BackLightIndex = 2;
		ProgSourceMixConfigured = 3;
		ProgSourceMixIndex =  3;
		RecSourceMixConfigured = 3;
		RecSourceMixIndex =  3;
		SpchSourceMixConfigured = 3;
		SpchSourceMixIndex =  3;
		ProgMonoModeConfigured = 1;
		ProgMonoModeIndex =  1;
		SpchProgVolConfigured = 1;
		SpchProgVolIndex =  1;
		RecFixedVariableConfigured = 1;
		RecFixedVariableIndex = 1;*/
		call WriteConfigFile();
		}
	Call CreateSourceList();
	}






























































































































































