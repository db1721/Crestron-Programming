/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "DMPS System Info V1_0_2"
// #HINT ""
#CATEGORY "0"

#DEFINE_CONSTANT OPS 		1
#DEFINE_CONSTANT IPA 		2
#DEFINE_CONSTANT IPM 		3
#DEFINE_CONSTANT DEFR 		4
#DEFINE_CONSTANT DHCP		5
#DEFINE_CONSTANT WINS		6
#DEFINE_CONSTANT HOSTNAME	7
#DEFINE_CONSTANT DOMAINNAME 8
#DEFINE_CONSTANT MACADDRESS 9
#DEFINE_CONSTANT TIME_DATE	10
#DEFINE_CONSTANT DNS		11
#DEFINE_CONSTANT PROGRAM 	12
#DEFINE_CONSTANT COMPILED 	13
 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Go; 
STRING_INPUT IPAin$[1000], IPMin$[1000], DefRin$[1000], DHCPin$[1000], WINSin$[1000], HostNamein$[1000], DomainNamein$[1000];
BUFFER_INPUT FromConsole$[1600]; 

DIGITAL_OUTPUT Busy, Error; 
STRING_OUTPUT Ops$, Program$, Compiled$, IPA$, IPM$, DefR$, DHCP$, WINS$, Version$, Mac$, HostName$, DomainName$, DNS1$, DNS2$, Time_Date$, ToConsole$; 
    
    
INTEGER Marker1, Marker2, Semaphore, Counter, BusyInt, Count;
STRING Tempstring$[200];    
    
    
PUSH Go
	{
	Busy = 1;
	BusyInt = 1;
	DNS1$ = "None Entered";
	DNS2$ = "None Entered";
	//print ("FromConsole Size = %d \n",len(FromConsole$));
	clearbuffer (FromConsole$);
	ToConsole$ = "\n";
	delay(100);
	Counter = OPS;
	ToConsole$ = "version\n";
	wait(800)
		{
		Error = 1;
		Error = 0;
		Busy = 0;
		BusyInt = 0;
		}
	}

CHANGE FromConsole$
	{
	//print ("FromConsole Size = %d \n",len(FromConsole$));

	if((Semaphore = 0) && (BusyInt = 1))
		{
		Semaphore = 1;
		While(find("\x0D\x0A", FromConsole$) > 0)
			{
			TempString$ = remove("\x0D\x0A", FromConsole$);
			Switch(Counter)
				{
				Case(OPS):
					{
					marker1 = find("Cntrl Eng [", Tempstring$);
					marker2 = find("]", Tempstring$, Marker1 + 11);
					if((Marker1 > 0) && (Marker2 > 0))
						{
						Ops$ = mid(Tempstring$, marker1 + 11, Marker2 - Marker1 - 11);
						Counter = IPA;
						ToConsole$ = "fpipaddress\n";
						}
					}
				Case(IPA):
					{
					marker1 = find("Device 0 IP address: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 21);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						IPA$ = mid(Tempstring$, marker1 + 21, Marker2 - Marker1 - 21);
						Counter = IPM;
						ToConsole$ = "fpipmask\n";
						}
					}
				Case(IPM):
					{
					marker1 = find("Device 0 Subnet Mask: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 22);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						IPM$ = mid(Tempstring$, marker1 + 22, Marker2 - Marker1 - 22);
						Counter = DEFR;
						ToConsole$ = "fpdefrouter\n";
						}
					}
				Case(DEFR):
					{
					marker1 = find("Default Router: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 16);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						DefR$ = mid(Tempstring$, marker1 + 16, Marker2 - Marker1 - 16);
						Counter = DHCP;
						ToConsole$ = "dhcp\n";
						}
					}
				Case(DHCP):
					{
					marker1 = find("Current DHCP State: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 20);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						DHCP$ = mid(Tempstring$, marker1 + 20, Marker2 - Marker1 - 20);
						Counter = WINS;
						ToConsole$ = "wins\n";
						}
					}
				Case(WINS):
					{
					marker1 = find("Current WINS State: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 20);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						WINS$ = mid(Tempstring$, marker1 + 20, Marker2 - Marker1 - 20);
						Counter = HOSTNAME;
						ToConsole$ = "hostname\n";
						}
					}
				Case(HOSTNAME):
					{
					marker1 = find("Host Name: ", Tempstring$);
					marker2 = find("\x0D\x0A", TempString$, marker1 + 11);
					if((marker1 > 0) && (marker2 > 0))
						{
						HostName$ = mid(TempString$, marker1 + 11, marker2 - marker1 - 11);
						Counter = DOMAINNAME;
						ToConsole$ = "domainname\n";
						}
					}
				Case(DOMAINNAME):
					{
					marker1 = find("Domain Name: ", Tempstring$);
					marker2 = find("\x0D\x0A", TempString$, marker1 + 13);
					if((marker1 > 0) && (marker2 > 0))
						{
						DomainName$ = mid(TempString$, marker1 + 13, marker2 - marker1 - 13);
						Counter = MACADDRESS;
						ToConsole$ = "getcode\n";
						}
					}
				Case(MACADDRESS):
					{
					marker1 = find("Activation is :", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 15);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						Mac$ = mid(Tempstring$, marker1 + 15, Marker2 - Marker1 - 15);
						Counter = TIME_DATE;
						Count = 0;
						clearbuffer(FromConsole$);
						ToConsole$ = "Time\n";
						}
					}
				Case(TIME_DATE):
					{
					marker1 = find("Current Time/Date: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 19);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						Time_Date$ = mid(Tempstring$, marker1 + 19, Marker2 - Marker1 - 19);
						Counter = DNS;
						Count = 0;
						clearbuffer(FromConsole$);
						ToConsole$ = "Listdns\n";
						}
					}				
				Case(DNS):
					{
					Count = Count + 1;
					marker1 = find("\x091    ", TempString$);
					marker2 = find("\x0D\x0A", TempString$, Marker1 + 6);
					if((marker1 > 0) && (marker2 > 0))
						{
						DNS1$ = mid(TempString$, Marker1 + 6, marker2 - marker1 - 6);
						Count = Count - 1;
						}
					marker1 = find("\x092    ", TempString$);
					marker2 = find("\x0D\x0A", TempString$, Marker1 + 6);
					if((marker1 > 0) && (marker2 > 0))
						{
						DNS2$ = mid(TempString$, Marker1 + 6, marker2 - marker1 - 6);
						Count = Count - 1;
						}
					if(Count > 2)
						{
						Counter = PROGRAM;
						ToConsole$ = "progcomments\n";
						}
					}	 
				Case(PROGRAM):
					{
					marker1 = find("Program File: ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 14);
					if((marker1 > 0) && (marker2 > 0)) 
						{
						Program$ = mid(Tempstring$, marker1 + 14, Marker2 - Marker1 - 14);
						Marker1 = find(" v", TempString$, Marker1);
						Marker2 = find(".smw", TempString$, Marker1);
						Version$ = mid(TempString$, Marker1 + 2, Marker2 - Marker1 - 2);
						Counter = COMPILED;
						}
					}
				Case(COMPILED):
					{
					marker1 = find("Compiled On:  ", Tempstring$);
					marker2 = find("\x0D\x0A", Tempstring$, marker1 + 14);
					if((marker1 > 0) && (marker2 > 0))
						{
						Compiled$ = mid(Tempstring$, marker1 + 14, Marker2 - Marker1 - 14);
						cancelallwait();
						Busy = 0;
						BusyInt = 0;
						}
					}
				}
			}
		Semaphore = 0;
		}
	}

CHANGE IPAin$
	{
		Makestring(ToConsole$, "ipa 0 %s\n", IPAin$);
	}

CHANGE IPMin$
	{
		Makestring(ToConsole$, "ipm 0 %s\n", IPMin$);
	}

CHANGE Defrin$
	{
		Makestring(ToConsole$, "defr 0 %s\n", Defrin$);
	}

CHANGE DHCPin$
	{
		Makestring(ToConsole$, "dhcp %s\n", DHCPin$);
	}

CHANGE WINSin$
	{
		Makestring(ToConsole$, "wins %s\n", WINSin$);
	}

CHANGE HostNamein$
	{
		Makestring(ToConsole$, "hostname %s\n", HostNamein$);
	}

CHANGE DomainNamein$
	{
		Makestring(ToConsole$, "domainname %s\n", DomainNamein$);
	}
	
Function Main()
	{
	Semaphore = 0;
	BusyInt = 0;
	}
