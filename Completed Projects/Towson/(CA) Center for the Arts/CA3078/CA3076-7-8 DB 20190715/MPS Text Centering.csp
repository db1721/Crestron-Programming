/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT	MAXSIZE			10
#DEFINE_CONSTANT	MAXFIELDLENGTH	20
#CATEGORY "0" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
//DIGITAL_INPUT  
// ANALOG_INPUT 
STRING_INPUT SerialIn$[MAXSIZE][32];
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT SerialOut$[MAXSIZE];

STRING_FUNCTION Center(String Input$)
	{
	INTEGER Offset;
	INTEGER i;
	STRING Offset$[MAXFIELDLENGTH];
	STRING Temp$[MAXFIELDLENGTH];
		
	Offset$ = "";
	if(len(Input$) < MAXFIELDLENGTH)
		{
		Offset = (MAXFIELDLENGTH - len(Input$)) / 2;
		if(Offset > 0)
			{
			for(i = 1 to Offset)
				{
				Offset$ = Offset$ + " ";
				}
			}
		Temp$ = Offset$ + Input$;
		}
	else
		{
		Temp$ = left(Input$, MAXFIELDLENGTH);
		}
	return(Temp$);
	}

CHANGE SerialIn$
	{
    INTEGER Index;
	STRING TempIn$[32];    
 
	Index = getlastmodifiedarrayindex();
	TempIn$ = SerialIn$[Index];
    SerialOut$[Index] = Center(TempIn$);
	}

FUNCTION Main()
	{
	INTEGER i;
	
    for(i = 1 to MAXSIZE)
		{
		SerialOut$[i] = "";
		}

	}
