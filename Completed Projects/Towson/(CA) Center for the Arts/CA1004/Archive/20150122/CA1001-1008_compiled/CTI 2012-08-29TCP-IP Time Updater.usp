/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:BDT
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT RxBuffer 1200
// #CATEGORY "" 
#CATEGORY "46" "Class Use" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT  2
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 
_Skip_,
_Skip_,
Get_Time;

ANALOG_INPUT
TimeZone;

// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT 

UniversalTime$,
EasternTime$,
CentralTime$,
MountainTime$,
PacificTime$,
AlaskaTime$,
HawaiiAleutianTime$,
UniversalDate$;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT IPClient [RxBuffer];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Port;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER IPAddress$[50];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES port
   	propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;  // or, propDefaultValue = "";
#END_PARAMETER_PROPERTIES   

#BEGIN_PARAMETER_PROPERTIES IPAddress$
   	propValidUnits = unitstring;
    propDefaultUnit = unitstring;  // or, propDefaultValue = "";
#END_PARAMETER_PROPERTIES
/*
/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER 
iBusy,
iLoc1, iLoc2, iLoc3, iLoc4, iLoc5, iLoc6, iLoc7, iLoc8,
iHours, iMinutes, iSeconds;
// LONG_INTEGER
SIGNED_INTEGER
siStatus,
siSendStatus;
// SIGNED_LONG_INTEGER
STRING 
sCommand$[80],
sTemp$[RxBuffer];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function Connect()
{
	socketDisconnectClient(IPClient);
	
	siStatus = SocketConnectClient(IPClient, IPAddress$, Port, 0);
	
	if(siStatus < 0)
	{
		Print("Error connecting to socket address for IPClient\n");
	    socketDisconnectClient(IPClient);
    } 
   
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Get_Time
{
    sCommand$ = "GET /timer.html HTTP/1.1\nHost: tycho.usno.navy.mil\nConnection: close\n\n";
    Connect();
}

SOCKETCONNECT IPClient
{
	siSendStatus = SocketSend(IPClient, sCommand$);
	
	Switch(siSendStatus)
	{
	 	Case(-1):
	 	{
	 		Print("Error - ClientVariable is not a TCP/IP client variable\n");
	 	}
	    Case(-5):
	    {
	    	Print("Error - No Connection has been established\n");
	    }
	    Default:
	    {
	        Print("Data sent successfully.\nNumber of bytes sent = %d\n", siSendStatus);
	    }
	}
}


/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/


SOCKETRECEIVE IPClient
{  	
    if(find("</body></html>", IPCLient.SocketRxBuf) && !iBusy)
    {
    	iBusy = 1;
    	
    	While(Find("</body></html>", IPCLient.SocketRxBuf))
    	{
    		sTemp$ = remove("</body></html>", IPCLient.SocketRxBuf);
    		
    		iLoc1 = find ("Universal Time", sTemp$);
    		
    		UniversalTime$ = mid(sTemp$, iLoc1-14, 12);
    		
    		iLoc2 = find ("Eastern Time", sTemp$);
    		
    		EasternTime$ = mid(sTemp$, iLoc2-16, 15);
    		
    		iLoc3 = find ("Central Time", sTemp$);
    		
    		CentralTime$ = mid(sTemp$, iLoc3-16, 15);
    		
    		iLoc4 = find ("Mountain Time", sTemp$);
    		
    		MountainTime$ = mid(sTemp$, iLoc4-16, 15);
    		
    		iLoc5 = find ("Pacific Time", sTemp$);
    		
    		PacificTime$ = mid(sTemp$, iLoc5-16, 15);
    		
    		iLoc6 = find ("Alaska Time", sTemp$);
    		
    		AlaskaTime$ = mid(sTemp$, iLoc6-17, 16);
    		
    		iLoc7 = find ("Hawaii-Aleutian Time", sTemp$);
    		
    		HawaiiAleutianTime$ = mid(sTemp$, iLoc7-17, 16); 
    		
    		iLoc8 = find ("Date:", sTemp$);
    		
    		UniversalDate$ = mid(sTemp$, iLoc8+6, 16);
    		 
    	switch(Timezone)
	{
	  	Case(1):  //EasternTimeSet
	  	{
	  	iHours = atoi(mid(sTemp$, iloc2 - 16, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc2 - 13, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc2 - 11, 2));
	  	}
        Case(2):  //CentralTimeSet
        {
        iHours = atoi(mid(sTemp$, iloc3 - 16, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc3 - 13, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc3 - 11, 2));
	    }
        Case(3):  //MountainTimeSet
	  	{
	  	iHours = atoi(mid(sTemp$, iloc4 - 16, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc4 - 13, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc4 - 11, 2));
	  	}
        Case(4):  //PacificTimeSet
	  	{
	  	iHours = atoi(mid(sTemp$, iloc5 - 16, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc5 - 13, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc5 - 11, 2));
	  	}
        Case(5):  //AlaskaTimeSet
	  	{
	  	iHours = atoi(mid(sTemp$, iloc6 - 17, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc6 - 14, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc6 - 12, 2));
	  	}
        Case(6):  //HawaiiTimeSet
	  	{
	  	iHours = atoi(mid(sTemp$, iloc7 - 17, 2));
	  	iMinutes = atoi(mid(sTemp$, iloc7 - 14, 2));
	  	iSeconds = atoi(mid(sTemp$, iloc7 - 12, 2));
	  	}    
	}
	if(timezone)
	{	 
		setclock(iHours,iMinutes,iSeconds);
	}	
    	}
    	iBusy = 0;
    	SocketDisconnectClient(IPClient);
    }
}

Change TimeZone
{       
     sCommand$ = "GET /timer.html HTTP/1.1\nHost: tycho.usno.navy.mil\nConnection: close\n\n";
     Connect();
      
	     	 	 

}
SOCKETSTATUS IPClient
{
    Switch(IPClient.SocketStatus)
    {
    	Case(0):{Print("Not Connected\n");}
        Case(1):{Print("Waiting for Connection\n");}
        Case(2):{Print("Connected\n");}
        Case(3):{Print("Connecion Failed\n");}
        Case(4):{Print("Connecion Broken Remotely\n");}
        Case(5):{Print("Connecion Broken Locally\n");}
        Case(6):{Print("Performing DNS Lookup\n");}
        Case(7):{Print("DNS Failed\n");}
        Case(8):{Print("DNS Name Resolved\n");}
        Default:{Print("NUnknown Response\n");}
    }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    iBusy = 0;
    sCommand$ = "";
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
