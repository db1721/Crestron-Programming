/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:	PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BiAmp Level Processor v7.2"
// #HINT ""
#DEFINE_CONSTANT	TRUE		1
#DEFINE_CONSTANT	FALSE		0

#DEFINE_CONSTANT	csSENDNAME	"Send Name\x0D\x0A"
// #CATEGORY "" 
#DEFAULT_VOLATILE
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Vol_Up, Vol_Down, Poll_Level, Send_New_Level;
 
ANALOG_INPUT Volume_Max_Level,
             Volume_Min_Level, New_Volume_Level;
STRING_INPUT 	Volume_Device_ID[2],
							Volume_Device_Instance[50],
             	Volume_Index1[2],
             	Volume_Index2[2],
             	Volume_Command_Type[15], Volume_Step[3];
BUFFER_INPUT Device_RX$[2000]; 

DIGITAL_OUTPUT Start_Up_Out;
ANALOG_OUTPUT Volume_Level;
STRING_OUTPUT Device_TX$, Volume_Level_Text; 
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER bRXOK, iStep, iMaxVol, iMinVol;
INTEGER iVolIndex1, iVolIndex2, iVolumeSigned, iVolume;

STRING sTempData[255], sVol[100], sVolText[20];
STRING sVolumePrefix[150], sVolumeType[20], sInstance[52], sStep[3], sSendInst[150];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function ProcessVolumeData(string Data)
{
	string sTemp[25], sVal[10];
	
	sTemp = remove(sVolumePrefix, Data); //remove prefix
	sVolText = left(Data, find("\x2E", Data) - 1) + mid(Data, find("\x2E", Data) + 1, 1);
	sVal = remove("\x2E", Data);
	sTemp = left(sVolText, len(sVolText) - 1) + "." + right(sVolText, 1);
	
	if(find("-", sVolText))
	{
		iVolumeSigned = 65536 - atoi(sVal);	//sVal Value is Negative
		iVolume = abs(atoi(sVolText) - 1000);
	}
	else
	{
		iVolumeSigned = atoi(sVal); 							//value is positive
		iVolume = atoi(sVolText) + 1000;
	}
	Volume_Level = iVolumeSigned;
	Volume_Level_Text = sTemp;
}

Function fSendCommand()
{
	if(Vol_Up = 1)
	{
		if((iVolume + iStep) <= iMaxVol)
		{
			makestring(Device_TX$, "INCD %s %s\x0A", sVol, sStep);
			makestring(sVolumePrefix, "#INCD %s\x20", sVol);
		}
		else if(iVolume <> iMaxVol)
		{
			makestring(Device_TX$, "SETD %s %d\x0A", sVol, ((iMaxVol - 1000) / 10));
			makestring(sVolumePrefix, "#SETD %s\x20", sVol);
		}
	}
	else if(Vol_Down = 1)
	{
		if((iVolume - iStep) >= iMinVol)
		{
			makestring(Device_TX$, "INCD %s -%s\x0A", sVol, sStep);
			makestring(sVolumePrefix, "#INCD %s\x20", sVol);
		}
		else if(iVolume <> iMinVol)
		{
			makestring(Device_TX$, "SETD %s %d\x0A", sVol, ((iMinVol - 1000) / 10));
			makestring(sVolumePrefix, "#SETD %s\x20", sVol);
		}
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE Volume_Max_Level
{
	if((Volume_Max_Level S> -100) && (Volume_Max_Level S<= 12))
	{
		iMaxVol = (Volume_Max_Level * 10) + 1000;
	}
	else
	{
		iMaxVol = 1120;
	}
}

CHANGE Volume_Min_Level
{
	if((Volume_Min_Level S>= -100) && (Volume_Min_Level S< 12))
	{
		iMinVol = (Volume_Min_Level * 10) + 1000;
	}
	else
	{
		iMinVol = 0;
	}
}

CHANGE Device_RX$
{
	if (bRXOK)
	{
		bRXOK = FALSE;
		while(find("\n", Device_RX$) > 0)
		{
			sTempData = gather("\n", Device_RX$);
			if(find(csSENDNAME, sTempData) > 0)
			{
				makestring(Device_TX$, "%s=%s\x0D\x0A", left(sTempData, len(sTempData) - 2), sSendInst);
			}
			else if(find(sVolumePrefix, sTempData)) //valid volume data
			{
				call ProcessVolumeData(sTempData);
				if((Vol_Up = 1) || (Vol_Down = 1))
				{
					call fSendCommand();
				}
			}
		}
		bRXOK = TRUE;
	}
}

CHANGE	Volume_Device_Instance
{
	if(find("\x20", Volume_Device_Instance) > 0)
	{
		makestring(sInstance, "\x22%s\x22", left(Volume_Device_Instance, 50));
	}
	else
	{
		sInstance = left(Volume_Device_Instance, 50);
	}
}

change Volume_Index1
{
	iVolIndex1 = atoi(Volume_Index1);
}

change Volume_Index2
{
	iVolIndex2 = atoi(Volume_Index2);
}

CHANGE Volume_Command_Type
{
	Start_Up_Out = 0;
	sVolumeType = Volume_Command_Type;
	sVolumePrefix = "";
	sVol = "";
	if((iVolIndex1 > 0) && (iVolIndex2 > 0))
	{
		makestring(sVol, "%s %s %s %s %s", Volume_Device_ID, sVolumeType,
						 sInstance, Volume_Index1, Volume_Index2);
		makestring(sSendInst, "%s %s %s %s", sVolumeType, sInstance,
						 Volume_Index1, Volume_Index2);
	}
	else if((iVolIndex1 > 0) && (iVolIndex2 = 0))
	{
		makestring(sVol, "%s %s %s %s", Volume_Device_ID, sVolumeType,
						 sInstance, Volume_Index1);
		makestring(sSendInst, "%s %s %s", sVolumeType, sInstance,
						 Volume_Index1);
	}
	else
	{
		makestring(sVol, "%s %s %s", Volume_Device_ID, sVolumeType, sInstance);
		makestring(sSendInst, "%s %s", sVolumeType, sInstance);
	}
}

CHANGE Volume_Step
{
	STRING sTempStep[5];
	
	sStep = Volume_Step;
	sTempStep = left(sStep, 1) + right(sStep, 1);
	iStep = atoi(sTempStep);
}

Push Vol_Up
{
	if((iVolume + iStep) <= iMaxVol)
	{
		makestring(Device_TX$, "INCD %s %s\x0A", sVol, sStep);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
	else if(iVolume <> iMaxVol)
	{
		makestring(Device_TX$, "SETD %s %d\x0A", sVol, ((iMaxVol - 1000) / 10));
		makestring(sVolumePrefix, "#SETD %s\x20", sVol);
	}
}


Push Vol_Down
{
	if((iVolume - iStep) >= iMinVol)
	{
		makestring(Device_TX$, "INCD %s -%s\x0A", sVol, sStep);
		makestring(sVolumePrefix, "#INCD %s\x20", sVol);
	}
	else if(iVolume <> iMinVol)
	{
		makestring(Device_TX$, "SETD %s %d\x0A", sVol, ((iMinVol - 1000) / 10));
		makestring(sVolumePrefix, "#SETD %s\x20", sVol);
	}
}

Push Send_New_Level
{
	if((New_Volume_Level S>= Volume_Min_Level) && (New_Volume_Level S<= (Volume_Max_Level + 1)))
	{
		makestring(Device_TX$, "SETD %s %d\x0A", sVol, New_Volume_Level);
		makestring(sVolumePrefix, "#SETD %s\x20", sVol);
	}
}

Push Poll_Level
{
	makestring(Device_TX$, "GETD %s\x0A", sVol);
	makestring(sVolumePrefix, "#GETD %s\x20", sVol);
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
  waitforinitializationcomplete();
  bRXOK = TRUE;
	sStep = "1.0";
	iStep = 10;
	iVolume = 1000;
	Start_Up_Out = 1;
}
