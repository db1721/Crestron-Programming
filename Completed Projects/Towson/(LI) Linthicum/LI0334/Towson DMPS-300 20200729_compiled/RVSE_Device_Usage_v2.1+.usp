/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""

#DEFINE_CONSTANT MODE_DONTCOUNT 0
#DEFINE_CONSTANT MODE_COUNT     1

#DEFINE_CONSTANT MAX_ASSET_ID_LEN		50
#DEFINE_CONSTANT MAX_MTG_ID_LEN			50

#DEFINE_CONSTANT MAX_ASSET_TYPE_LEN	25
#DEFINE_CONSTANT MAX_ASSET_NAME_LEN	50


// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Enable_Log_On_ID_Change,
							RV_Online,
						  Clock,
							Start,
							Stop;
// ANALOG_INPUT 
STRING_INPUT Meeting_ID$[MAX_MTG_ID_LEN], 
						 Asset_ID$[MAX_ASSET_ID_LEN],
						 Asset_Type$[MAX_ASSET_TYPE_LEN],
						 Asset_Name$[MAX_ASSET_NAME_LEN];
						  
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT Last_Used_Minutes; 

STRING_OUTPUT To_RV_Device_Usage$; 


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_iLastUsedMinutes,
				g_iLastUsedSeconds,
				g_iMode;
				
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING g_sLastMeetingID[MAX_MTG_ID_LEN];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function OutputLastUsed(integer Type)
{
	string sAssetID[MAX_ASSET_ID_LEN], sMeetingID[MAX_MTG_ID_LEN];
	
	//Format: "USAGE||-||-||TIME||Device_Type||Device_Name||-||Usage_Minutes||-||Asset_ID||Meeting_ID"

	//If minutes = 0 and seconds > 0, force minutes to 1
	if (g_iLastUsedMinutes = 0 && g_iLastUsedSeconds > 0)
	{
		g_iLastUsedMinutes = 1;
	}
	
	Last_Used_Minutes = g_iLastUsedMinutes;
	
	//Set Asset & Meeting ID's
	
	if (len(Asset_ID$) > 0)
	{
		sAssetID = Asset_ID$;
	}
	else
	{
		sAssetID = "-";
	}	
  
  if (Type = 1)
  {
  	//Use Meeting_ID$
  	
		if (len(Meeting_ID$) > 0)
		{
			sMeetingID = Meeting_ID$;
		}
		else
		{
			sMeetingID = "-";
		}  	
  }
  else if (Type = 2)
  {
  	//Use g_sLastMeetingID
  	
		if (len(g_sLastMeetingID) > 0)
		{
			sMeetingID = g_sLastMeetingID;
		}
		else
		{
			sMeetingID = "-";
		}  	
  }	
	
	makestring (To_RV_Device_Usage$, "USAGE||-||-||TIME||%s||%s||-||%s||-||%s||%s||",
	 Asset_Type$, Asset_Name$, itoa(g_iLastUsedminutes), sAssetID, sMeetingID);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Meeting_ID$
{
	if (Enable_Log_On_ID_Change)
	{
		//Is this id different than the last?
		if (Meeting_ID$ <> g_sLastMeetingID)
		{
			//Yes, ID is different.
			
			//Are we in count mode?
			if (g_iMode = MODE_COUNT)
			{
				//Yes, we are in count mode.
				
				//Send out the current count using the previous ID
				call OutputLastUsed(2);
				
				//Reset the counters
				g_iLastUsedMinutes = 0;
				g_iLastUsedSeconds = 0;				 
			}
		}		
	}
	
	g_sLastMeetingID = Meeting_ID$;
}

PUSH Start
{
    if (g_iMode = MODE_DONTCOUNT)
    {
    	g_iLastUsedMinutes = 0;
    	g_iLastUsedSeconds = 0;
    } 
    
    g_iMode = MODE_COUNT;
}

PUSH Stop
{
	if (g_iMode = MODE_COUNT)
	{
    g_iMode = MODE_DONTCOUNT;
    
    //Only log data is something has been counted
    if (g_iLastUsedMinutes > 0 || g_iLastUsedSeconds > 0)
     call OutputLastUsed(1);
	}
}



PUSH Clock
{
  if (g_iMode = MODE_COUNT)
  {
    g_iLastUsedSeconds = g_iLastUsedSeconds + 10;
    if (g_iLastUsedSeconds > 59)
    {
      g_iLastUsedMinutes = g_iLastUsedMinutes + 1;
      g_iLastUsedSeconds = g_iLastUsedSeconds - 60;
    }
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	
	g_iMode = MODE_DONTCOUNT;
}


