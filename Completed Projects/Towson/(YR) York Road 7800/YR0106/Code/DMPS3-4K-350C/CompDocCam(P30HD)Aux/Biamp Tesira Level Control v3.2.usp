/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira Level Control v3.2
System Number:
Programmer: DGG
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Level Control v3.2.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_; 
DIGITAL_INPUT Poll_Level, _SKIP_; 
DIGITAL_INPUT Level_Up, Level_Down, _SKIP_, Send_New_Level_dB, Send_New_Level_Percent; 
DIGITAL_INPUT Enable;
ANALOG_INPUT New_Level_dB, New_Level_Percent, _SKIP_;
STRING_INPUT _SKIP_,_SKIP_;

DIGITAL_OUTPUT _SKIP_, _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_OUTPUT _SKIP_,_SKIP_;
DIGITAL_OUTPUT Is_Initialized, _SKIP_, _SKIP_, _SKIP_; 
ANALOG_OUTPUT Volume_Level_dB, Volume_Level_Percent;
STRING_OUTPUT Volume_Level_Text, _SKIP_;
DIGITAL_OUTPUT Is_Quarantined;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER Instance_Tag[50], Level_Type[50];
INTEGER_PARAMETER Index_1, Index_2;
INTEGER_PARAMETER Level_Step;
INTEGER_PARAMETER Command_Processor_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Instance_Tag, Level_Type
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Index_1, Index_2
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 256d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Level_Step
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 6d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

LevelComponent component;
INTEGER IsReady;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializeChange(LevelComponent sender, UInt16EventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnQuarantineChange(LevelComponent sender, UInt16EventArgs args)
{
	Is_Quarantined = args.Payload;
}

EVENTHANDLER OnLevelChangeSignedUnscaled(LevelComponent sender, Int16EventArgs args)
{
	Volume_Level_dB = args.Payload;
}

EVENTHANDLER OnLevelChangePercent(LevelComponent sender, UInt16EventArgs args)
{
	Volume_Level_Percent = args.Payload;
}

EVENTHANDLER OnLevelTextChange(LevelComponent sender, StringEventArgs args)
{
	MakeString(Volume_Level_Text,"%s", args.Payload);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
THREADSAFE PUSH Level_Up
{
	component.Raise();
}
        
THREADSAFE PUSH Level_Down
{
	component.Lower();
}

THREADSAFE RELEASE Level_Up, Level_Down
{
	component.Stop();
}

THREADSAFE CHANGE New_Level_dB
{
	IF (Send_New_Level_dB)
	{
		component.SetLevel(New_Level_dB);
		DELAY(30);
	}
}              

/*
THREADSAFE PUSH Send_New_Level_dB
{
	component.SetLevel(New_Level_dB);
}
*/

THREADSAFE RELEASE Send_New_Level_dB
{
	IF (New_Level_dB != Volume_Level_dB)
		component.SetLevel(New_Level_dB);
}
   
THREADSAFE CHANGE New_Level_Percent
{
	IF (Send_New_Level_Percent)
	{
		component.SetPercent(New_Level_Percent);
		DELAY(30);
	}
}

THREADSAFE RELEASE Send_New_Level_Percent
{
	IF (New_Level_Percent != Volume_Level_Percent)
		component.SetPercent(New_Level_Percent);
}

THREADSAFE PUSH Poll_Level
{
	component.PollState();
}

THREADSAFE PUSH Enable
{
	IF (IsReady)
		component.Configure(Command_Processor_ID, Instance_Tag, Level_Type, Index_1, Index_2, Level_Step);
}
THREADSAFE RELEASE Enable
{
	IF (IsReady)
		component.UnRegister();
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	IsReady = FALSE;

    WaitForInitializationComplete();
	REGISTEREVENT(component, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(component, OnQuarantineChange, OnQuarantineChange); 
	REGISTEREVENT(component, OnLevelChangeSignedUnscaled, OnLevelChangeSignedUnscaled); 
	REGISTEREVENT(component, OnLevelChangePercent, OnLevelChangePercent);
    REGISTEREVENT(component, OnLevelTextChange, OnLevelTextChange);
                              
	IF (Enable)         
	    component.Configure(Command_Processor_ID, Instance_Tag, Level_Type, Index_1, Index_2, Level_Step);

	IsReady = TRUE;
}

