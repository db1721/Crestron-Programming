/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:Biamp Tesira Level Control v1.5
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150
#DEFINE_CONSTANT MAX_SCALED_LEVEL 65535
#DEFINE_CONSTANT MIN_SCALED_LEVEL 0

#DEFINE_CONSTANT AEC_CLASS_CODE 1040
#DEFINE_CONSTANT INPUT_CLASS_CODE 1024
#DEFINE_CONSTANT OUTPUT_CLASS_CODE 1025
#DEFINE_CONSTANT CNINPUT_CLASS_CODE 1036
#DEFINE_CONSTANT CNOUTPUT_CLASS_CODE 1037
#DEFINE_CONSTANT TIRECEIVE_CLASS_CODE 1027
#DEFINE_CONSTANT TIXMIT_CLASS_CODE 1028
#DEFINE_CONSTANT VOIPRECEIVE_CLASS_CODE 1030
#DEFINE_CONSTANT VOIPXMIT_CLASS_CODE 1031
#DEFINE_CONSTANT GATEAUTOMIX_CLASS_CODE 1536
#DEFINE_CONSTANT GSAUTOMIX_CLASS_CODE 1540
#DEFINE_CONSTANT SMIX_CLASS_CODE 1537
#DEFINE_CONSTANT MMIX_CLASS_CODE 1538
#DEFINE_CONSTANT RC_CLASS_CODE 1539
#DEFINE_CONSTANT ROUTER_CLASS_CODE 4096
#DEFINE_CONSTANT SSELECT_CLASS_CODE 4097
#DEFINE_CONSTANT LEVEL_CLASS_CODE 5120
#DEFINE_CONSTANT USB_INPUT_CLASS_CODE 1047
#DEFINE_CONSTANT USB_OUTPUT_CLASS_CODE 1048

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Level Control v1.4.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_; 
DIGITAL_INPUT Poll_Level, _SKIP_; 
DIGITAL_INPUT Level_Up, Level_Down, _SKIP_, Send_New_Level; 
ANALOG_INPUT New_Level,_SKIP_;
STRING_INPUT _SKIP_,_SKIP_;
BUFFER_INPUT From_Processor$[1024];

DIGITAL_OUTPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_OUTPUT _SKIP_,_SKIP_;
DIGITAL_OUTPUT Is_Initialized, _SKIP_, _SKIP_, _SKIP_; 
ANALOG_OUTPUT Volume_Gauge, Volume_Level_Signed_Unscaled;
STRING_OUTPUT Volume_Level_Text, _SKIP_;
STRING_OUTPUT To_Processor$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER InstanceTag[50], LevelType[50];
INTEGER_PARAMETER Index1, Index2;
INTEGER_PARAMETER Level_Step;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES InstanceTag, LevelType
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Index1, Index2
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 256d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Level_Step
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 6d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER myID;
INTEGER myClassCode;
SIGNED_INTEGER myLevelValue;
SIGNED_INTEGER myMaxLevelValue;
SIGNED_INTEGER myMinLevelValue;

INTEGER parsingModuleBusy;
STRING parsedModuleMsg[254];
INTEGER responseModuleMsgID;         
STRING responseRequestMsg[MAX_COMMAND_SIZE];
STRING responseMsg[MAX_COMMAND_SIZE];           
STRING parseValue[MAX_COMMAND_SIZE];        
INTEGER hasSubscriptionRegistered;         
STRING trash[MAX_COMMAND_SIZE];
          
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
////////////////////////////////////////////////////////////
// Module Communication Method Helpers
////////////////////////////////////////////////////////////
String_Function getBoundString(STRING source, STRING startString, STRING endString)
{
	INTEGER startIndex;
	INTEGER endIndex;
	STRING response[MAX_COMMAND_SIZE];
                                     
    response = "";

	IF (LEN(source) > 0)
	{
		startIndex = FIND(startString, source);
		endIndex = FIND(endString, source, startIndex + 1);
	
		IF (startIndex > 0 && startIndex < endIndex)
		{
			startIndex = startIndex + LEN(startString);
				
			response = MID(source, startIndex, endIndex - startIndex);
		}
	}

	RETURN (response);
}
 
////////////////////////////////////////////////////////////
// Protocol Method Helpers	
////////////////////////////////////////////////////////////
String_Function buildProtocolMsg(STRING command, STRING control)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = "";

	IF (Index1 > 0 && Index2 > 0)
		MakeString(msg,"%s %s %s %d %d", InstanceTag, command, control, Index1, Index2);
	ELSE IF (Index1 > 0 && Index2 = 0)
		MakeString(msg,"%s %s %s %d", InstanceTag, command, control, Index1);
	ELSE IF (Index1 = 0 && Index2 > 0)
		MakeString(msg,"%s %s %s %d", InstanceTag, command, control, Index2);
	ELSE
		MakeString(msg,"%s %s %s", InstanceTag, command, control);

	RETURN (msg);
}

String_Function buildProtocolMsg_WithStringValue(STRING command, STRING control, STRING value)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = buildProtocolMsg(command, control);

	MakeString(msg,"%s %s", msg, value);

	RETURN (msg);
}

String_Function buildProtocolMsg_WithIntegerValue(STRING command, STRING control, INTEGER value)
{
	STRING msg[MAX_COMMAND_SIZE];

	msg = buildProtocolMsg(command, control);

	MakeString(msg,"%s %d", msg, value);

	RETURN (msg);
}
////////////////////////////////////////////////////////////
// Initialize Method Helpers	
////////////////////////////////////////////////////////////
Function getAlias()
{
	STRING outgoingMsg[100];

	MakeString(outgoingMsg,"SESSION get alias %s", InstanceTag);
	MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
}

Function getInitialized()
{
	STRING outgoingMsg[100];
	STRING subscribeObject[100];

	hasSubscriptionRegistered = FALSE;
                                         
	SWITCH (myClassCode)
	{
		CASE (INPUT_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (OUTPUT_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (TIRECEIVE_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (TIXMIT_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 0;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (VOIPRECEIVE_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (VOIPXMIT_CLASS_CODE):
		{
			IF (LevelType = "level")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 0;
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (SMIX_CLASS_CODE):
		{
			IF (LevelType = "inputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "inputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "inputMinLevel"); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				outgoingMsg = buildProtocolMsg("get", LevelType); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "outputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "outputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "outputMinLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
						
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (MMIX_CLASS_CODE):
		{
			IF (LevelType = "inputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "inputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "inputMinLevel"); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				outgoingMsg = buildProtocolMsg("get", LevelType); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "outputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "outputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "outputMinLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
						
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "crosspointLevel")
			{		
				myMaxLevelValue = 0;
				myMinLevelValue = -100;
				
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}	
		CASE (USB_INPUT_CLASS_CODE):
		{
			IF (LevelType = "hostMasterVol")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;

				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "hostVol")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 12;

				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		CASE (USB_OUTPUT_CLASS_CODE):
		{
			IF (LevelType = "hostMasterVol")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 0;

				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "hostVol")
			{
				myMinLevelValue = -100;
				myMaxLevelValue = 0;

				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
		DEFAULT:
		{
			IF (LevelType = "level")
			{
				outgoingMsg = buildProtocolMsg("get", "maxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "minLevel"); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
					                                                                                                                
				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "inputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "inputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "inputMinLevel"); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				outgoingMsg = buildProtocolMsg("get", LevelType); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "outputLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "outputMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "outputMinLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "levelOut")
			{
				outgoingMsg = buildProtocolMsg("get", "levelOutMax");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "levelOutMin");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);

				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject); 
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
						
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "levelIn")
			{
				outgoingMsg = buildProtocolMsg("get", "levelInMax");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "levelInMin");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
						
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "levelSource")
			{
				outgoingMsg = buildProtocolMsg("get", "levelSourceMax");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "levelSourceMin");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
						
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "channelLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "channelMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "channelMinLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);
				outgoingMsg = buildProtocolMsg_WithStringValue("get", "channelMinLevel", subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
			ELSE IF (LevelType = "sourceLevel")
			{
				outgoingMsg = buildProtocolMsg("get", "sourceMaxLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			
				outgoingMsg = buildProtocolMsg("get", "sourceMinLevel");
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
				
				MakeString(subscribeObject,"\x22[%d*%s]\x22", myID, LevelType);

				outgoingMsg = buildProtocolMsg_WithStringValue("subscribe", LevelType, subscribeObject);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
		
				outgoingMsg = buildProtocolMsg("get", LevelType);
				MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
			}
		}
	}
}

Function doPoll()
{
	STRING outgoingMsg[100];
	STRING subscribeObject[100];
                               
	IF (hasSubscriptionRegistered = FALSE)
	{
		outgoingMsg = buildProtocolMsg("get", LevelType);
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
	}
}

////////////////////////////////////////////////////////////
// String Method Helpers
////////////////////////////////////////////////////////////
Integer_Function startsWith(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) = 1); 
}

Integer_Function contains(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) > 0); 
}
                 
Integer_Function ATOI_Signed(STRING value)
{
	IF (startsWith("-", value))
		RETURN (0-ATOI(value));
	ELSE
		RETURN (ATOI(value));
}

String_Function trim(STRING value)
{
	WHILE(LEFT(value, 1) = "\x20")
		value = RIGHT(value, LEN(value) - 1);

	WHILE(RIGHT(value, 1) = "\x20")
		value = LEFT(value, LEN(value) - 1);

	RETURN (value);
}

////////////////////////////////////////////////////////////
// Level Value Output Method Helpers
////////////////////////////////////////////////////////////
Integer_Function scaleLevel(INTEGER value)
{
	Integer Stage1;
	Integer Stage2;

	Stage1 = value - myMinLevelValue;

	Stage2 = myMaxLevelValue - myMinLevelValue;

	RETURN ((Stage1 * 65535) / Stage2);
}

Function displayCurrentLevel(INTEGER value)
{
	Volume_Gauge = scaleLevel(value);
	Volume_Level_Signed_Unscaled = value;
	MakeString(Volume_Level_Text,"%d",value);
}

Integer_Function getNextRaiseValue()
{
	Signed_Integer test;

	test = myLevelValue + Level_Step;

	IF (test > myMaxLevelValue)
		RETURN (myMaxLevelValue);

	RETURN (test);
}

Integer_Function getNextLowerValue()
{
	Signed_Integer test;

	test = myLevelValue - Level_Step;

	IF (test < myMinLevelValue)
		RETURN (myMinLevelValue);

	RETURN (test);
}
 
Function raiseLevel()
{
	MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, buildProtocolMsg_WithIntegerValue("set", LevelType, getNextRaiseValue()));

	WAIT (50, RAISE_LEVEL)
	{
		IF (Level_Up)
			raiseLevel();
	}
}

Function cancelRaiseLevel()
{
	CANCELWAIT(RAISE_LEVEL);
}

Function lowerLevel()
{
	MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, buildProtocolMsg_WithIntegerValue("set", LevelType, getNextLowerValue()));

	WAIT (50, LOWER_LEVEL)
	{
		IF (Level_Down)
			lowerLevel();	
	}
}

Function cancelLowerLevel()
{
	CANCELWAIT(LOWER_LEVEL);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Level_Up
{
	IF (Is_Initialized = TRUE)
	{
		cancelLowerLevel();
		raiseLevel();
	}
}

PUSH Level_Down
{
	IF (Is_Initialized = TRUE)
	{
		cancelRaiseLevel();
		lowerLevel();
	}
}

RELEASE Level_Up, Level_Down
{
	IF (Is_Initialized = TRUE)
	{
		cancelRaiseLevel();
		cancelLowerLevel();	
	}
}

PUSH Poll_Level
{
	IF (Is_Initialized = TRUE)
	{
		doPoll();	
	}
}


// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessProcessorMsg()
{
    IF (LEN(parsedModuleMsg) > 0)
    {
        IF (contains("REGISTER", parsedModuleMsg))
        {
            myID = ATOI(getBoundString(parsedModuleMsg,"<",">"));
            
            IF (myID > 0)
                MakeString(To_Processor$,"REGISTER<%d>", myID);
        }
        ELSE IF (contains("INIT", parsedModuleMsg))
        {
            Is_Initialized = FALSE;
            getAlias();
        }
        ELSE IF (contains("RESPONSE_MSG", parsedModuleMsg))
        {
            responseRequestMsg = getBoundString(parsedModuleMsg,"<","|");
            responseMsg = getBoundString(parsedModuleMsg,"|",">");

            MakeString(To_Processor$,"RESPONSE_OK<%d|%s>", myID, responseRequestMsg);
               
            IF (contains("get", responseRequestMsg))
            {
                IF (contains("max", LOWER(responseRequestMsg)))
                {
                    IF (contains("+OK", responseMsg))
                    {
                        trash = REMOVE("+OK ",responseMsg);

                        myMaxLevelValue = ATOI_Signed(responseMsg);
                    }
                }
                ELSE IF (contains("min", LOWER(responseRequestMsg)))
                {
                    IF (contains("+OK", responseMsg))
                    {
                        trash = REMOVE("+OK ",responseMsg);

                        myMinLevelValue = ATOI_Signed(responseMsg);
                    }
                }
                ELSE IF (contains(LevelType, responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE("+OK ",responseMsg);

                        myLevelValue = ATOI_Signed(responseMsg);
                        displayCurrentLevel(myLevelValue);
                    }

                    IF (Is_Initialized = FALSE)
                    {
                        Is_Initialized = TRUE;
                        
                        MakeString(To_Processor$,"INIT_DONE<%d>", myID);
                    }
                }
                ELSE IF (contains("alias", responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {
                        trash = REMOVE("+OK [",responseMsg);

                        myClassCode = ATOI(getBoundString(responseMsg," "," "));

                        getInitialized();
                    }
                }
            }
            ELSE IF (contains("set", responseRequestMsg))
            {
                IF (contains(LevelType, responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        trash = REMOVE(buildProtocolMsg("set", LevelType), responseRequestMsg);
                        responseRequestMsg = trim(responseRequestMsg);
                        myLevelValue = ATOI_Signed(responseRequestMsg);
                        displayCurrentLevel(myLevelValue);
                    }
                }
            }
            ELSE IF (contains("subscribe", responseRequestMsg))
            {
                IF (contains(LevelType, responseRequestMsg))
                {
                    IF (contains("+OK", responseMsg))
                    {			
                        hasSubscriptionRegistered = TRUE;
                    }
                }
            }					
        }
        ELSE IF (contains("SUBSCRIBED_MSG", parsedModuleMsg))
        {
            responseMsg = getBoundString(parsedModuleMsg,"<",">");

            IF (contains(LevelType, responseMsg))
            {							
                trash = REMOVE("]\x22 ",responseMsg);
                
                myLevelValue = ATOI_Signed(responseMsg);
                displayCurrentLevel(myLevelValue);
            }
        }
    }    
}

#if_series3
THREADSAFE CHANGE From_Processor$
{
    WHILE (TRUE)
    {
        try
        {
			parsedModuleMsg = GATHER(">", From_Processor$);

		    IF (contains(parsedModuleMsg, From_Processor$))
		        clearBuffer(From_Processor$);

            ProcessProcessorMsg();        
        }
        catch
        {
            print("Issue with Processor message handeling\n");
        }
    }
}
#else
CHANGE From_Processor$
{
	IF (parsingModuleBusy = FALSE)
	{
		parsingModuleBusy = TRUE;
                       
		WHILE (TRUE)
		{           
			parsedModuleMsg = GATHER(">", From_Processor$);
 
		    IF (contains(parsedModuleMsg, From_Processor$))
		        clearBuffer(From_Processor$);

            ProcessProcessorMsg();
		}

		parsingModuleBusy = FALSE;
	}
}
#endif




PUSH Send_New_Level
{
	STRING outgoingMsg[100];
	Signed_Integer value;

	IF (Is_Initialized = TRUE)
	{
		value = New_Level;
	                                                                                        
		IF (value >= myMinLevelValue && value <= myMaxLevelValue)
		{
			outgoingMsg = buildProtocolMsg_WithIntegerValue("set", LevelType, value);
	
			MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
		}
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	parsingModuleBusy = FALSE;

	Is_Initialized = FALSE;
	hasSubscriptionRegistered = FALSE;

	myMaxLevelValue = 0;
	myMinLevelValue = -100;

    //WaitForInitializationComplete();
}


